
TUK_Elevator_2017132035.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004628  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000328  080047d8  080047d8  000147d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004b00  08004b00  00020074  2**0
                  CONTENTS
  4 .ARM          00000008  08004b00  08004b00  00014b00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004b08  08004b08  00020074  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004b08  08004b08  00014b08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004b0c  08004b0c  00014b0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000074  20000000  08004b10  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020074  2**0
                  CONTENTS
 10 .bss          00000958  20000074  20000074  00020074  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  200009cc  200009cc  00020074  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020074  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010239  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000200f  00000000  00000000  000302dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000c88  00000000  00000000  000322f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c00  00000000  00000000  00032f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023bc6  00000000  00000000  00033b78  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000e8e7  00000000  00000000  0005773e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da5e1  00000000  00000000  00066025  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00140606  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003830  00000000  00000000  0014065c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000074 	.word	0x20000074
 80001cc:	00000000 	.word	0x00000000
 80001d0:	080047c0 	.word	0x080047c0

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000078 	.word	0x20000078
 80001ec:	080047c0 	.word	0x080047c0

080001f0 <strlen>:
 80001f0:	4603      	mov	r3, r0
 80001f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001f6:	2a00      	cmp	r2, #0
 80001f8:	d1fb      	bne.n	80001f2 <strlen+0x2>
 80001fa:	1a18      	subs	r0, r3, r0
 80001fc:	3801      	subs	r0, #1
 80001fe:	4770      	bx	lr

08000200 <memchr>:
 8000200:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000204:	2a10      	cmp	r2, #16
 8000206:	db2b      	blt.n	8000260 <memchr+0x60>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	d008      	beq.n	8000220 <memchr+0x20>
 800020e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000212:	3a01      	subs	r2, #1
 8000214:	428b      	cmp	r3, r1
 8000216:	d02d      	beq.n	8000274 <memchr+0x74>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	b342      	cbz	r2, 8000270 <memchr+0x70>
 800021e:	d1f6      	bne.n	800020e <memchr+0xe>
 8000220:	b4f0      	push	{r4, r5, r6, r7}
 8000222:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000226:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800022a:	f022 0407 	bic.w	r4, r2, #7
 800022e:	f07f 0700 	mvns.w	r7, #0
 8000232:	2300      	movs	r3, #0
 8000234:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000238:	3c08      	subs	r4, #8
 800023a:	ea85 0501 	eor.w	r5, r5, r1
 800023e:	ea86 0601 	eor.w	r6, r6, r1
 8000242:	fa85 f547 	uadd8	r5, r5, r7
 8000246:	faa3 f587 	sel	r5, r3, r7
 800024a:	fa86 f647 	uadd8	r6, r6, r7
 800024e:	faa5 f687 	sel	r6, r5, r7
 8000252:	b98e      	cbnz	r6, 8000278 <memchr+0x78>
 8000254:	d1ee      	bne.n	8000234 <memchr+0x34>
 8000256:	bcf0      	pop	{r4, r5, r6, r7}
 8000258:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800025c:	f002 0207 	and.w	r2, r2, #7
 8000260:	b132      	cbz	r2, 8000270 <memchr+0x70>
 8000262:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000266:	3a01      	subs	r2, #1
 8000268:	ea83 0301 	eor.w	r3, r3, r1
 800026c:	b113      	cbz	r3, 8000274 <memchr+0x74>
 800026e:	d1f8      	bne.n	8000262 <memchr+0x62>
 8000270:	2000      	movs	r0, #0
 8000272:	4770      	bx	lr
 8000274:	3801      	subs	r0, #1
 8000276:	4770      	bx	lr
 8000278:	2d00      	cmp	r5, #0
 800027a:	bf06      	itte	eq
 800027c:	4635      	moveq	r5, r6
 800027e:	3803      	subeq	r0, #3
 8000280:	3807      	subne	r0, #7
 8000282:	f015 0f01 	tst.w	r5, #1
 8000286:	d107      	bne.n	8000298 <memchr+0x98>
 8000288:	3001      	adds	r0, #1
 800028a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800028e:	bf02      	ittt	eq
 8000290:	3001      	addeq	r0, #1
 8000292:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000296:	3001      	addeq	r0, #1
 8000298:	bcf0      	pop	{r4, r5, r6, r7}
 800029a:	3801      	subs	r0, #1
 800029c:	4770      	bx	lr
 800029e:	bf00      	nop

080002a0 <__aeabi_uldivmod>:
 80002a0:	b953      	cbnz	r3, 80002b8 <__aeabi_uldivmod+0x18>
 80002a2:	b94a      	cbnz	r2, 80002b8 <__aeabi_uldivmod+0x18>
 80002a4:	2900      	cmp	r1, #0
 80002a6:	bf08      	it	eq
 80002a8:	2800      	cmpeq	r0, #0
 80002aa:	bf1c      	itt	ne
 80002ac:	f04f 31ff 	movne.w	r1, #4294967295
 80002b0:	f04f 30ff 	movne.w	r0, #4294967295
 80002b4:	f000 b96e 	b.w	8000594 <__aeabi_idiv0>
 80002b8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002bc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002c0:	f000 f806 	bl	80002d0 <__udivmoddi4>
 80002c4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002c8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002cc:	b004      	add	sp, #16
 80002ce:	4770      	bx	lr

080002d0 <__udivmoddi4>:
 80002d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002d4:	9d08      	ldr	r5, [sp, #32]
 80002d6:	4604      	mov	r4, r0
 80002d8:	468c      	mov	ip, r1
 80002da:	2b00      	cmp	r3, #0
 80002dc:	f040 8083 	bne.w	80003e6 <__udivmoddi4+0x116>
 80002e0:	428a      	cmp	r2, r1
 80002e2:	4617      	mov	r7, r2
 80002e4:	d947      	bls.n	8000376 <__udivmoddi4+0xa6>
 80002e6:	fab2 f282 	clz	r2, r2
 80002ea:	b142      	cbz	r2, 80002fe <__udivmoddi4+0x2e>
 80002ec:	f1c2 0020 	rsb	r0, r2, #32
 80002f0:	fa24 f000 	lsr.w	r0, r4, r0
 80002f4:	4091      	lsls	r1, r2
 80002f6:	4097      	lsls	r7, r2
 80002f8:	ea40 0c01 	orr.w	ip, r0, r1
 80002fc:	4094      	lsls	r4, r2
 80002fe:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000302:	0c23      	lsrs	r3, r4, #16
 8000304:	fbbc f6f8 	udiv	r6, ip, r8
 8000308:	fa1f fe87 	uxth.w	lr, r7
 800030c:	fb08 c116 	mls	r1, r8, r6, ip
 8000310:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000314:	fb06 f10e 	mul.w	r1, r6, lr
 8000318:	4299      	cmp	r1, r3
 800031a:	d909      	bls.n	8000330 <__udivmoddi4+0x60>
 800031c:	18fb      	adds	r3, r7, r3
 800031e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000322:	f080 8119 	bcs.w	8000558 <__udivmoddi4+0x288>
 8000326:	4299      	cmp	r1, r3
 8000328:	f240 8116 	bls.w	8000558 <__udivmoddi4+0x288>
 800032c:	3e02      	subs	r6, #2
 800032e:	443b      	add	r3, r7
 8000330:	1a5b      	subs	r3, r3, r1
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb3 f0f8 	udiv	r0, r3, r8
 8000338:	fb08 3310 	mls	r3, r8, r0, r3
 800033c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000340:	fb00 fe0e 	mul.w	lr, r0, lr
 8000344:	45a6      	cmp	lr, r4
 8000346:	d909      	bls.n	800035c <__udivmoddi4+0x8c>
 8000348:	193c      	adds	r4, r7, r4
 800034a:	f100 33ff 	add.w	r3, r0, #4294967295
 800034e:	f080 8105 	bcs.w	800055c <__udivmoddi4+0x28c>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f240 8102 	bls.w	800055c <__udivmoddi4+0x28c>
 8000358:	3802      	subs	r0, #2
 800035a:	443c      	add	r4, r7
 800035c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000360:	eba4 040e 	sub.w	r4, r4, lr
 8000364:	2600      	movs	r6, #0
 8000366:	b11d      	cbz	r5, 8000370 <__udivmoddi4+0xa0>
 8000368:	40d4      	lsrs	r4, r2
 800036a:	2300      	movs	r3, #0
 800036c:	e9c5 4300 	strd	r4, r3, [r5]
 8000370:	4631      	mov	r1, r6
 8000372:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000376:	b902      	cbnz	r2, 800037a <__udivmoddi4+0xaa>
 8000378:	deff      	udf	#255	; 0xff
 800037a:	fab2 f282 	clz	r2, r2
 800037e:	2a00      	cmp	r2, #0
 8000380:	d150      	bne.n	8000424 <__udivmoddi4+0x154>
 8000382:	1bcb      	subs	r3, r1, r7
 8000384:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000388:	fa1f f887 	uxth.w	r8, r7
 800038c:	2601      	movs	r6, #1
 800038e:	fbb3 fcfe 	udiv	ip, r3, lr
 8000392:	0c21      	lsrs	r1, r4, #16
 8000394:	fb0e 331c 	mls	r3, lr, ip, r3
 8000398:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800039c:	fb08 f30c 	mul.w	r3, r8, ip
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d907      	bls.n	80003b4 <__udivmoddi4+0xe4>
 80003a4:	1879      	adds	r1, r7, r1
 80003a6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003aa:	d202      	bcs.n	80003b2 <__udivmoddi4+0xe2>
 80003ac:	428b      	cmp	r3, r1
 80003ae:	f200 80e9 	bhi.w	8000584 <__udivmoddi4+0x2b4>
 80003b2:	4684      	mov	ip, r0
 80003b4:	1ac9      	subs	r1, r1, r3
 80003b6:	b2a3      	uxth	r3, r4
 80003b8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003bc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003c0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003c4:	fb08 f800 	mul.w	r8, r8, r0
 80003c8:	45a0      	cmp	r8, r4
 80003ca:	d907      	bls.n	80003dc <__udivmoddi4+0x10c>
 80003cc:	193c      	adds	r4, r7, r4
 80003ce:	f100 33ff 	add.w	r3, r0, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x10a>
 80003d4:	45a0      	cmp	r8, r4
 80003d6:	f200 80d9 	bhi.w	800058c <__udivmoddi4+0x2bc>
 80003da:	4618      	mov	r0, r3
 80003dc:	eba4 0408 	sub.w	r4, r4, r8
 80003e0:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 80003e4:	e7bf      	b.n	8000366 <__udivmoddi4+0x96>
 80003e6:	428b      	cmp	r3, r1
 80003e8:	d909      	bls.n	80003fe <__udivmoddi4+0x12e>
 80003ea:	2d00      	cmp	r5, #0
 80003ec:	f000 80b1 	beq.w	8000552 <__udivmoddi4+0x282>
 80003f0:	2600      	movs	r6, #0
 80003f2:	e9c5 0100 	strd	r0, r1, [r5]
 80003f6:	4630      	mov	r0, r6
 80003f8:	4631      	mov	r1, r6
 80003fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003fe:	fab3 f683 	clz	r6, r3
 8000402:	2e00      	cmp	r6, #0
 8000404:	d14a      	bne.n	800049c <__udivmoddi4+0x1cc>
 8000406:	428b      	cmp	r3, r1
 8000408:	d302      	bcc.n	8000410 <__udivmoddi4+0x140>
 800040a:	4282      	cmp	r2, r0
 800040c:	f200 80b8 	bhi.w	8000580 <__udivmoddi4+0x2b0>
 8000410:	1a84      	subs	r4, r0, r2
 8000412:	eb61 0103 	sbc.w	r1, r1, r3
 8000416:	2001      	movs	r0, #1
 8000418:	468c      	mov	ip, r1
 800041a:	2d00      	cmp	r5, #0
 800041c:	d0a8      	beq.n	8000370 <__udivmoddi4+0xa0>
 800041e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000422:	e7a5      	b.n	8000370 <__udivmoddi4+0xa0>
 8000424:	f1c2 0320 	rsb	r3, r2, #32
 8000428:	fa20 f603 	lsr.w	r6, r0, r3
 800042c:	4097      	lsls	r7, r2
 800042e:	fa01 f002 	lsl.w	r0, r1, r2
 8000432:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000436:	40d9      	lsrs	r1, r3
 8000438:	4330      	orrs	r0, r6
 800043a:	0c03      	lsrs	r3, r0, #16
 800043c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000440:	fa1f f887 	uxth.w	r8, r7
 8000444:	fb0e 1116 	mls	r1, lr, r6, r1
 8000448:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800044c:	fb06 f108 	mul.w	r1, r6, r8
 8000450:	4299      	cmp	r1, r3
 8000452:	fa04 f402 	lsl.w	r4, r4, r2
 8000456:	d909      	bls.n	800046c <__udivmoddi4+0x19c>
 8000458:	18fb      	adds	r3, r7, r3
 800045a:	f106 3cff 	add.w	ip, r6, #4294967295
 800045e:	f080 808d 	bcs.w	800057c <__udivmoddi4+0x2ac>
 8000462:	4299      	cmp	r1, r3
 8000464:	f240 808a 	bls.w	800057c <__udivmoddi4+0x2ac>
 8000468:	3e02      	subs	r6, #2
 800046a:	443b      	add	r3, r7
 800046c:	1a5b      	subs	r3, r3, r1
 800046e:	b281      	uxth	r1, r0
 8000470:	fbb3 f0fe 	udiv	r0, r3, lr
 8000474:	fb0e 3310 	mls	r3, lr, r0, r3
 8000478:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800047c:	fb00 f308 	mul.w	r3, r0, r8
 8000480:	428b      	cmp	r3, r1
 8000482:	d907      	bls.n	8000494 <__udivmoddi4+0x1c4>
 8000484:	1879      	adds	r1, r7, r1
 8000486:	f100 3cff 	add.w	ip, r0, #4294967295
 800048a:	d273      	bcs.n	8000574 <__udivmoddi4+0x2a4>
 800048c:	428b      	cmp	r3, r1
 800048e:	d971      	bls.n	8000574 <__udivmoddi4+0x2a4>
 8000490:	3802      	subs	r0, #2
 8000492:	4439      	add	r1, r7
 8000494:	1acb      	subs	r3, r1, r3
 8000496:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 800049a:	e778      	b.n	800038e <__udivmoddi4+0xbe>
 800049c:	f1c6 0c20 	rsb	ip, r6, #32
 80004a0:	fa03 f406 	lsl.w	r4, r3, r6
 80004a4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004a8:	431c      	orrs	r4, r3
 80004aa:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ae:	fa01 f306 	lsl.w	r3, r1, r6
 80004b2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004b6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004ba:	431f      	orrs	r7, r3
 80004bc:	0c3b      	lsrs	r3, r7, #16
 80004be:	fbb1 f9fe 	udiv	r9, r1, lr
 80004c2:	fa1f f884 	uxth.w	r8, r4
 80004c6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ca:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ce:	fb09 fa08 	mul.w	sl, r9, r8
 80004d2:	458a      	cmp	sl, r1
 80004d4:	fa02 f206 	lsl.w	r2, r2, r6
 80004d8:	fa00 f306 	lsl.w	r3, r0, r6
 80004dc:	d908      	bls.n	80004f0 <__udivmoddi4+0x220>
 80004de:	1861      	adds	r1, r4, r1
 80004e0:	f109 30ff 	add.w	r0, r9, #4294967295
 80004e4:	d248      	bcs.n	8000578 <__udivmoddi4+0x2a8>
 80004e6:	458a      	cmp	sl, r1
 80004e8:	d946      	bls.n	8000578 <__udivmoddi4+0x2a8>
 80004ea:	f1a9 0902 	sub.w	r9, r9, #2
 80004ee:	4421      	add	r1, r4
 80004f0:	eba1 010a 	sub.w	r1, r1, sl
 80004f4:	b2bf      	uxth	r7, r7
 80004f6:	fbb1 f0fe 	udiv	r0, r1, lr
 80004fa:	fb0e 1110 	mls	r1, lr, r0, r1
 80004fe:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000502:	fb00 f808 	mul.w	r8, r0, r8
 8000506:	45b8      	cmp	r8, r7
 8000508:	d907      	bls.n	800051a <__udivmoddi4+0x24a>
 800050a:	19e7      	adds	r7, r4, r7
 800050c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000510:	d22e      	bcs.n	8000570 <__udivmoddi4+0x2a0>
 8000512:	45b8      	cmp	r8, r7
 8000514:	d92c      	bls.n	8000570 <__udivmoddi4+0x2a0>
 8000516:	3802      	subs	r0, #2
 8000518:	4427      	add	r7, r4
 800051a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800051e:	eba7 0708 	sub.w	r7, r7, r8
 8000522:	fba0 8902 	umull	r8, r9, r0, r2
 8000526:	454f      	cmp	r7, r9
 8000528:	46c6      	mov	lr, r8
 800052a:	4649      	mov	r1, r9
 800052c:	d31a      	bcc.n	8000564 <__udivmoddi4+0x294>
 800052e:	d017      	beq.n	8000560 <__udivmoddi4+0x290>
 8000530:	b15d      	cbz	r5, 800054a <__udivmoddi4+0x27a>
 8000532:	ebb3 020e 	subs.w	r2, r3, lr
 8000536:	eb67 0701 	sbc.w	r7, r7, r1
 800053a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800053e:	40f2      	lsrs	r2, r6
 8000540:	ea4c 0202 	orr.w	r2, ip, r2
 8000544:	40f7      	lsrs	r7, r6
 8000546:	e9c5 2700 	strd	r2, r7, [r5]
 800054a:	2600      	movs	r6, #0
 800054c:	4631      	mov	r1, r6
 800054e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000552:	462e      	mov	r6, r5
 8000554:	4628      	mov	r0, r5
 8000556:	e70b      	b.n	8000370 <__udivmoddi4+0xa0>
 8000558:	4606      	mov	r6, r0
 800055a:	e6e9      	b.n	8000330 <__udivmoddi4+0x60>
 800055c:	4618      	mov	r0, r3
 800055e:	e6fd      	b.n	800035c <__udivmoddi4+0x8c>
 8000560:	4543      	cmp	r3, r8
 8000562:	d2e5      	bcs.n	8000530 <__udivmoddi4+0x260>
 8000564:	ebb8 0e02 	subs.w	lr, r8, r2
 8000568:	eb69 0104 	sbc.w	r1, r9, r4
 800056c:	3801      	subs	r0, #1
 800056e:	e7df      	b.n	8000530 <__udivmoddi4+0x260>
 8000570:	4608      	mov	r0, r1
 8000572:	e7d2      	b.n	800051a <__udivmoddi4+0x24a>
 8000574:	4660      	mov	r0, ip
 8000576:	e78d      	b.n	8000494 <__udivmoddi4+0x1c4>
 8000578:	4681      	mov	r9, r0
 800057a:	e7b9      	b.n	80004f0 <__udivmoddi4+0x220>
 800057c:	4666      	mov	r6, ip
 800057e:	e775      	b.n	800046c <__udivmoddi4+0x19c>
 8000580:	4630      	mov	r0, r6
 8000582:	e74a      	b.n	800041a <__udivmoddi4+0x14a>
 8000584:	f1ac 0c02 	sub.w	ip, ip, #2
 8000588:	4439      	add	r1, r7
 800058a:	e713      	b.n	80003b4 <__udivmoddi4+0xe4>
 800058c:	3802      	subs	r0, #2
 800058e:	443c      	add	r4, r7
 8000590:	e724      	b.n	80003dc <__udivmoddi4+0x10c>
 8000592:	bf00      	nop

08000594 <__aeabi_idiv0>:
 8000594:	4770      	bx	lr
 8000596:	bf00      	nop

08000598 <ESP_Init>:




void ESP_Init (char *SSID, char *PASSWD)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b098      	sub	sp, #96	; 0x60
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
 80005a0:	6039      	str	r1, [r7, #0]
   char data[80];

   Ringbuf_init();
 80005a2:	f000 f907 	bl	80007b4 <Ringbuf_init>

   Uart_sendstring("AT+RST\r\n", wifi_uart);
 80005a6:	4965      	ldr	r1, [pc, #404]	; (800073c <ESP_Init+0x1a4>)
 80005a8:	4865      	ldr	r0, [pc, #404]	; (8000740 <ESP_Init+0x1a8>)
 80005aa:	f000 faf3 	bl	8000b94 <Uart_sendstring>
   Uart_sendstring("RESETTING.", pc_uart);
 80005ae:	4965      	ldr	r1, [pc, #404]	; (8000744 <ESP_Init+0x1ac>)
 80005b0:	4865      	ldr	r0, [pc, #404]	; (8000748 <ESP_Init+0x1b0>)
 80005b2:	f000 faef 	bl	8000b94 <Uart_sendstring>
   for (int i=0; i<5; i++)
 80005b6:	2300      	movs	r3, #0
 80005b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005ba:	e00a      	b.n	80005d2 <ESP_Init+0x3a>
   {
      Uart_sendstring(".", pc_uart);
 80005bc:	4961      	ldr	r1, [pc, #388]	; (8000744 <ESP_Init+0x1ac>)
 80005be:	4863      	ldr	r0, [pc, #396]	; (800074c <ESP_Init+0x1b4>)
 80005c0:	f000 fae8 	bl	8000b94 <Uart_sendstring>
      HAL_Delay(1000);
 80005c4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005c8:	f001 fa3e 	bl	8001a48 <HAL_Delay>
   for (int i=0; i<5; i++)
 80005cc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005ce:	3301      	adds	r3, #1
 80005d0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005d4:	2b04      	cmp	r3, #4
 80005d6:	ddf1      	ble.n	80005bc <ESP_Init+0x24>
   }

   /********* AT **********/
   Uart_sendstring("AT\r\n", wifi_uart);
 80005d8:	4958      	ldr	r1, [pc, #352]	; (800073c <ESP_Init+0x1a4>)
 80005da:	485d      	ldr	r0, [pc, #372]	; (8000750 <ESP_Init+0x1b8>)
 80005dc:	f000 fada 	bl	8000b94 <Uart_sendstring>
   while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 80005e0:	bf00      	nop
 80005e2:	4956      	ldr	r1, [pc, #344]	; (800073c <ESP_Init+0x1a4>)
 80005e4:	485b      	ldr	r0, [pc, #364]	; (8000754 <ESP_Init+0x1bc>)
 80005e6:	f000 fb6b 	bl	8000cc0 <Wait_for>
 80005ea:	4603      	mov	r3, r0
 80005ec:	2b00      	cmp	r3, #0
 80005ee:	d0f8      	beq.n	80005e2 <ESP_Init+0x4a>
   Uart_sendstring("AT---->OK\n\n", pc_uart);
 80005f0:	4954      	ldr	r1, [pc, #336]	; (8000744 <ESP_Init+0x1ac>)
 80005f2:	4859      	ldr	r0, [pc, #356]	; (8000758 <ESP_Init+0x1c0>)
 80005f4:	f000 face 	bl	8000b94 <Uart_sendstring>


   /********* AT+CWMODE=1 **********/
   Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 80005f8:	4950      	ldr	r1, [pc, #320]	; (800073c <ESP_Init+0x1a4>)
 80005fa:	4858      	ldr	r0, [pc, #352]	; (800075c <ESP_Init+0x1c4>)
 80005fc:	f000 faca 	bl	8000b94 <Uart_sendstring>
   while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wifi_uart)));
 8000600:	bf00      	nop
 8000602:	494e      	ldr	r1, [pc, #312]	; (800073c <ESP_Init+0x1a4>)
 8000604:	4856      	ldr	r0, [pc, #344]	; (8000760 <ESP_Init+0x1c8>)
 8000606:	f000 fb5b 	bl	8000cc0 <Wait_for>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0f8      	beq.n	8000602 <ESP_Init+0x6a>
   Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 8000610:	494c      	ldr	r1, [pc, #304]	; (8000744 <ESP_Init+0x1ac>)
 8000612:	4854      	ldr	r0, [pc, #336]	; (8000764 <ESP_Init+0x1cc>)
 8000614:	f000 fabe 	bl	8000b94 <Uart_sendstring>



   /********* static ip***********/
   Uart_sendstring("AT+CIPSTA_CUR=\"192.168.0.224\",\"255.255.255.0\",\"192.168.0.1\"\r\n",wifi_uart);
 8000618:	4948      	ldr	r1, [pc, #288]	; (800073c <ESP_Init+0x1a4>)
 800061a:	4853      	ldr	r0, [pc, #332]	; (8000768 <ESP_Init+0x1d0>)
 800061c:	f000 faba 	bl	8000b94 <Uart_sendstring>
   while (!(Wait_for("AT+CIPSTA_CUR=\"192.168.0.224\",\"255.255.255.0\",\"192.168.0.1\"\r\r\n\r\nOK\r\n", wifi_uart)));
 8000620:	bf00      	nop
 8000622:	4946      	ldr	r1, [pc, #280]	; (800073c <ESP_Init+0x1a4>)
 8000624:	4851      	ldr	r0, [pc, #324]	; (800076c <ESP_Init+0x1d4>)
 8000626:	f000 fb4b 	bl	8000cc0 <Wait_for>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0f8      	beq.n	8000622 <ESP_Init+0x8a>
   Uart_sendstring("Static ip OK\r\n\n", pc_uart);
 8000630:	4944      	ldr	r1, [pc, #272]	; (8000744 <ESP_Init+0x1ac>)
 8000632:	484f      	ldr	r0, [pc, #316]	; (8000770 <ESP_Init+0x1d8>)
 8000634:	f000 faae 	bl	8000b94 <Uart_sendstring>

   /********* AT+CWJAP="SSID","PASSWD" **********/
   Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 8000638:	4942      	ldr	r1, [pc, #264]	; (8000744 <ESP_Init+0x1ac>)
 800063a:	484e      	ldr	r0, [pc, #312]	; (8000774 <ESP_Init+0x1dc>)
 800063c:	f000 faaa 	bl	8000b94 <Uart_sendstring>
   sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000640:	f107 0008 	add.w	r0, r7, #8
 8000644:	683b      	ldr	r3, [r7, #0]
 8000646:	687a      	ldr	r2, [r7, #4]
 8000648:	494b      	ldr	r1, [pc, #300]	; (8000778 <ESP_Init+0x1e0>)
 800064a:	f003 fc8b 	bl	8003f64 <siprintf>
   Uart_sendstring(data, wifi_uart);
 800064e:	f107 0308 	add.w	r3, r7, #8
 8000652:	493a      	ldr	r1, [pc, #232]	; (800073c <ESP_Init+0x1a4>)
 8000654:	4618      	mov	r0, r3
 8000656:	f000 fa9d 	bl	8000b94 <Uart_sendstring>
   while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", wifi_uart)));
 800065a:	bf00      	nop
 800065c:	4937      	ldr	r1, [pc, #220]	; (800073c <ESP_Init+0x1a4>)
 800065e:	4847      	ldr	r0, [pc, #284]	; (800077c <ESP_Init+0x1e4>)
 8000660:	f000 fb2e 	bl	8000cc0 <Wait_for>
 8000664:	4603      	mov	r3, r0
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0f8      	beq.n	800065c <ESP_Init+0xc4>
   sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 800066a:	f107 0308 	add.w	r3, r7, #8
 800066e:	687a      	ldr	r2, [r7, #4]
 8000670:	4943      	ldr	r1, [pc, #268]	; (8000780 <ESP_Init+0x1e8>)
 8000672:	4618      	mov	r0, r3
 8000674:	f003 fc76 	bl	8003f64 <siprintf>
   Uart_sendstring(data,pc_uart);
 8000678:	f107 0308 	add.w	r3, r7, #8
 800067c:	4931      	ldr	r1, [pc, #196]	; (8000744 <ESP_Init+0x1ac>)
 800067e:	4618      	mov	r0, r3
 8000680:	f000 fa88 	bl	8000b94 <Uart_sendstring>



   /********* AT+CIFSR **********/
   Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 8000684:	492d      	ldr	r1, [pc, #180]	; (800073c <ESP_Init+0x1a4>)
 8000686:	483f      	ldr	r0, [pc, #252]	; (8000784 <ESP_Init+0x1ec>)
 8000688:	f000 fa84 	bl	8000b94 <Uart_sendstring>
   while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 800068c:	bf00      	nop
 800068e:	492b      	ldr	r1, [pc, #172]	; (800073c <ESP_Init+0x1a4>)
 8000690:	483d      	ldr	r0, [pc, #244]	; (8000788 <ESP_Init+0x1f0>)
 8000692:	f000 fb15 	bl	8000cc0 <Wait_for>
 8000696:	4603      	mov	r3, r0
 8000698:	2b00      	cmp	r3, #0
 800069a:	d0f8      	beq.n	800068e <ESP_Init+0xf6>
   while (!(Copy_upto("\"",buffer, wifi_uart)));
 800069c:	bf00      	nop
 800069e:	4a27      	ldr	r2, [pc, #156]	; (800073c <ESP_Init+0x1a4>)
 80006a0:	493a      	ldr	r1, [pc, #232]	; (800078c <ESP_Init+0x1f4>)
 80006a2:	483b      	ldr	r0, [pc, #236]	; (8000790 <ESP_Init+0x1f8>)
 80006a4:	f000 fa8e 	bl	8000bc4 <Copy_upto>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d0f7      	beq.n	800069e <ESP_Init+0x106>
   while (!(Wait_for("OK\r\n", wifi_uart)));
 80006ae:	bf00      	nop
 80006b0:	4922      	ldr	r1, [pc, #136]	; (800073c <ESP_Init+0x1a4>)
 80006b2:	4838      	ldr	r0, [pc, #224]	; (8000794 <ESP_Init+0x1fc>)
 80006b4:	f000 fb04 	bl	8000cc0 <Wait_for>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d0f8      	beq.n	80006b0 <ESP_Init+0x118>
   int len = strlen (buffer);
 80006be:	4833      	ldr	r0, [pc, #204]	; (800078c <ESP_Init+0x1f4>)
 80006c0:	f7ff fd96 	bl	80001f0 <strlen>
 80006c4:	4603      	mov	r3, r0
 80006c6:	65bb      	str	r3, [r7, #88]	; 0x58
   buffer[len-1] = '\0';
 80006c8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006ca:	3b01      	subs	r3, #1
 80006cc:	4a2f      	ldr	r2, [pc, #188]	; (800078c <ESP_Init+0x1f4>)
 80006ce:	2100      	movs	r1, #0
 80006d0:	54d1      	strb	r1, [r2, r3]
   sprintf (data, "IP ADDR: %s\n\n", buffer);
 80006d2:	f107 0308 	add.w	r3, r7, #8
 80006d6:	4a2d      	ldr	r2, [pc, #180]	; (800078c <ESP_Init+0x1f4>)
 80006d8:	492f      	ldr	r1, [pc, #188]	; (8000798 <ESP_Init+0x200>)
 80006da:	4618      	mov	r0, r3
 80006dc:	f003 fc42 	bl	8003f64 <siprintf>
   Uart_sendstring(data, pc_uart);
 80006e0:	f107 0308 	add.w	r3, r7, #8
 80006e4:	4917      	ldr	r1, [pc, #92]	; (8000744 <ESP_Init+0x1ac>)
 80006e6:	4618      	mov	r0, r3
 80006e8:	f000 fa54 	bl	8000b94 <Uart_sendstring>


   Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 80006ec:	4913      	ldr	r1, [pc, #76]	; (800073c <ESP_Init+0x1a4>)
 80006ee:	482b      	ldr	r0, [pc, #172]	; (800079c <ESP_Init+0x204>)
 80006f0:	f000 fa50 	bl	8000b94 <Uart_sendstring>
   while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wifi_uart)));
 80006f4:	bf00      	nop
 80006f6:	4911      	ldr	r1, [pc, #68]	; (800073c <ESP_Init+0x1a4>)
 80006f8:	4829      	ldr	r0, [pc, #164]	; (80007a0 <ESP_Init+0x208>)
 80006fa:	f000 fae1 	bl	8000cc0 <Wait_for>
 80006fe:	4603      	mov	r3, r0
 8000700:	2b00      	cmp	r3, #0
 8000702:	d0f8      	beq.n	80006f6 <ESP_Init+0x15e>
   Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 8000704:	490f      	ldr	r1, [pc, #60]	; (8000744 <ESP_Init+0x1ac>)
 8000706:	4827      	ldr	r0, [pc, #156]	; (80007a4 <ESP_Init+0x20c>)
 8000708:	f000 fa44 	bl	8000b94 <Uart_sendstring>

   Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 800070c:	490b      	ldr	r1, [pc, #44]	; (800073c <ESP_Init+0x1a4>)
 800070e:	4826      	ldr	r0, [pc, #152]	; (80007a8 <ESP_Init+0x210>)
 8000710:	f000 fa40 	bl	8000b94 <Uart_sendstring>
   while (!(Wait_for("OK\r\n", wifi_uart)));
 8000714:	bf00      	nop
 8000716:	4909      	ldr	r1, [pc, #36]	; (800073c <ESP_Init+0x1a4>)
 8000718:	481e      	ldr	r0, [pc, #120]	; (8000794 <ESP_Init+0x1fc>)
 800071a:	f000 fad1 	bl	8000cc0 <Wait_for>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f8      	beq.n	8000716 <ESP_Init+0x17e>
   Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 8000724:	4907      	ldr	r1, [pc, #28]	; (8000744 <ESP_Init+0x1ac>)
 8000726:	4821      	ldr	r0, [pc, #132]	; (80007ac <ESP_Init+0x214>)
 8000728:	f000 fa34 	bl	8000b94 <Uart_sendstring>

   Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 800072c:	4905      	ldr	r1, [pc, #20]	; (8000744 <ESP_Init+0x1ac>)
 800072e:	4820      	ldr	r0, [pc, #128]	; (80007b0 <ESP_Init+0x218>)
 8000730:	f000 fa30 	bl	8000b94 <Uart_sendstring>
}
 8000734:	bf00      	nop
 8000736:	3760      	adds	r7, #96	; 0x60
 8000738:	46bd      	mov	sp, r7
 800073a:	bd80      	pop	{r7, pc}
 800073c:	20000974 	.word	0x20000974
 8000740:	080047d8 	.word	0x080047d8
 8000744:	200008e8 	.word	0x200008e8
 8000748:	080047e4 	.word	0x080047e4
 800074c:	080047f0 	.word	0x080047f0
 8000750:	080047f4 	.word	0x080047f4
 8000754:	080047fc 	.word	0x080047fc
 8000758:	08004808 	.word	0x08004808
 800075c:	08004814 	.word	0x08004814
 8000760:	08004824 	.word	0x08004824
 8000764:	0800483c 	.word	0x0800483c
 8000768:	0800484c 	.word	0x0800484c
 800076c:	0800488c 	.word	0x0800488c
 8000770:	080048d4 	.word	0x080048d4
 8000774:	080048e4 	.word	0x080048e4
 8000778:	08004908 	.word	0x08004908
 800077c:	08004920 	.word	0x08004920
 8000780:	08004934 	.word	0x08004934
 8000784:	08004948 	.word	0x08004948
 8000788:	08004954 	.word	0x08004954
 800078c:	200008c4 	.word	0x200008c4
 8000790:	08004964 	.word	0x08004964
 8000794:	08004968 	.word	0x08004968
 8000798:	08004970 	.word	0x08004970
 800079c:	08004980 	.word	0x08004980
 80007a0:	08004990 	.word	0x08004990
 80007a4:	080049a8 	.word	0x080049a8
 80007a8:	080049b8 	.word	0x080049b8
 80007ac:	080049cc 	.word	0x080049cc
 80007b0:	080049e0 	.word	0x080049e0

080007b4 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 80007b8:	4b18      	ldr	r3, [pc, #96]	; (800081c <Ringbuf_init+0x68>)
 80007ba:	4a19      	ldr	r2, [pc, #100]	; (8000820 <Ringbuf_init+0x6c>)
 80007bc:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 80007be:	4b19      	ldr	r3, [pc, #100]	; (8000824 <Ringbuf_init+0x70>)
 80007c0:	4a19      	ldr	r2, [pc, #100]	; (8000828 <Ringbuf_init+0x74>)
 80007c2:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 80007c4:	4b19      	ldr	r3, [pc, #100]	; (800082c <Ringbuf_init+0x78>)
 80007c6:	4a1a      	ldr	r2, [pc, #104]	; (8000830 <Ringbuf_init+0x7c>)
 80007c8:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 80007ca:	4b1a      	ldr	r3, [pc, #104]	; (8000834 <Ringbuf_init+0x80>)
 80007cc:	4a1a      	ldr	r2, [pc, #104]	; (8000838 <Ringbuf_init+0x84>)
 80007ce:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 80007d0:	4b1a      	ldr	r3, [pc, #104]	; (800083c <Ringbuf_init+0x88>)
 80007d2:	681b      	ldr	r3, [r3, #0]
 80007d4:	695a      	ldr	r2, [r3, #20]
 80007d6:	4b19      	ldr	r3, [pc, #100]	; (800083c <Ringbuf_init+0x88>)
 80007d8:	681b      	ldr	r3, [r3, #0]
 80007da:	f042 0201 	orr.w	r2, r2, #1
 80007de:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 80007e0:	4b17      	ldr	r3, [pc, #92]	; (8000840 <Ringbuf_init+0x8c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	695a      	ldr	r2, [r3, #20]
 80007e6:	4b16      	ldr	r3, [pc, #88]	; (8000840 <Ringbuf_init+0x8c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f042 0201 	orr.w	r2, r2, #1
 80007ee:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 80007f0:	4b12      	ldr	r3, [pc, #72]	; (800083c <Ringbuf_init+0x88>)
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	68da      	ldr	r2, [r3, #12]
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <Ringbuf_init+0x88>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f042 0220 	orr.w	r2, r2, #32
 80007fe:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 8000800:	4b0f      	ldr	r3, [pc, #60]	; (8000840 <Ringbuf_init+0x8c>)
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	68da      	ldr	r2, [r3, #12]
 8000806:	4b0e      	ldr	r3, [pc, #56]	; (8000840 <Ringbuf_init+0x8c>)
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f042 0220 	orr.w	r2, r2, #32
 800080e:	60da      	str	r2, [r3, #12]
}
 8000810:	bf00      	nop
 8000812:	46bd      	mov	sp, r7
 8000814:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000818:	4770      	bx	lr
 800081a:	bf00      	nop
 800081c:	200008dc 	.word	0x200008dc
 8000820:	20000090 	.word	0x20000090
 8000824:	200008e0 	.word	0x200008e0
 8000828:	20000298 	.word	0x20000298
 800082c:	200008e4 	.word	0x200008e4
 8000830:	200004a0 	.word	0x200004a0
 8000834:	200008d8 	.word	0x200008d8
 8000838:	200006a8 	.word	0x200006a8
 800083c:	20000974 	.word	0x20000974
 8000840:	200008e8 	.word	0x200008e8

08000844 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 8000844:	b480      	push	{r7}
 8000846:	b085      	sub	sp, #20
 8000848:	af00      	add	r7, sp, #0
 800084a:	4603      	mov	r3, r0
 800084c:	6039      	str	r1, [r7, #0]
 800084e:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8000850:	683b      	ldr	r3, [r7, #0]
 8000852:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000856:	3301      	adds	r3, #1
 8000858:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800085c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800085e:	683b      	ldr	r3, [r7, #0]
 8000860:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000864:	68fb      	ldr	r3, [r7, #12]
 8000866:	429a      	cmp	r2, r3
 8000868:	d009      	beq.n	800087e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 800086a:	683b      	ldr	r3, [r7, #0]
 800086c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000870:	683a      	ldr	r2, [r7, #0]
 8000872:	79f9      	ldrb	r1, [r7, #7]
 8000874:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	683b      	ldr	r3, [r7, #0]
 800087a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800087e:	bf00      	nop
 8000880:	3714      	adds	r7, #20
 8000882:	46bd      	mov	sp, r7
 8000884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000888:	4770      	bx	lr
	...

0800088c <Uart_flush>:
	}
}


void Uart_flush (UART_HandleTypeDef *uart)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b082      	sub	sp, #8
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000894:	687b      	ldr	r3, [r7, #4]
 8000896:	4a12      	ldr	r2, [pc, #72]	; (80008e0 <Uart_flush+0x54>)
 8000898:	4293      	cmp	r3, r2
 800089a:	d10c      	bne.n	80008b6 <Uart_flush+0x2a>
	{
		memset(_rx_buffer1->buffer,'\0', UART_BUFFER_SIZE);
 800089c:	4b11      	ldr	r3, [pc, #68]	; (80008e4 <Uart_flush+0x58>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008a4:	2100      	movs	r1, #0
 80008a6:	4618      	mov	r0, r3
 80008a8:	f003 fb54 	bl	8003f54 <memset>
		_rx_buffer1->head = 0;
 80008ac:	4b0d      	ldr	r3, [pc, #52]	; (80008e4 <Uart_flush+0x58>)
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	2200      	movs	r2, #0
 80008b2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	if (uart == pc_uart)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	4a0b      	ldr	r2, [pc, #44]	; (80008e8 <Uart_flush+0x5c>)
 80008ba:	4293      	cmp	r3, r2
 80008bc:	d10c      	bne.n	80008d8 <Uart_flush+0x4c>
	{
		memset(_rx_buffer2->buffer,'\0', UART_BUFFER_SIZE);
 80008be:	4b0b      	ldr	r3, [pc, #44]	; (80008ec <Uart_flush+0x60>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	f44f 7200 	mov.w	r2, #512	; 0x200
 80008c6:	2100      	movs	r1, #0
 80008c8:	4618      	mov	r0, r3
 80008ca:	f003 fb43 	bl	8003f54 <memset>
		_rx_buffer2->head = 0;
 80008ce:	4b07      	ldr	r3, [pc, #28]	; (80008ec <Uart_flush+0x60>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	2200      	movs	r2, #0
 80008d4:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 80008d8:	bf00      	nop
 80008da:	3708      	adds	r7, #8
 80008dc:	46bd      	mov	sp, r7
 80008de:	bd80      	pop	{r7, pc}
 80008e0:	20000974 	.word	0x20000974
 80008e4:	200008dc 	.word	0x200008dc
 80008e8:	200008e8 	.word	0x200008e8
 80008ec:	200008e4 	.word	0x200008e4

080008f0 <Uart_peek>:


int Uart_peek(UART_HandleTypeDef *uart)
{
 80008f0:	b480      	push	{r7}
 80008f2:	b083      	sub	sp, #12
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	4a1c      	ldr	r2, [pc, #112]	; (800096c <Uart_peek+0x7c>)
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d114      	bne.n	800092a <Uart_peek+0x3a>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8000900:	4b1b      	ldr	r3, [pc, #108]	; (8000970 <Uart_peek+0x80>)
 8000902:	681b      	ldr	r3, [r3, #0]
 8000904:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000908:	4b19      	ldr	r3, [pc, #100]	; (8000970 <Uart_peek+0x80>)
 800090a:	681b      	ldr	r3, [r3, #0]
 800090c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000910:	429a      	cmp	r2, r3
 8000912:	d102      	bne.n	800091a <Uart_peek+0x2a>
		  {
		    return -1;
 8000914:	f04f 33ff 	mov.w	r3, #4294967295
 8000918:	e022      	b.n	8000960 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 800091a:	4b15      	ldr	r3, [pc, #84]	; (8000970 <Uart_peek+0x80>)
 800091c:	681a      	ldr	r2, [r3, #0]
 800091e:	4b14      	ldr	r3, [pc, #80]	; (8000970 <Uart_peek+0x80>)
 8000920:	681b      	ldr	r3, [r3, #0]
 8000922:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000926:	5cd3      	ldrb	r3, [r2, r3]
 8000928:	e01a      	b.n	8000960 <Uart_peek+0x70>
		  }
	}

	else if (uart == pc_uart)
 800092a:	687b      	ldr	r3, [r7, #4]
 800092c:	4a11      	ldr	r2, [pc, #68]	; (8000974 <Uart_peek+0x84>)
 800092e:	4293      	cmp	r3, r2
 8000930:	d114      	bne.n	800095c <Uart_peek+0x6c>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8000932:	4b11      	ldr	r3, [pc, #68]	; (8000978 <Uart_peek+0x88>)
 8000934:	681b      	ldr	r3, [r3, #0]
 8000936:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800093a:	4b0f      	ldr	r3, [pc, #60]	; (8000978 <Uart_peek+0x88>)
 800093c:	681b      	ldr	r3, [r3, #0]
 800093e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000942:	429a      	cmp	r2, r3
 8000944:	d102      	bne.n	800094c <Uart_peek+0x5c>
		  {
		    return -1;
 8000946:	f04f 33ff 	mov.w	r3, #4294967295
 800094a:	e009      	b.n	8000960 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 800094c:	4b0a      	ldr	r3, [pc, #40]	; (8000978 <Uart_peek+0x88>)
 800094e:	681a      	ldr	r2, [r3, #0]
 8000950:	4b09      	ldr	r3, [pc, #36]	; (8000978 <Uart_peek+0x88>)
 8000952:	681b      	ldr	r3, [r3, #0]
 8000954:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000958:	5cd3      	ldrb	r3, [r2, r3]
 800095a:	e001      	b.n	8000960 <Uart_peek+0x70>
		  }
	}

	return -1;
 800095c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000960:	4618      	mov	r0, r3
 8000962:	370c      	adds	r7, #12
 8000964:	46bd      	mov	sp, r7
 8000966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800096a:	4770      	bx	lr
 800096c:	20000974 	.word	0x20000974
 8000970:	200008dc 	.word	0x200008dc
 8000974:	200008e8 	.word	0x200008e8
 8000978:	200008e4 	.word	0x200008e4

0800097c <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 800097c:	b480      	push	{r7}
 800097e:	b085      	sub	sp, #20
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	4a29      	ldr	r2, [pc, #164]	; (8000a2c <Uart_read+0xb0>)
 8000988:	4293      	cmp	r3, r2
 800098a:	d121      	bne.n	80009d0 <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 800098c:	4b28      	ldr	r3, [pc, #160]	; (8000a30 <Uart_read+0xb4>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000994:	4b26      	ldr	r3, [pc, #152]	; (8000a30 <Uart_read+0xb4>)
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800099c:	429a      	cmp	r2, r3
 800099e:	d102      	bne.n	80009a6 <Uart_read+0x2a>
		  {
		    return -1;
 80009a0:	f04f 33ff 	mov.w	r3, #4294967295
 80009a4:	e03c      	b.n	8000a20 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 80009a6:	4b22      	ldr	r3, [pc, #136]	; (8000a30 <Uart_read+0xb4>)
 80009a8:	681a      	ldr	r2, [r3, #0]
 80009aa:	4b21      	ldr	r3, [pc, #132]	; (8000a30 <Uart_read+0xb4>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009b2:	5cd3      	ldrb	r3, [r2, r3]
 80009b4:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80009b6:	4b1e      	ldr	r3, [pc, #120]	; (8000a30 <Uart_read+0xb4>)
 80009b8:	681b      	ldr	r3, [r3, #0]
 80009ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009be:	1c5a      	adds	r2, r3, #1
 80009c0:	4b1b      	ldr	r3, [pc, #108]	; (8000a30 <Uart_read+0xb4>)
 80009c2:	681b      	ldr	r3, [r3, #0]
 80009c4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80009c8:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 80009cc:	7bbb      	ldrb	r3, [r7, #14]
 80009ce:	e027      	b.n	8000a20 <Uart_read+0xa4>
		  }
	}

	else if (uart == pc_uart)
 80009d0:	687b      	ldr	r3, [r7, #4]
 80009d2:	4a18      	ldr	r2, [pc, #96]	; (8000a34 <Uart_read+0xb8>)
 80009d4:	4293      	cmp	r3, r2
 80009d6:	d121      	bne.n	8000a1c <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 80009d8:	4b17      	ldr	r3, [pc, #92]	; (8000a38 <Uart_read+0xbc>)
 80009da:	681b      	ldr	r3, [r3, #0]
 80009dc:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80009e0:	4b15      	ldr	r3, [pc, #84]	; (8000a38 <Uart_read+0xbc>)
 80009e2:	681b      	ldr	r3, [r3, #0]
 80009e4:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009e8:	429a      	cmp	r2, r3
 80009ea:	d102      	bne.n	80009f2 <Uart_read+0x76>
		  {
		    return -1;
 80009ec:	f04f 33ff 	mov.w	r3, #4294967295
 80009f0:	e016      	b.n	8000a20 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <Uart_read+0xbc>)
 80009f4:	681a      	ldr	r2, [r3, #0]
 80009f6:	4b10      	ldr	r3, [pc, #64]	; (8000a38 <Uart_read+0xbc>)
 80009f8:	681b      	ldr	r3, [r3, #0]
 80009fa:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80009fe:	5cd3      	ldrb	r3, [r2, r3]
 8000a00:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8000a02:	4b0d      	ldr	r3, [pc, #52]	; (8000a38 <Uart_read+0xbc>)
 8000a04:	681b      	ldr	r3, [r3, #0]
 8000a06:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000a0a:	1c5a      	adds	r2, r3, #1
 8000a0c:	4b0a      	ldr	r3, [pc, #40]	; (8000a38 <Uart_read+0xbc>)
 8000a0e:	681b      	ldr	r3, [r3, #0]
 8000a10:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000a14:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8000a18:	7bfb      	ldrb	r3, [r7, #15]
 8000a1a:	e001      	b.n	8000a20 <Uart_read+0xa4>
		  }
	}

	else return -1;
 8000a1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a20:	4618      	mov	r0, r3
 8000a22:	3714      	adds	r7, #20
 8000a24:	46bd      	mov	sp, r7
 8000a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a2a:	4770      	bx	lr
 8000a2c:	20000974 	.word	0x20000974
 8000a30:	200008dc 	.word	0x200008dc
 8000a34:	200008e8 	.word	0x200008e8
 8000a38:	200008e4 	.word	0x200008e4

08000a3c <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8000a3c:	b480      	push	{r7}
 8000a3e:	b085      	sub	sp, #20
 8000a40:	af00      	add	r7, sp, #0
 8000a42:	6078      	str	r0, [r7, #4]
 8000a44:	6039      	str	r1, [r7, #0]
	if (c>=0)
 8000a46:	687b      	ldr	r3, [r7, #4]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	db54      	blt.n	8000af6 <Uart_write+0xba>
	{
		if (uart == device_uart){
 8000a4c:	683b      	ldr	r3, [r7, #0]
 8000a4e:	4a2d      	ldr	r2, [pc, #180]	; (8000b04 <Uart_write+0xc8>)
 8000a50:	4293      	cmp	r3, r2
 8000a52:	d126      	bne.n	8000aa2 <Uart_write+0x66>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 8000a54:	4b2c      	ldr	r3, [pc, #176]	; (8000b08 <Uart_write+0xcc>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a5c:	3301      	adds	r3, #1
 8000a5e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000a62:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 8000a64:	bf00      	nop
 8000a66:	4b28      	ldr	r3, [pc, #160]	; (8000b08 <Uart_write+0xcc>)
 8000a68:	681b      	ldr	r3, [r3, #0]
 8000a6a:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000a6e:	68bb      	ldr	r3, [r7, #8]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d0f8      	beq.n	8000a66 <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 8000a74:	4b24      	ldr	r3, [pc, #144]	; (8000b08 <Uart_write+0xcc>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b23      	ldr	r3, [pc, #140]	; (8000b08 <Uart_write+0xcc>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000a80:	6879      	ldr	r1, [r7, #4]
 8000a82:	b2c9      	uxtb	r1, r1
 8000a84:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 8000a86:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <Uart_write+0xcc>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	68ba      	ldr	r2, [r7, #8]
 8000a8c:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000a90:	4b1c      	ldr	r3, [pc, #112]	; (8000b04 <Uart_write+0xc8>)
 8000a92:	681b      	ldr	r3, [r3, #0]
 8000a94:	68da      	ldr	r2, [r3, #12]
 8000a96:	4b1b      	ldr	r3, [pc, #108]	; (8000b04 <Uart_write+0xc8>)
 8000a98:	681b      	ldr	r3, [r3, #0]
 8000a9a:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000a9e:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 8000aa0:	e029      	b.n	8000af6 <Uart_write+0xba>
		else if (uart == pc_uart){
 8000aa2:	683b      	ldr	r3, [r7, #0]
 8000aa4:	4a19      	ldr	r2, [pc, #100]	; (8000b0c <Uart_write+0xd0>)
 8000aa6:	4293      	cmp	r3, r2
 8000aa8:	d125      	bne.n	8000af6 <Uart_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 8000aaa:	4b19      	ldr	r3, [pc, #100]	; (8000b10 <Uart_write+0xd4>)
 8000aac:	681b      	ldr	r3, [r3, #0]
 8000aae:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ab2:	3301      	adds	r3, #1
 8000ab4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000ab8:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 8000aba:	bf00      	nop
 8000abc:	4b14      	ldr	r3, [pc, #80]	; (8000b10 <Uart_write+0xd4>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000ac4:	68fb      	ldr	r3, [r7, #12]
 8000ac6:	429a      	cmp	r2, r3
 8000ac8:	d0f8      	beq.n	8000abc <Uart_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 8000aca:	4b11      	ldr	r3, [pc, #68]	; (8000b10 <Uart_write+0xd4>)
 8000acc:	681a      	ldr	r2, [r3, #0]
 8000ace:	4b10      	ldr	r3, [pc, #64]	; (8000b10 <Uart_write+0xd4>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000ad6:	6879      	ldr	r1, [r7, #4]
 8000ad8:	b2c9      	uxtb	r1, r1
 8000ada:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8000adc:	4b0c      	ldr	r3, [pc, #48]	; (8000b10 <Uart_write+0xd4>)
 8000ade:	681b      	ldr	r3, [r3, #0]
 8000ae0:	68fa      	ldr	r2, [r7, #12]
 8000ae2:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <Uart_write+0xd0>)
 8000ae8:	681b      	ldr	r3, [r3, #0]
 8000aea:	68da      	ldr	r2, [r3, #12]
 8000aec:	4b07      	ldr	r3, [pc, #28]	; (8000b0c <Uart_write+0xd0>)
 8000aee:	681b      	ldr	r3, [r3, #0]
 8000af0:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8000af4:	60da      	str	r2, [r3, #12]
}
 8000af6:	bf00      	nop
 8000af8:	3714      	adds	r7, #20
 8000afa:	46bd      	mov	sp, r7
 8000afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop
 8000b04:	20000974 	.word	0x20000974
 8000b08:	200008e0 	.word	0x200008e0
 8000b0c:	200008e8 	.word	0x200008e8
 8000b10:	200008d8 	.word	0x200008d8

08000b14 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8000b14:	b480      	push	{r7}
 8000b16:	b083      	sub	sp, #12
 8000b18:	af00      	add	r7, sp, #0
 8000b1a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	4a19      	ldr	r2, [pc, #100]	; (8000b84 <IsDataAvailable+0x70>)
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d111      	bne.n	8000b48 <IsDataAvailable+0x34>
 8000b24:	4b18      	ldr	r3, [pc, #96]	; (8000b88 <IsDataAvailable+0x74>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b2c:	b29a      	uxth	r2, r3
 8000b2e:	4b16      	ldr	r3, [pc, #88]	; (8000b88 <IsDataAvailable+0x74>)
 8000b30:	681b      	ldr	r3, [r3, #0]
 8000b32:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000b36:	b29b      	uxth	r3, r3
 8000b38:	1ad3      	subs	r3, r2, r3
 8000b3a:	b29b      	uxth	r3, r3
 8000b3c:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b40:	b29b      	uxth	r3, r3
 8000b42:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b46:	e017      	b.n	8000b78 <IsDataAvailable+0x64>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 8000b48:	687b      	ldr	r3, [r7, #4]
 8000b4a:	4a10      	ldr	r2, [pc, #64]	; (8000b8c <IsDataAvailable+0x78>)
 8000b4c:	4293      	cmp	r3, r2
 8000b4e:	d111      	bne.n	8000b74 <IsDataAvailable+0x60>
 8000b50:	4b0f      	ldr	r3, [pc, #60]	; (8000b90 <IsDataAvailable+0x7c>)
 8000b52:	681b      	ldr	r3, [r3, #0]
 8000b54:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8000b58:	b29a      	uxth	r2, r3
 8000b5a:	4b0d      	ldr	r3, [pc, #52]	; (8000b90 <IsDataAvailable+0x7c>)
 8000b5c:	681b      	ldr	r3, [r3, #0]
 8000b5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000b62:	b29b      	uxth	r3, r3
 8000b64:	1ad3      	subs	r3, r2, r3
 8000b66:	b29b      	uxth	r3, r3
 8000b68:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8000b6c:	b29b      	uxth	r3, r3
 8000b6e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000b72:	e001      	b.n	8000b78 <IsDataAvailable+0x64>
	return -1;
 8000b74:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b78:	4618      	mov	r0, r3
 8000b7a:	370c      	adds	r7, #12
 8000b7c:	46bd      	mov	sp, r7
 8000b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b82:	4770      	bx	lr
 8000b84:	20000974 	.word	0x20000974
 8000b88:	200008dc 	.word	0x200008dc
 8000b8c:	200008e8 	.word	0x200008e8
 8000b90:	200008e4 	.word	0x200008e4

08000b94 <Uart_sendstring>:
	}
	return 1;
}

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b082      	sub	sp, #8
 8000b98:	af00      	add	r7, sp, #0
 8000b9a:	6078      	str	r0, [r7, #4]
 8000b9c:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8000b9e:	e007      	b.n	8000bb0 <Uart_sendstring+0x1c>
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	1c5a      	adds	r2, r3, #1
 8000ba4:	607a      	str	r2, [r7, #4]
 8000ba6:	781b      	ldrb	r3, [r3, #0]
 8000ba8:	6839      	ldr	r1, [r7, #0]
 8000baa:	4618      	mov	r0, r3
 8000bac:	f7ff ff46 	bl	8000a3c <Uart_write>
 8000bb0:	687b      	ldr	r3, [r7, #4]
 8000bb2:	781b      	ldrb	r3, [r3, #0]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d1f3      	bne.n	8000ba0 <Uart_sendstring+0xc>
}
 8000bb8:	bf00      	nop
 8000bba:	bf00      	nop
 8000bbc:	3708      	adds	r7, #8
 8000bbe:	46bd      	mov	sp, r7
 8000bc0:	bd80      	pop	{r7, pc}
	...

08000bc4 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b088      	sub	sp, #32
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	60f8      	str	r0, [r7, #12]
 8000bcc:	60b9      	str	r1, [r7, #8]
 8000bce:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8000bd4:	68f8      	ldr	r0, [r7, #12]
 8000bd6:	f7ff fb0b 	bl	80001f0 <strlen>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	617b      	str	r3, [r7, #20]
	int indx = 0;
 8000bde:	2300      	movs	r3, #0
 8000be0:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8000be2:	bf00      	nop
 8000be4:	6878      	ldr	r0, [r7, #4]
 8000be6:	f7ff ff95 	bl	8000b14 <IsDataAvailable>
 8000bea:	4603      	mov	r3, r0
 8000bec:	2b00      	cmp	r3, #0
 8000bee:	d0f9      	beq.n	8000be4 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 8000bf0:	e01f      	b.n	8000c32 <Copy_upto+0x6e>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 8000bf2:	4b32      	ldr	r3, [pc, #200]	; (8000cbc <Copy_upto+0xf8>)
 8000bf4:	6819      	ldr	r1, [r3, #0]
 8000bf6:	4b31      	ldr	r3, [pc, #196]	; (8000cbc <Copy_upto+0xf8>)
 8000bf8:	681b      	ldr	r3, [r3, #0]
 8000bfa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8000bfe:	69bb      	ldr	r3, [r7, #24]
 8000c00:	68b8      	ldr	r0, [r7, #8]
 8000c02:	4403      	add	r3, r0
 8000c04:	5c8a      	ldrb	r2, [r1, r2]
 8000c06:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 8000c08:	4b2c      	ldr	r3, [pc, #176]	; (8000cbc <Copy_upto+0xf8>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000c10:	1c5a      	adds	r2, r3, #1
 8000c12:	4b2a      	ldr	r3, [pc, #168]	; (8000cbc <Copy_upto+0xf8>)
 8000c14:	681b      	ldr	r3, [r3, #0]
 8000c16:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000c1a:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 8000c1e:	69bb      	ldr	r3, [r7, #24]
 8000c20:	3301      	adds	r3, #1
 8000c22:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 8000c24:	bf00      	nop
 8000c26:	6878      	ldr	r0, [r7, #4]
 8000c28:	f7ff ff74 	bl	8000b14 <IsDataAvailable>
 8000c2c:	4603      	mov	r3, r0
 8000c2e:	2b00      	cmp	r3, #0
 8000c30:	d0f9      	beq.n	8000c26 <Copy_upto+0x62>
	while (Uart_peek(uart) != string[so_far])
 8000c32:	6878      	ldr	r0, [r7, #4]
 8000c34:	f7ff fe5c 	bl	80008f0 <Uart_peek>
 8000c38:	4601      	mov	r1, r0
 8000c3a:	69fb      	ldr	r3, [r7, #28]
 8000c3c:	68fa      	ldr	r2, [r7, #12]
 8000c3e:	4413      	add	r3, r2
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	4299      	cmp	r1, r3
 8000c44:	d1d5      	bne.n	8000bf2 <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 8000c46:	e01b      	b.n	8000c80 <Copy_upto+0xbc>
	{
		so_far++;
 8000c48:	69fb      	ldr	r3, [r7, #28]
 8000c4a:	3301      	adds	r3, #1
 8000c4c:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 8000c4e:	6878      	ldr	r0, [r7, #4]
 8000c50:	f7ff fe94 	bl	800097c <Uart_read>
 8000c54:	4601      	mov	r1, r0
 8000c56:	69bb      	ldr	r3, [r7, #24]
 8000c58:	1c5a      	adds	r2, r3, #1
 8000c5a:	61ba      	str	r2, [r7, #24]
 8000c5c:	461a      	mov	r2, r3
 8000c5e:	68bb      	ldr	r3, [r7, #8]
 8000c60:	4413      	add	r3, r2
 8000c62:	b2ca      	uxtb	r2, r1
 8000c64:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8000c66:	69fa      	ldr	r2, [r7, #28]
 8000c68:	697b      	ldr	r3, [r7, #20]
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d101      	bne.n	8000c72 <Copy_upto+0xae>
 8000c6e:	2301      	movs	r3, #1
 8000c70:	e01f      	b.n	8000cb2 <Copy_upto+0xee>
		while (!IsDataAvailable(uart));
 8000c72:	bf00      	nop
 8000c74:	6878      	ldr	r0, [r7, #4]
 8000c76:	f7ff ff4d 	bl	8000b14 <IsDataAvailable>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d0f9      	beq.n	8000c74 <Copy_upto+0xb0>
	while (Uart_peek(uart) == string [so_far])
 8000c80:	6878      	ldr	r0, [r7, #4]
 8000c82:	f7ff fe35 	bl	80008f0 <Uart_peek>
 8000c86:	4601      	mov	r1, r0
 8000c88:	69fb      	ldr	r3, [r7, #28]
 8000c8a:	68fa      	ldr	r2, [r7, #12]
 8000c8c:	4413      	add	r3, r2
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	4299      	cmp	r1, r3
 8000c92:	d0d9      	beq.n	8000c48 <Copy_upto+0x84>
	}

	if (so_far != len)
 8000c94:	69fa      	ldr	r2, [r7, #28]
 8000c96:	697b      	ldr	r3, [r7, #20]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d002      	beq.n	8000ca2 <Copy_upto+0xde>
	{
		so_far = 0;
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	61fb      	str	r3, [r7, #28]
		goto again;
 8000ca0:	e79f      	b.n	8000be2 <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 8000ca2:	69fa      	ldr	r2, [r7, #28]
 8000ca4:	697b      	ldr	r3, [r7, #20]
 8000ca6:	429a      	cmp	r2, r3
 8000ca8:	d101      	bne.n	8000cae <Copy_upto+0xea>
 8000caa:	2301      	movs	r3, #1
 8000cac:	e001      	b.n	8000cb2 <Copy_upto+0xee>
	else return -1;
 8000cae:	f04f 33ff 	mov.w	r3, #4294967295

}
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	3720      	adds	r7, #32
 8000cb6:	46bd      	mov	sp, r7
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	200008dc 	.word	0x200008dc

08000cc0 <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b084      	sub	sp, #16
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
 8000cc8:	6039      	str	r1, [r7, #0]
	int so_far =0;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 8000cce:	6878      	ldr	r0, [r7, #4]
 8000cd0:	f7ff fa8e 	bl	80001f0 <strlen>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 8000cd8:	bf00      	nop
 8000cda:	6838      	ldr	r0, [r7, #0]
 8000cdc:	f7ff ff1a 	bl	8000b14 <IsDataAvailable>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d0f9      	beq.n	8000cda <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 8000ce6:	6838      	ldr	r0, [r7, #0]
 8000ce8:	f7ff fe02 	bl	80008f0 <Uart_peek>
 8000cec:	4601      	mov	r1, r0
 8000cee:	68fb      	ldr	r3, [r7, #12]
 8000cf0:	687a      	ldr	r2, [r7, #4]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	4299      	cmp	r1, r3
 8000cf8:	d01e      	beq.n	8000d38 <Wait_for+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 8000cfa:	4b1e      	ldr	r3, [pc, #120]	; (8000d74 <Wait_for+0xb4>)
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000d02:	1c5a      	adds	r2, r3, #1
 8000d04:	4b1b      	ldr	r3, [pc, #108]	; (8000d74 <Wait_for+0xb4>)
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8000d0c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 8000d10:	e7e2      	b.n	8000cd8 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 8000d12:	68fb      	ldr	r3, [r7, #12]
 8000d14:	3301      	adds	r3, #1
 8000d16:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 8000d18:	6838      	ldr	r0, [r7, #0]
 8000d1a:	f7ff fe2f 	bl	800097c <Uart_read>
		if (so_far == len) return 1;
 8000d1e:	68fa      	ldr	r2, [r7, #12]
 8000d20:	68bb      	ldr	r3, [r7, #8]
 8000d22:	429a      	cmp	r2, r3
 8000d24:	d101      	bne.n	8000d2a <Wait_for+0x6a>
 8000d26:	2301      	movs	r3, #1
 8000d28:	e01f      	b.n	8000d6a <Wait_for+0xaa>
		while (!IsDataAvailable(uart));
 8000d2a:	bf00      	nop
 8000d2c:	6838      	ldr	r0, [r7, #0]
 8000d2e:	f7ff fef1 	bl	8000b14 <IsDataAvailable>
 8000d32:	4603      	mov	r3, r0
 8000d34:	2b00      	cmp	r3, #0
 8000d36:	d0f9      	beq.n	8000d2c <Wait_for+0x6c>
	while (Uart_peek(uart) == string [so_far])
 8000d38:	6838      	ldr	r0, [r7, #0]
 8000d3a:	f7ff fdd9 	bl	80008f0 <Uart_peek>
 8000d3e:	4601      	mov	r1, r0
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	687a      	ldr	r2, [r7, #4]
 8000d44:	4413      	add	r3, r2
 8000d46:	781b      	ldrb	r3, [r3, #0]
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	d0e2      	beq.n	8000d12 <Wait_for+0x52>
	}

	if (so_far != len)
 8000d4c:	68fa      	ldr	r2, [r7, #12]
 8000d4e:	68bb      	ldr	r3, [r7, #8]
 8000d50:	429a      	cmp	r2, r3
 8000d52:	d002      	beq.n	8000d5a <Wait_for+0x9a>
	{
		so_far = 0;
 8000d54:	2300      	movs	r3, #0
 8000d56:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8000d58:	e7be      	b.n	8000cd8 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 8000d5a:	68fa      	ldr	r2, [r7, #12]
 8000d5c:	68bb      	ldr	r3, [r7, #8]
 8000d5e:	429a      	cmp	r2, r3
 8000d60:	d101      	bne.n	8000d66 <Wait_for+0xa6>
 8000d62:	2301      	movs	r3, #1
 8000d64:	e001      	b.n	8000d6a <Wait_for+0xaa>
	else return -1;
 8000d66:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d6a:	4618      	mov	r0, r3
 8000d6c:	3710      	adds	r7, #16
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}
 8000d72:	bf00      	nop
 8000d74:	200008dc 	.word	0x200008dc

08000d78 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8000d78:	b580      	push	{r7, lr}
 8000d7a:	b086      	sub	sp, #24
 8000d7c:	af00      	add	r7, sp, #0
 8000d7e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	681b      	ldr	r3, [r3, #0]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	681b      	ldr	r3, [r3, #0]
 8000d8c:	68db      	ldr	r3, [r3, #12]
 8000d8e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8000d90:	697b      	ldr	r3, [r7, #20]
 8000d92:	f003 0320 	and.w	r3, r3, #32
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d023      	beq.n	8000de2 <Uart_isr+0x6a>
 8000d9a:	693b      	ldr	r3, [r7, #16]
 8000d9c:	f003 0320 	and.w	r3, r3, #32
 8000da0:	2b00      	cmp	r3, #0
 8000da2:	d01e      	beq.n	8000de2 <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8000da4:	687b      	ldr	r3, [r7, #4]
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	685b      	ldr	r3, [r3, #4]
 8000db0:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8000db2:	687b      	ldr	r3, [r7, #4]
 8000db4:	4a3f      	ldr	r2, [pc, #252]	; (8000eb4 <Uart_isr+0x13c>)
 8000db6:	4293      	cmp	r3, r2
 8000db8:	d107      	bne.n	8000dca <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 8000dba:	4b3f      	ldr	r3, [pc, #252]	; (8000eb8 <Uart_isr+0x140>)
 8000dbc:	681a      	ldr	r2, [r3, #0]
 8000dbe:	7bfb      	ldrb	r3, [r7, #15]
 8000dc0:	4611      	mov	r1, r2
 8000dc2:	4618      	mov	r0, r3
 8000dc4:	f7ff fd3e 	bl	8000844 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8000dc8:	e06d      	b.n	8000ea6 <Uart_isr+0x12e>
        else if (huart == pc_uart)
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	4a3b      	ldr	r2, [pc, #236]	; (8000ebc <Uart_isr+0x144>)
 8000dce:	4293      	cmp	r3, r2
 8000dd0:	d169      	bne.n	8000ea6 <Uart_isr+0x12e>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8000dd2:	4b3b      	ldr	r3, [pc, #236]	; (8000ec0 <Uart_isr+0x148>)
 8000dd4:	681a      	ldr	r2, [r3, #0]
 8000dd6:	7bfb      	ldrb	r3, [r7, #15]
 8000dd8:	4611      	mov	r1, r2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f7ff fd32 	bl	8000844 <store_char>
        return;
 8000de0:	e061      	b.n	8000ea6 <Uart_isr+0x12e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8000de2:	697b      	ldr	r3, [r7, #20]
 8000de4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d05f      	beq.n	8000eac <Uart_isr+0x134>
 8000dec:	693b      	ldr	r3, [r7, #16]
 8000dee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d05a      	beq.n	8000eac <Uart_isr+0x134>
    {
    	if (huart == device_uart){
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	4a2e      	ldr	r2, [pc, #184]	; (8000eb4 <Uart_isr+0x13c>)
 8000dfa:	4293      	cmp	r3, r2
 8000dfc:	d127      	bne.n	8000e4e <Uart_isr+0xd6>
    	if(tx_buffer1.head == tx_buffer1.tail)
 8000dfe:	4b31      	ldr	r3, [pc, #196]	; (8000ec4 <Uart_isr+0x14c>)
 8000e00:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e04:	4b2f      	ldr	r3, [pc, #188]	; (8000ec4 <Uart_isr+0x14c>)
 8000e06:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e0a:	429a      	cmp	r2, r3
 8000e0c:	d108      	bne.n	8000e20 <Uart_isr+0xa8>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	681b      	ldr	r3, [r3, #0]
 8000e12:	68da      	ldr	r2, [r3, #12]
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	681b      	ldr	r3, [r3, #0]
 8000e18:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e1c:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 8000e1e:	e044      	b.n	8000eaa <Uart_isr+0x132>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 8000e20:	4b28      	ldr	r3, [pc, #160]	; (8000ec4 <Uart_isr+0x14c>)
 8000e22:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e26:	4a27      	ldr	r2, [pc, #156]	; (8000ec4 <Uart_isr+0x14c>)
 8000e28:	5cd3      	ldrb	r3, [r2, r3]
 8000e2a:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 8000e2c:	4b25      	ldr	r3, [pc, #148]	; (8000ec4 <Uart_isr+0x14c>)
 8000e2e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e32:	3301      	adds	r3, #1
 8000e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e38:	4a22      	ldr	r2, [pc, #136]	; (8000ec4 <Uart_isr+0x14c>)
 8000e3a:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	681b      	ldr	r3, [r3, #0]
 8000e48:	7b7a      	ldrb	r2, [r7, #13]
 8000e4a:	605a      	str	r2, [r3, #4]
    	return;
 8000e4c:	e02d      	b.n	8000eaa <Uart_isr+0x132>
    	else if (huart == pc_uart){
 8000e4e:	687b      	ldr	r3, [r7, #4]
 8000e50:	4a1a      	ldr	r2, [pc, #104]	; (8000ebc <Uart_isr+0x144>)
 8000e52:	4293      	cmp	r3, r2
 8000e54:	d129      	bne.n	8000eaa <Uart_isr+0x132>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8000e56:	4b1c      	ldr	r3, [pc, #112]	; (8000ec8 <Uart_isr+0x150>)
 8000e58:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8000e5c:	4b1a      	ldr	r3, [pc, #104]	; (8000ec8 <Uart_isr+0x150>)
 8000e5e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e62:	429a      	cmp	r2, r3
 8000e64:	d108      	bne.n	8000e78 <Uart_isr+0x100>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	681b      	ldr	r3, [r3, #0]
 8000e6a:	68da      	ldr	r2, [r3, #12]
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000e74:	60da      	str	r2, [r3, #12]
    	return;
 8000e76:	e018      	b.n	8000eaa <Uart_isr+0x132>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8000e78:	4b13      	ldr	r3, [pc, #76]	; (8000ec8 <Uart_isr+0x150>)
 8000e7a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e7e:	4a12      	ldr	r2, [pc, #72]	; (8000ec8 <Uart_isr+0x150>)
 8000e80:	5cd3      	ldrb	r3, [r2, r3]
 8000e82:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8000e84:	4b10      	ldr	r3, [pc, #64]	; (8000ec8 <Uart_isr+0x150>)
 8000e86:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8000e8a:	3301      	adds	r3, #1
 8000e8c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8000e90:	4a0d      	ldr	r2, [pc, #52]	; (8000ec8 <Uart_isr+0x150>)
 8000e92:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 8000e96:	687b      	ldr	r3, [r7, #4]
 8000e98:	681b      	ldr	r3, [r3, #0]
 8000e9a:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	681b      	ldr	r3, [r3, #0]
 8000ea0:	7bba      	ldrb	r2, [r7, #14]
 8000ea2:	605a      	str	r2, [r3, #4]
    	return;
 8000ea4:	e001      	b.n	8000eaa <Uart_isr+0x132>
        return;
 8000ea6:	bf00      	nop
 8000ea8:	e000      	b.n	8000eac <Uart_isr+0x134>
    	return;
 8000eaa:	bf00      	nop
    }
}
 8000eac:	3718      	adds	r7, #24
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	20000974 	.word	0x20000974
 8000eb8:	200008dc 	.word	0x200008dc
 8000ebc:	200008e8 	.word	0x200008e8
 8000ec0:	200008e4 	.word	0x200008e4
 8000ec4:	20000298 	.word	0x20000298
 8000ec8:	200006a8 	.word	0x200006a8

08000ecc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ecc:	b580      	push	{r7, lr}
 8000ece:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ed0:	f000 fd48 	bl	8001964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ed4:	f000 f868 	bl	8000fa8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ed8:	f000 f99a 	bl	8001210 <MX_GPIO_Init>
  MX_TIM3_Init();
 8000edc:	f000 f8ce 	bl	800107c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000ee0:	f000 f96c 	bl	80011bc <MX_USART3_UART_Init>
  MX_USART2_UART_Init();
 8000ee4:	f000 f940 	bl	8001168 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  ESP_Init("CIR_Wireless","cir123456!");
 8000ee8:	4928      	ldr	r1, [pc, #160]	; (8000f8c <main+0xc0>)
 8000eea:	4829      	ldr	r0, [pc, #164]	; (8000f90 <main+0xc4>)
 8000eec:	f7ff fb54 	bl	8000598 <ESP_Init>


    while (1)
    {

    	if(Elevator_Floor==2)
 8000ef0:	4b28      	ldr	r3, [pc, #160]	; (8000f94 <main+0xc8>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b02      	cmp	r3, #2
 8000ef6:	d121      	bne.n	8000f3c <main+0x70>
    	{
			if((Wait_for("11111", wifi_uart)))
 8000ef8:	4927      	ldr	r1, [pc, #156]	; (8000f98 <main+0xcc>)
 8000efa:	4828      	ldr	r0, [pc, #160]	; (8000f9c <main+0xd0>)
 8000efc:	f7ff fee0 	bl	8000cc0 <Wait_for>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d015      	beq.n	8000f32 <main+0x66>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7,1);
 8000f06:	2201      	movs	r2, #1
 8000f08:	2181      	movs	r1, #129	; 0x81
 8000f0a:	4825      	ldr	r0, [pc, #148]	; (8000fa0 <main+0xd4>)
 8000f0c:	f001 f87e 	bl	800200c <HAL_GPIO_WritePin>
				LM_Guide_move(0);
 8000f10:	2000      	movs	r0, #0
 8000f12:	f000 fa2d 	bl	8001370 <LM_Guide_move>


				Uart_flush (wifi_uart);
 8000f16:	4820      	ldr	r0, [pc, #128]	; (8000f98 <main+0xcc>)
 8000f18:	f7ff fcb8 	bl	800088c <Uart_flush>

				Elevator(1);
 8000f1c:	2001      	movs	r0, #1
 8000f1e:	f000 faaf 	bl	8001480 <Elevator>
				Elevator_Floor=1;
 8000f22:	4b1c      	ldr	r3, [pc, #112]	; (8000f94 <main+0xc8>)
 8000f24:	2201      	movs	r2, #1
 8000f26:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7,0);
 8000f28:	2200      	movs	r2, #0
 8000f2a:	2181      	movs	r1, #129	; 0x81
 8000f2c:	481c      	ldr	r0, [pc, #112]	; (8000fa0 <main+0xd4>)
 8000f2e:	f001 f86d 	bl	800200c <HAL_GPIO_WritePin>
			}
			HAL_Delay(500);
 8000f32:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f36:	f000 fd87 	bl	8001a48 <HAL_Delay>
 8000f3a:	e7d9      	b.n	8000ef0 <main+0x24>
    	}
    	else if(Elevator_Floor==1)
 8000f3c:	4b15      	ldr	r3, [pc, #84]	; (8000f94 <main+0xc8>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b01      	cmp	r3, #1
 8000f42:	d1d5      	bne.n	8000ef0 <main+0x24>
    	{
			if((Wait_for("22222", wifi_uart)))
 8000f44:	4914      	ldr	r1, [pc, #80]	; (8000f98 <main+0xcc>)
 8000f46:	4817      	ldr	r0, [pc, #92]	; (8000fa4 <main+0xd8>)
 8000f48:	f7ff feba 	bl	8000cc0 <Wait_for>
 8000f4c:	4603      	mov	r3, r0
 8000f4e:	2b00      	cmp	r3, #0
 8000f50:	d016      	beq.n	8000f80 <main+0xb4>
			{
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7,1);
 8000f52:	2201      	movs	r2, #1
 8000f54:	2181      	movs	r1, #129	; 0x81
 8000f56:	4812      	ldr	r0, [pc, #72]	; (8000fa0 <main+0xd4>)
 8000f58:	f001 f858 	bl	800200c <HAL_GPIO_WritePin>
				LM_Guide_move(320);
 8000f5c:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8000f60:	f000 fa06 	bl	8001370 <LM_Guide_move>


				Uart_flush (wifi_uart);
 8000f64:	480c      	ldr	r0, [pc, #48]	; (8000f98 <main+0xcc>)
 8000f66:	f7ff fc91 	bl	800088c <Uart_flush>

				Elevator(2);
 8000f6a:	2002      	movs	r0, #2
 8000f6c:	f000 fa88 	bl	8001480 <Elevator>
				Elevator_Floor=2;
 8000f70:	4b08      	ldr	r3, [pc, #32]	; (8000f94 <main+0xc8>)
 8000f72:	2202      	movs	r2, #2
 8000f74:	701a      	strb	r2, [r3, #0]
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7,0);
 8000f76:	2200      	movs	r2, #0
 8000f78:	2181      	movs	r1, #129	; 0x81
 8000f7a:	4809      	ldr	r0, [pc, #36]	; (8000fa0 <main+0xd4>)
 8000f7c:	f001 f846 	bl	800200c <HAL_GPIO_WritePin>
			}
			HAL_Delay(500);
 8000f80:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8000f84:	f000 fd60 	bl	8001a48 <HAL_Delay>
    	if(Elevator_Floor==2)
 8000f88:	e7b2      	b.n	8000ef0 <main+0x24>
 8000f8a:	bf00      	nop
 8000f8c:	08004a00 	.word	0x08004a00
 8000f90:	08004a0c 	.word	0x08004a0c
 8000f94:	20000000 	.word	0x20000000
 8000f98:	20000974 	.word	0x20000974
 8000f9c:	08004a1c 	.word	0x08004a1c
 8000fa0:	40020400 	.word	0x40020400
 8000fa4:	08004a24 	.word	0x08004a24

08000fa8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fa8:	b580      	push	{r7, lr}
 8000faa:	b094      	sub	sp, #80	; 0x50
 8000fac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fae:	f107 0320 	add.w	r3, r7, #32
 8000fb2:	2230      	movs	r2, #48	; 0x30
 8000fb4:	2100      	movs	r1, #0
 8000fb6:	4618      	mov	r0, r3
 8000fb8:	f002 ffcc 	bl	8003f54 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fbc:	f107 030c 	add.w	r3, r7, #12
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	601a      	str	r2, [r3, #0]
 8000fc4:	605a      	str	r2, [r3, #4]
 8000fc6:	609a      	str	r2, [r3, #8]
 8000fc8:	60da      	str	r2, [r3, #12]
 8000fca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fcc:	2300      	movs	r3, #0
 8000fce:	60bb      	str	r3, [r7, #8]
 8000fd0:	4b28      	ldr	r3, [pc, #160]	; (8001074 <SystemClock_Config+0xcc>)
 8000fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fd4:	4a27      	ldr	r2, [pc, #156]	; (8001074 <SystemClock_Config+0xcc>)
 8000fd6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fda:	6413      	str	r3, [r2, #64]	; 0x40
 8000fdc:	4b25      	ldr	r3, [pc, #148]	; (8001074 <SystemClock_Config+0xcc>)
 8000fde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fe0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fe4:	60bb      	str	r3, [r7, #8]
 8000fe6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000fe8:	2300      	movs	r3, #0
 8000fea:	607b      	str	r3, [r7, #4]
 8000fec:	4b22      	ldr	r3, [pc, #136]	; (8001078 <SystemClock_Config+0xd0>)
 8000fee:	681b      	ldr	r3, [r3, #0]
 8000ff0:	4a21      	ldr	r2, [pc, #132]	; (8001078 <SystemClock_Config+0xd0>)
 8000ff2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000ff6:	6013      	str	r3, [r2, #0]
 8000ff8:	4b1f      	ldr	r3, [pc, #124]	; (8001078 <SystemClock_Config+0xd0>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001000:	607b      	str	r3, [r7, #4]
 8001002:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001004:	2301      	movs	r3, #1
 8001006:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001008:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 800100c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800100e:	2302      	movs	r3, #2
 8001010:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001012:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8001016:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001018:	2304      	movs	r3, #4
 800101a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 800101c:	23a8      	movs	r3, #168	; 0xa8
 800101e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001020:	2302      	movs	r3, #2
 8001022:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001024:	2304      	movs	r3, #4
 8001026:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001028:	f107 0320 	add.w	r3, r7, #32
 800102c:	4618      	mov	r0, r3
 800102e:	f001 f807 	bl	8002040 <HAL_RCC_OscConfig>
 8001032:	4603      	mov	r3, r0
 8001034:	2b00      	cmp	r3, #0
 8001036:	d001      	beq.n	800103c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001038:	f000 fabc 	bl	80015b4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800103c:	230f      	movs	r3, #15
 800103e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001040:	2302      	movs	r3, #2
 8001042:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001048:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800104c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800104e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001052:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001054:	f107 030c 	add.w	r3, r7, #12
 8001058:	2105      	movs	r1, #5
 800105a:	4618      	mov	r0, r3
 800105c:	f001 fa68 	bl	8002530 <HAL_RCC_ClockConfig>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001066:	f000 faa5 	bl	80015b4 <Error_Handler>
  }
}
 800106a:	bf00      	nop
 800106c:	3750      	adds	r7, #80	; 0x50
 800106e:	46bd      	mov	sp, r7
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	40023800 	.word	0x40023800
 8001078:	40007000 	.word	0x40007000

0800107c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800107c:	b580      	push	{r7, lr}
 800107e:	b08e      	sub	sp, #56	; 0x38
 8001080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001082:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001086:	2200      	movs	r2, #0
 8001088:	601a      	str	r2, [r3, #0]
 800108a:	605a      	str	r2, [r3, #4]
 800108c:	609a      	str	r2, [r3, #8]
 800108e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001090:	f107 0320 	add.w	r3, r7, #32
 8001094:	2200      	movs	r2, #0
 8001096:	601a      	str	r2, [r3, #0]
 8001098:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800109a:	1d3b      	adds	r3, r7, #4
 800109c:	2200      	movs	r2, #0
 800109e:	601a      	str	r2, [r3, #0]
 80010a0:	605a      	str	r2, [r3, #4]
 80010a2:	609a      	str	r2, [r3, #8]
 80010a4:	60da      	str	r2, [r3, #12]
 80010a6:	611a      	str	r2, [r3, #16]
 80010a8:	615a      	str	r2, [r3, #20]
 80010aa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80010ac:	4b2c      	ldr	r3, [pc, #176]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010ae:	4a2d      	ldr	r2, [pc, #180]	; (8001164 <MX_TIM3_Init+0xe8>)
 80010b0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 80010b2:	4b2b      	ldr	r3, [pc, #172]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010b4:	2253      	movs	r2, #83	; 0x53
 80010b6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010b8:	4b29      	ldr	r3, [pc, #164]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 150-1;
 80010be:	4b28      	ldr	r3, [pc, #160]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010c0:	2295      	movs	r2, #149	; 0x95
 80010c2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010c4:	4b26      	ldr	r3, [pc, #152]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010c6:	2200      	movs	r2, #0
 80010c8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010ca:	4b25      	ldr	r3, [pc, #148]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010cc:	2200      	movs	r2, #0
 80010ce:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80010d0:	4823      	ldr	r0, [pc, #140]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010d2:	f001 fc29 	bl	8002928 <HAL_TIM_Base_Init>
 80010d6:	4603      	mov	r3, r0
 80010d8:	2b00      	cmp	r3, #0
 80010da:	d001      	beq.n	80010e0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80010dc:	f000 fa6a 	bl	80015b4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010e0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010e4:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80010e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80010ea:	4619      	mov	r1, r3
 80010ec:	481c      	ldr	r0, [pc, #112]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010ee:	f002 f861 	bl	80031b4 <HAL_TIM_ConfigClockSource>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80010f8:	f000 fa5c 	bl	80015b4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80010fc:	4818      	ldr	r0, [pc, #96]	; (8001160 <MX_TIM3_Init+0xe4>)
 80010fe:	f001 fc62 	bl	80029c6 <HAL_TIM_PWM_Init>
 8001102:	4603      	mov	r3, r0
 8001104:	2b00      	cmp	r3, #0
 8001106:	d001      	beq.n	800110c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001108:	f000 fa54 	bl	80015b4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800110c:	2300      	movs	r3, #0
 800110e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001110:	2300      	movs	r3, #0
 8001112:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001114:	f107 0320 	add.w	r3, r7, #32
 8001118:	4619      	mov	r1, r3
 800111a:	4811      	ldr	r0, [pc, #68]	; (8001160 <MX_TIM3_Init+0xe4>)
 800111c:	f002 fc4a 	bl	80039b4 <HAL_TIMEx_MasterConfigSynchronization>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001126:	f000 fa45 	bl	80015b4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800112a:	2360      	movs	r3, #96	; 0x60
 800112c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 75-1;
 800112e:	234a      	movs	r3, #74	; 0x4a
 8001130:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001132:	2300      	movs	r3, #0
 8001134:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800113a:	1d3b      	adds	r3, r7, #4
 800113c:	2200      	movs	r2, #0
 800113e:	4619      	mov	r1, r3
 8001140:	4807      	ldr	r0, [pc, #28]	; (8001160 <MX_TIM3_Init+0xe4>)
 8001142:	f001 ff75 	bl	8003030 <HAL_TIM_PWM_ConfigChannel>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800114c:	f000 fa32 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001150:	4803      	ldr	r0, [pc, #12]	; (8001160 <MX_TIM3_Init+0xe4>)
 8001152:	f000 fa85 	bl	8001660 <HAL_TIM_MspPostInit>

}
 8001156:	bf00      	nop
 8001158:	3738      	adds	r7, #56	; 0x38
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	2000092c 	.word	0x2000092c
 8001164:	40000400 	.word	0x40000400

08001168 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800116c:	4b11      	ldr	r3, [pc, #68]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800116e:	4a12      	ldr	r2, [pc, #72]	; (80011b8 <MX_USART2_UART_Init+0x50>)
 8001170:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001172:	4b10      	ldr	r3, [pc, #64]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001174:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001178:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800117a:	4b0e      	ldr	r3, [pc, #56]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800117c:	2200      	movs	r2, #0
 800117e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001180:	4b0c      	ldr	r3, [pc, #48]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001182:	2200      	movs	r2, #0
 8001184:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001186:	4b0b      	ldr	r3, [pc, #44]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001188:	2200      	movs	r2, #0
 800118a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800118c:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800118e:	220c      	movs	r2, #12
 8001190:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001192:	4b08      	ldr	r3, [pc, #32]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 8001194:	2200      	movs	r2, #0
 8001196:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001198:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 800119a:	2200      	movs	r2, #0
 800119c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800119e:	4805      	ldr	r0, [pc, #20]	; (80011b4 <MX_USART2_UART_Init+0x4c>)
 80011a0:	f002 fc98 	bl	8003ad4 <HAL_UART_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d001      	beq.n	80011ae <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80011aa:	f000 fa03 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80011ae:	bf00      	nop
 80011b0:	bd80      	pop	{r7, pc}
 80011b2:	bf00      	nop
 80011b4:	20000974 	.word	0x20000974
 80011b8:	40004400 	.word	0x40004400

080011bc <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80011c0:	4b11      	ldr	r3, [pc, #68]	; (8001208 <MX_USART3_UART_Init+0x4c>)
 80011c2:	4a12      	ldr	r2, [pc, #72]	; (800120c <MX_USART3_UART_Init+0x50>)
 80011c4:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80011c6:	4b10      	ldr	r3, [pc, #64]	; (8001208 <MX_USART3_UART_Init+0x4c>)
 80011c8:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80011cc:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80011ce:	4b0e      	ldr	r3, [pc, #56]	; (8001208 <MX_USART3_UART_Init+0x4c>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80011d4:	4b0c      	ldr	r3, [pc, #48]	; (8001208 <MX_USART3_UART_Init+0x4c>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80011da:	4b0b      	ldr	r3, [pc, #44]	; (8001208 <MX_USART3_UART_Init+0x4c>)
 80011dc:	2200      	movs	r2, #0
 80011de:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80011e0:	4b09      	ldr	r3, [pc, #36]	; (8001208 <MX_USART3_UART_Init+0x4c>)
 80011e2:	220c      	movs	r2, #12
 80011e4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80011e6:	4b08      	ldr	r3, [pc, #32]	; (8001208 <MX_USART3_UART_Init+0x4c>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80011ec:	4b06      	ldr	r3, [pc, #24]	; (8001208 <MX_USART3_UART_Init+0x4c>)
 80011ee:	2200      	movs	r2, #0
 80011f0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80011f2:	4805      	ldr	r0, [pc, #20]	; (8001208 <MX_USART3_UART_Init+0x4c>)
 80011f4:	f002 fc6e 	bl	8003ad4 <HAL_UART_Init>
 80011f8:	4603      	mov	r3, r0
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d001      	beq.n	8001202 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80011fe:	f000 f9d9 	bl	80015b4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001202:	bf00      	nop
 8001204:	bd80      	pop	{r7, pc}
 8001206:	bf00      	nop
 8001208:	200008e8 	.word	0x200008e8
 800120c:	40004800 	.word	0x40004800

08001210 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b08a      	sub	sp, #40	; 0x28
 8001214:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001216:	f107 0314 	add.w	r3, r7, #20
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
 800121e:	605a      	str	r2, [r3, #4]
 8001220:	609a      	str	r2, [r3, #8]
 8001222:	60da      	str	r2, [r3, #12]
 8001224:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001226:	2300      	movs	r3, #0
 8001228:	613b      	str	r3, [r7, #16]
 800122a:	4b33      	ldr	r3, [pc, #204]	; (80012f8 <MX_GPIO_Init+0xe8>)
 800122c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122e:	4a32      	ldr	r2, [pc, #200]	; (80012f8 <MX_GPIO_Init+0xe8>)
 8001230:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001234:	6313      	str	r3, [r2, #48]	; 0x30
 8001236:	4b30      	ldr	r3, [pc, #192]	; (80012f8 <MX_GPIO_Init+0xe8>)
 8001238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800123a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800123e:	613b      	str	r3, [r7, #16]
 8001240:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001242:	2300      	movs	r3, #0
 8001244:	60fb      	str	r3, [r7, #12]
 8001246:	4b2c      	ldr	r3, [pc, #176]	; (80012f8 <MX_GPIO_Init+0xe8>)
 8001248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800124a:	4a2b      	ldr	r2, [pc, #172]	; (80012f8 <MX_GPIO_Init+0xe8>)
 800124c:	f043 0301 	orr.w	r3, r3, #1
 8001250:	6313      	str	r3, [r2, #48]	; 0x30
 8001252:	4b29      	ldr	r3, [pc, #164]	; (80012f8 <MX_GPIO_Init+0xe8>)
 8001254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001256:	f003 0301 	and.w	r3, r3, #1
 800125a:	60fb      	str	r3, [r7, #12]
 800125c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800125e:	2300      	movs	r3, #0
 8001260:	60bb      	str	r3, [r7, #8]
 8001262:	4b25      	ldr	r3, [pc, #148]	; (80012f8 <MX_GPIO_Init+0xe8>)
 8001264:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001266:	4a24      	ldr	r2, [pc, #144]	; (80012f8 <MX_GPIO_Init+0xe8>)
 8001268:	f043 0302 	orr.w	r3, r3, #2
 800126c:	6313      	str	r3, [r2, #48]	; 0x30
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <MX_GPIO_Init+0xe8>)
 8001270:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001272:	f003 0302 	and.w	r3, r3, #2
 8001276:	60bb      	str	r3, [r7, #8]
 8001278:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800127a:	2300      	movs	r3, #0
 800127c:	607b      	str	r3, [r7, #4]
 800127e:	4b1e      	ldr	r3, [pc, #120]	; (80012f8 <MX_GPIO_Init+0xe8>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a1d      	ldr	r2, [pc, #116]	; (80012f8 <MX_GPIO_Init+0xe8>)
 8001284:	f043 0308 	orr.w	r3, r3, #8
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b1b      	ldr	r3, [pc, #108]	; (80012f8 <MX_GPIO_Init+0xe8>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0308 	and.w	r3, r3, #8
 8001292:	607b      	str	r3, [r7, #4]
 8001294:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LM_ENR_Pin|LM_DIR_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 8001296:	2200      	movs	r2, #0
 8001298:	2199      	movs	r1, #153	; 0x99
 800129a:	4818      	ldr	r0, [pc, #96]	; (80012fc <MX_GPIO_Init+0xec>)
 800129c:	f000 feb6 	bl	800200c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PB0 PB7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_7;
 80012a0:	2381      	movs	r3, #129	; 0x81
 80012a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012a4:	2301      	movs	r3, #1
 80012a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a8:	2300      	movs	r3, #0
 80012aa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012ac:	2300      	movs	r3, #0
 80012ae:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 0314 	add.w	r3, r7, #20
 80012b4:	4619      	mov	r1, r3
 80012b6:	4811      	ldr	r0, [pc, #68]	; (80012fc <MX_GPIO_Init+0xec>)
 80012b8:	f000 fcfc 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80012bc:	2304      	movs	r3, #4
 80012be:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012c0:	2300      	movs	r3, #0
 80012c2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80012c8:	f107 0314 	add.w	r3, r7, #20
 80012cc:	4619      	mov	r1, r3
 80012ce:	480b      	ldr	r0, [pc, #44]	; (80012fc <MX_GPIO_Init+0xec>)
 80012d0:	f000 fcf0 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : LM_ENR_Pin LM_DIR_Pin */
  GPIO_InitStruct.Pin = LM_ENR_Pin|LM_DIR_Pin;
 80012d4:	2318      	movs	r3, #24
 80012d6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012d8:	2301      	movs	r3, #1
 80012da:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012dc:	2300      	movs	r3, #0
 80012de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012e0:	2303      	movs	r3, #3
 80012e2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012e4:	f107 0314 	add.w	r3, r7, #20
 80012e8:	4619      	mov	r1, r3
 80012ea:	4804      	ldr	r0, [pc, #16]	; (80012fc <MX_GPIO_Init+0xec>)
 80012ec:	f000 fce2 	bl	8001cb4 <HAL_GPIO_Init>

}
 80012f0:	bf00      	nop
 80012f2:	3728      	adds	r7, #40	; 0x28
 80012f4:	46bd      	mov	sp, r7
 80012f6:	bd80      	pop	{r7, pc}
 80012f8:	40023800 	.word	0x40023800
 80012fc:	40020400 	.word	0x40020400

08001300 <LM_Guide_ENA>:

/* USER CODE BEGIN 4 */


void LM_Guide_ENA(int ena)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	b082      	sub	sp, #8
 8001304:	af00      	add	r7, sp, #0
 8001306:	6078      	str	r0, [r7, #4]
	if(ena)
 8001308:	687b      	ldr	r3, [r7, #4]
 800130a:	2b00      	cmp	r3, #0
 800130c:	d005      	beq.n	800131a <LM_Guide_ENA+0x1a>
		HAL_GPIO_WritePin(LM_ENR_GPIO_Port, LM_ENR_Pin, LM_ENA_Yes);
 800130e:	2200      	movs	r2, #0
 8001310:	2108      	movs	r1, #8
 8001312:	4808      	ldr	r0, [pc, #32]	; (8001334 <LM_Guide_ENA+0x34>)
 8001314:	f000 fe7a 	bl	800200c <HAL_GPIO_WritePin>
	else if(ena==0)
		HAL_GPIO_WritePin(LM_ENR_GPIO_Port, LM_ENR_Pin, LM_ENA_No);
}
 8001318:	e007      	b.n	800132a <LM_Guide_ENA+0x2a>
	else if(ena==0)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	2b00      	cmp	r3, #0
 800131e:	d104      	bne.n	800132a <LM_Guide_ENA+0x2a>
		HAL_GPIO_WritePin(LM_ENR_GPIO_Port, LM_ENR_Pin, LM_ENA_No);
 8001320:	2201      	movs	r2, #1
 8001322:	2108      	movs	r1, #8
 8001324:	4803      	ldr	r0, [pc, #12]	; (8001334 <LM_Guide_ENA+0x34>)
 8001326:	f000 fe71 	bl	800200c <HAL_GPIO_WritePin>
}
 800132a:	bf00      	nop
 800132c:	3708      	adds	r7, #8
 800132e:	46bd      	mov	sp, r7
 8001330:	bd80      	pop	{r7, pc}
 8001332:	bf00      	nop
 8001334:	40020400 	.word	0x40020400

08001338 <LM_Guide_DIR>:

void LM_Guide_DIR(int dir)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	b082      	sub	sp, #8
 800133c:	af00      	add	r7, sp, #0
 800133e:	6078      	str	r0, [r7, #4]
	if(dir)
 8001340:	687b      	ldr	r3, [r7, #4]
 8001342:	2b00      	cmp	r3, #0
 8001344:	d005      	beq.n	8001352 <LM_Guide_DIR+0x1a>
		HAL_GPIO_WritePin(LM_DIR_GPIO_Port, LM_DIR_Pin, GPIO_PIN_SET);
 8001346:	2201      	movs	r2, #1
 8001348:	2110      	movs	r1, #16
 800134a:	4808      	ldr	r0, [pc, #32]	; (800136c <LM_Guide_DIR+0x34>)
 800134c:	f000 fe5e 	bl	800200c <HAL_GPIO_WritePin>
	else if(dir==0)
		HAL_GPIO_WritePin(LM_DIR_GPIO_Port, LM_DIR_Pin, GPIO_PIN_RESET);
}
 8001350:	e007      	b.n	8001362 <LM_Guide_DIR+0x2a>
	else if(dir==0)
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	2b00      	cmp	r3, #0
 8001356:	d104      	bne.n	8001362 <LM_Guide_DIR+0x2a>
		HAL_GPIO_WritePin(LM_DIR_GPIO_Port, LM_DIR_Pin, GPIO_PIN_RESET);
 8001358:	2200      	movs	r2, #0
 800135a:	2110      	movs	r1, #16
 800135c:	4803      	ldr	r0, [pc, #12]	; (800136c <LM_Guide_DIR+0x34>)
 800135e:	f000 fe55 	bl	800200c <HAL_GPIO_WritePin>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	40020400 	.word	0x40020400

08001370 <LM_Guide_move>:

void LM_Guide_move(int LM_Position_Goal)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b084      	sub	sp, #16
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
	int dir;
	int distance_to_move;

	LM_While=1;
 8001378:	4b25      	ldr	r3, [pc, #148]	; (8001410 <LM_Guide_move+0xa0>)
 800137a:	2201      	movs	r2, #1
 800137c:	701a      	strb	r2, [r3, #0]
	distance_to_move=LM_Position_Goal-LM_Position;
 800137e:	687a      	ldr	r2, [r7, #4]
 8001380:	4b24      	ldr	r3, [pc, #144]	; (8001414 <LM_Guide_move+0xa4>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	60bb      	str	r3, [r7, #8]
	if(LM_Position_Goal>=320)
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800138e:	db02      	blt.n	8001396 <LM_Guide_move+0x26>
		LM_Position_Goal=320;
 8001390:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001394:	607b      	str	r3, [r7, #4]
	if(LM_Position_Goal<=0)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	2b00      	cmp	r3, #0
 800139a:	dc01      	bgt.n	80013a0 <LM_Guide_move+0x30>
		LM_Position_Goal=0;
 800139c:	2300      	movs	r3, #0
 800139e:	607b      	str	r3, [r7, #4]


	LM_Position += distance_to_move;
 80013a0:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <LM_Guide_move+0xa4>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	68bb      	ldr	r3, [r7, #8]
 80013a6:	4413      	add	r3, r2
 80013a8:	4a1a      	ldr	r2, [pc, #104]	; (8001414 <LM_Guide_move+0xa4>)
 80013aa:	6013      	str	r3, [r2, #0]
	if(distance_to_move>0)
 80013ac:	68bb      	ldr	r3, [r7, #8]
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	dd02      	ble.n	80013b8 <LM_Guide_move+0x48>
		dir=1;
 80013b2:	2301      	movs	r3, #1
 80013b4:	60fb      	str	r3, [r7, #12]
 80013b6:	e004      	b.n	80013c2 <LM_Guide_move+0x52>
	else
	{
		dir=0;
 80013b8:	2300      	movs	r3, #0
 80013ba:	60fb      	str	r3, [r7, #12]
		distance_to_move *= -1;
 80013bc:	68bb      	ldr	r3, [r7, #8]
 80013be:	425b      	negs	r3, r3
 80013c0:	60bb      	str	r3, [r7, #8]
	}


	LM_Guide_ENA(1);
 80013c2:	2001      	movs	r0, #1
 80013c4:	f7ff ff9c 	bl	8001300 <LM_Guide_ENA>
	LM_Guide_DIR(dir);
 80013c8:	68f8      	ldr	r0, [r7, #12]
 80013ca:	f7ff ffb5 	bl	8001338 <LM_Guide_DIR>
	TIM3->CCR1 = 75;
 80013ce:	4b12      	ldr	r3, [pc, #72]	; (8001418 <LM_Guide_move+0xa8>)
 80013d0:	224b      	movs	r2, #75	; 0x4b
 80013d2:	635a      	str	r2, [r3, #52]	; 0x34
	LM_Guide_Step=LMSTEPCOUNT*distance_to_move/320;
 80013d4:	68bb      	ldr	r3, [r7, #8]
 80013d6:	4a11      	ldr	r2, [pc, #68]	; (800141c <LM_Guide_move+0xac>)
 80013d8:	fb02 f303 	mul.w	r3, r2, r3
 80013dc:	4a10      	ldr	r2, [pc, #64]	; (8001420 <LM_Guide_move+0xb0>)
 80013de:	fb82 1203 	smull	r1, r2, r2, r3
 80013e2:	11d2      	asrs	r2, r2, #7
 80013e4:	17db      	asrs	r3, r3, #31
 80013e6:	1ad3      	subs	r3, r2, r3
 80013e8:	461a      	mov	r2, r3
 80013ea:	4b0e      	ldr	r3, [pc, #56]	; (8001424 <LM_Guide_move+0xb4>)
 80013ec:	601a      	str	r2, [r3, #0]


	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 80013ee:	2100      	movs	r1, #0
 80013f0:	480d      	ldr	r0, [pc, #52]	; (8001428 <LM_Guide_move+0xb8>)
 80013f2:	f001 fb41 	bl	8002a78 <HAL_TIM_PWM_Start_IT>
	while(LM_While);
 80013f6:	bf00      	nop
 80013f8:	4b05      	ldr	r3, [pc, #20]	; (8001410 <LM_Guide_move+0xa0>)
 80013fa:	781b      	ldrb	r3, [r3, #0]
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d1fb      	bne.n	80013f8 <LM_Guide_move+0x88>
	HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001400:	2100      	movs	r1, #0
 8001402:	4809      	ldr	r0, [pc, #36]	; (8001428 <LM_Guide_move+0xb8>)
 8001404:	f001 fc4e 	bl	8002ca4 <HAL_TIM_PWM_Stop_IT>

}
 8001408:	bf00      	nop
 800140a:	3710      	adds	r7, #16
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	20000001 	.word	0x20000001
 8001414:	200008b4 	.word	0x200008b4
 8001418:	40000400 	.word	0x40000400
 800141c:	0003bd08 	.word	0x0003bd08
 8001420:	66666667 	.word	0x66666667
 8001424:	200008b0 	.word	0x200008b0
 8001428:	2000092c 	.word	0x2000092c

0800142c <HAL_TIM_PWM_PulseFinishedCallback>:




void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b082      	sub	sp, #8
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	4a0d      	ldr	r2, [pc, #52]	; (8001470 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 800143a:	4293      	cmp	r3, r2
 800143c:	d114      	bne.n	8001468 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
	{
		if(LM_Guide_Step>0)
 800143e:	4b0d      	ldr	r3, [pc, #52]	; (8001474 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	2b00      	cmp	r3, #0
 8001444:	d005      	beq.n	8001452 <HAL_TIM_PWM_PulseFinishedCallback+0x26>
		{
			LM_Guide_Step--;
 8001446:	4b0b      	ldr	r3, [pc, #44]	; (8001474 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	3b01      	subs	r3, #1
 800144c:	4a09      	ldr	r2, [pc, #36]	; (8001474 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 800144e:	6013      	str	r3, [r2, #0]
			LM_While=0;
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
		}

	}
}
 8001450:	e00a      	b.n	8001468 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
		else if(LM_Guide_Step<=0)
 8001452:	4b08      	ldr	r3, [pc, #32]	; (8001474 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d106      	bne.n	8001468 <HAL_TIM_PWM_PulseFinishedCallback+0x3c>
			LM_While=0;
 800145a:	4b07      	ldr	r3, [pc, #28]	; (8001478 <HAL_TIM_PWM_PulseFinishedCallback+0x4c>)
 800145c:	2200      	movs	r2, #0
 800145e:	701a      	strb	r2, [r3, #0]
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8001460:	2100      	movs	r1, #0
 8001462:	4806      	ldr	r0, [pc, #24]	; (800147c <HAL_TIM_PWM_PulseFinishedCallback+0x50>)
 8001464:	f001 fc1e 	bl	8002ca4 <HAL_TIM_PWM_Stop_IT>
}
 8001468:	bf00      	nop
 800146a:	3708      	adds	r7, #8
 800146c:	46bd      	mov	sp, r7
 800146e:	bd80      	pop	{r7, pc}
 8001470:	40000400 	.word	0x40000400
 8001474:	200008b0 	.word	0x200008b0
 8001478:	20000001 	.word	0x20000001
 800147c:	2000092c 	.word	0x2000092c

08001480 <Elevator>:


void Elevator(int floor)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	6078      	str	r0, [r7, #4]

	if(floor==1)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2b01      	cmp	r3, #1
 800148c:	d138      	bne.n	8001500 <Elevator+0x80>
	{
		Uart_sendstring("AT+CIPSTART=1,\"TCP\",\"192.168.0.222\",80\r\n",wifi_uart);
 800148e:	493c      	ldr	r1, [pc, #240]	; (8001580 <Elevator+0x100>)
 8001490:	483c      	ldr	r0, [pc, #240]	; (8001584 <Elevator+0x104>)
 8001492:	f7ff fb7f 	bl	8000b94 <Uart_sendstring>
		while (!(Wait_for("OK\r\n",wifi_uart)));
 8001496:	bf00      	nop
 8001498:	4939      	ldr	r1, [pc, #228]	; (8001580 <Elevator+0x100>)
 800149a:	483b      	ldr	r0, [pc, #236]	; (8001588 <Elevator+0x108>)
 800149c:	f7ff fc10 	bl	8000cc0 <Wait_for>
 80014a0:	4603      	mov	r3, r0
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d0f8      	beq.n	8001498 <Elevator+0x18>
		Uart_sendstring("CIPSTART 192.168.0.222 OK\n\n", pc_uart);
 80014a6:	4939      	ldr	r1, [pc, #228]	; (800158c <Elevator+0x10c>)
 80014a8:	4839      	ldr	r0, [pc, #228]	; (8001590 <Elevator+0x110>)
 80014aa:	f7ff fb73 	bl	8000b94 <Uart_sendstring>


		Uart_sendstring("AT+CIPSEND=1,5\r\n",wifi_uart);
 80014ae:	4934      	ldr	r1, [pc, #208]	; (8001580 <Elevator+0x100>)
 80014b0:	4838      	ldr	r0, [pc, #224]	; (8001594 <Elevator+0x114>)
 80014b2:	f7ff fb6f 	bl	8000b94 <Uart_sendstring>
		while (!(Wait_for(">", wifi_uart)));
 80014b6:	bf00      	nop
 80014b8:	4931      	ldr	r1, [pc, #196]	; (8001580 <Elevator+0x100>)
 80014ba:	4837      	ldr	r0, [pc, #220]	; (8001598 <Elevator+0x118>)
 80014bc:	f7ff fc00 	bl	8000cc0 <Wait_for>
 80014c0:	4603      	mov	r3, r0
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d0f8      	beq.n	80014b8 <Elevator+0x38>

		Uart_sendstring ("11111", wifi_uart);
 80014c6:	492e      	ldr	r1, [pc, #184]	; (8001580 <Elevator+0x100>)
 80014c8:	4834      	ldr	r0, [pc, #208]	; (800159c <Elevator+0x11c>)
 80014ca:	f7ff fb63 	bl	8000b94 <Uart_sendstring>
		while (!(Wait_for("SEND OK", wifi_uart)));
 80014ce:	bf00      	nop
 80014d0:	492b      	ldr	r1, [pc, #172]	; (8001580 <Elevator+0x100>)
 80014d2:	4833      	ldr	r0, [pc, #204]	; (80015a0 <Elevator+0x120>)
 80014d4:	f7ff fbf4 	bl	8000cc0 <Wait_for>
 80014d8:	4603      	mov	r3, r0
 80014da:	2b00      	cmp	r3, #0
 80014dc:	d0f8      	beq.n	80014d0 <Elevator+0x50>

		Uart_sendstring("AT+CIPCLOSE=1\r\n", wifi_uart);
 80014de:	4928      	ldr	r1, [pc, #160]	; (8001580 <Elevator+0x100>)
 80014e0:	4830      	ldr	r0, [pc, #192]	; (80015a4 <Elevator+0x124>)
 80014e2:	f7ff fb57 	bl	8000b94 <Uart_sendstring>
		while (!(Wait_for("OK\r\n", wifi_uart)));
 80014e6:	bf00      	nop
 80014e8:	4925      	ldr	r1, [pc, #148]	; (8001580 <Elevator+0x100>)
 80014ea:	4827      	ldr	r0, [pc, #156]	; (8001588 <Elevator+0x108>)
 80014ec:	f7ff fbe8 	bl	8000cc0 <Wait_for>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d0f8      	beq.n	80014e8 <Elevator+0x68>
		Uart_sendstring("1\r\n", pc_uart);
 80014f6:	4925      	ldr	r1, [pc, #148]	; (800158c <Elevator+0x10c>)
 80014f8:	482b      	ldr	r0, [pc, #172]	; (80015a8 <Elevator+0x128>)
 80014fa:	f7ff fb4b 	bl	8000b94 <Uart_sendstring>
		Uart_sendstring("AT+CIPCLOSE=1\r\n", wifi_uart);
		while (!(Wait_for("OK\r\n", wifi_uart)));
		Uart_sendstring("2\r\n", pc_uart);
	}

}
 80014fe:	e03a      	b.n	8001576 <Elevator+0xf6>
	else if(floor==2)
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	2b02      	cmp	r3, #2
 8001504:	d137      	bne.n	8001576 <Elevator+0xf6>
		Uart_sendstring("AT+CIPSTART=1,\"TCP\",\"192.168.0.222\",80\r\n",wifi_uart);
 8001506:	491e      	ldr	r1, [pc, #120]	; (8001580 <Elevator+0x100>)
 8001508:	481e      	ldr	r0, [pc, #120]	; (8001584 <Elevator+0x104>)
 800150a:	f7ff fb43 	bl	8000b94 <Uart_sendstring>
		while (!(Wait_for("OK\r\n",wifi_uart)));
 800150e:	bf00      	nop
 8001510:	491b      	ldr	r1, [pc, #108]	; (8001580 <Elevator+0x100>)
 8001512:	481d      	ldr	r0, [pc, #116]	; (8001588 <Elevator+0x108>)
 8001514:	f7ff fbd4 	bl	8000cc0 <Wait_for>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d0f8      	beq.n	8001510 <Elevator+0x90>
		Uart_sendstring("CIPSTART 192.168.0.222 OK\n\n", pc_uart);
 800151e:	491b      	ldr	r1, [pc, #108]	; (800158c <Elevator+0x10c>)
 8001520:	481b      	ldr	r0, [pc, #108]	; (8001590 <Elevator+0x110>)
 8001522:	f7ff fb37 	bl	8000b94 <Uart_sendstring>
		Uart_sendstring("AT+CIPSEND=1,5\r\n",wifi_uart);
 8001526:	4916      	ldr	r1, [pc, #88]	; (8001580 <Elevator+0x100>)
 8001528:	481a      	ldr	r0, [pc, #104]	; (8001594 <Elevator+0x114>)
 800152a:	f7ff fb33 	bl	8000b94 <Uart_sendstring>
		while (!(Wait_for(">", wifi_uart)));
 800152e:	bf00      	nop
 8001530:	4913      	ldr	r1, [pc, #76]	; (8001580 <Elevator+0x100>)
 8001532:	4819      	ldr	r0, [pc, #100]	; (8001598 <Elevator+0x118>)
 8001534:	f7ff fbc4 	bl	8000cc0 <Wait_for>
 8001538:	4603      	mov	r3, r0
 800153a:	2b00      	cmp	r3, #0
 800153c:	d0f8      	beq.n	8001530 <Elevator+0xb0>
		Uart_sendstring ("22222", wifi_uart);
 800153e:	4910      	ldr	r1, [pc, #64]	; (8001580 <Elevator+0x100>)
 8001540:	481a      	ldr	r0, [pc, #104]	; (80015ac <Elevator+0x12c>)
 8001542:	f7ff fb27 	bl	8000b94 <Uart_sendstring>
		while (!(Wait_for("SEND OK", wifi_uart)));
 8001546:	bf00      	nop
 8001548:	490d      	ldr	r1, [pc, #52]	; (8001580 <Elevator+0x100>)
 800154a:	4815      	ldr	r0, [pc, #84]	; (80015a0 <Elevator+0x120>)
 800154c:	f7ff fbb8 	bl	8000cc0 <Wait_for>
 8001550:	4603      	mov	r3, r0
 8001552:	2b00      	cmp	r3, #0
 8001554:	d0f8      	beq.n	8001548 <Elevator+0xc8>
		Uart_sendstring("AT+CIPCLOSE=1\r\n", wifi_uart);
 8001556:	490a      	ldr	r1, [pc, #40]	; (8001580 <Elevator+0x100>)
 8001558:	4812      	ldr	r0, [pc, #72]	; (80015a4 <Elevator+0x124>)
 800155a:	f7ff fb1b 	bl	8000b94 <Uart_sendstring>
		while (!(Wait_for("OK\r\n", wifi_uart)));
 800155e:	bf00      	nop
 8001560:	4907      	ldr	r1, [pc, #28]	; (8001580 <Elevator+0x100>)
 8001562:	4809      	ldr	r0, [pc, #36]	; (8001588 <Elevator+0x108>)
 8001564:	f7ff fbac 	bl	8000cc0 <Wait_for>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d0f8      	beq.n	8001560 <Elevator+0xe0>
		Uart_sendstring("2\r\n", pc_uart);
 800156e:	4907      	ldr	r1, [pc, #28]	; (800158c <Elevator+0x10c>)
 8001570:	480f      	ldr	r0, [pc, #60]	; (80015b0 <Elevator+0x130>)
 8001572:	f7ff fb0f 	bl	8000b94 <Uart_sendstring>
}
 8001576:	bf00      	nop
 8001578:	3708      	adds	r7, #8
 800157a:	46bd      	mov	sp, r7
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000974 	.word	0x20000974
 8001584:	08004a2c 	.word	0x08004a2c
 8001588:	08004a58 	.word	0x08004a58
 800158c:	200008e8 	.word	0x200008e8
 8001590:	08004a60 	.word	0x08004a60
 8001594:	08004a7c 	.word	0x08004a7c
 8001598:	08004a90 	.word	0x08004a90
 800159c:	08004a1c 	.word	0x08004a1c
 80015a0:	08004a94 	.word	0x08004a94
 80015a4:	08004a9c 	.word	0x08004a9c
 80015a8:	08004aac 	.word	0x08004aac
 80015ac:	08004a24 	.word	0x08004a24
 80015b0:	08004ab0 	.word	0x08004ab0

080015b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015b4:	b480      	push	{r7}
 80015b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015b8:	b672      	cpsid	i
}
 80015ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015bc:	e7fe      	b.n	80015bc <Error_Handler+0x8>
	...

080015c0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	607b      	str	r3, [r7, #4]
 80015ca:	4b10      	ldr	r3, [pc, #64]	; (800160c <HAL_MspInit+0x4c>)
 80015cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ce:	4a0f      	ldr	r2, [pc, #60]	; (800160c <HAL_MspInit+0x4c>)
 80015d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015d4:	6453      	str	r3, [r2, #68]	; 0x44
 80015d6:	4b0d      	ldr	r3, [pc, #52]	; (800160c <HAL_MspInit+0x4c>)
 80015d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015de:	607b      	str	r3, [r7, #4]
 80015e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	603b      	str	r3, [r7, #0]
 80015e6:	4b09      	ldr	r3, [pc, #36]	; (800160c <HAL_MspInit+0x4c>)
 80015e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ea:	4a08      	ldr	r2, [pc, #32]	; (800160c <HAL_MspInit+0x4c>)
 80015ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015f0:	6413      	str	r3, [r2, #64]	; 0x40
 80015f2:	4b06      	ldr	r3, [pc, #24]	; (800160c <HAL_MspInit+0x4c>)
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015f6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015fa:	603b      	str	r3, [r7, #0]
 80015fc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015fe:	bf00      	nop
 8001600:	370c      	adds	r7, #12
 8001602:	46bd      	mov	sp, r7
 8001604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001608:	4770      	bx	lr
 800160a:	bf00      	nop
 800160c:	40023800 	.word	0x40023800

08001610 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001610:	b580      	push	{r7, lr}
 8001612:	b084      	sub	sp, #16
 8001614:	af00      	add	r7, sp, #0
 8001616:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a0e      	ldr	r2, [pc, #56]	; (8001658 <HAL_TIM_Base_MspInit+0x48>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d115      	bne.n	800164e <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60fb      	str	r3, [r7, #12]
 8001626:	4b0d      	ldr	r3, [pc, #52]	; (800165c <HAL_TIM_Base_MspInit+0x4c>)
 8001628:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800162a:	4a0c      	ldr	r2, [pc, #48]	; (800165c <HAL_TIM_Base_MspInit+0x4c>)
 800162c:	f043 0302 	orr.w	r3, r3, #2
 8001630:	6413      	str	r3, [r2, #64]	; 0x40
 8001632:	4b0a      	ldr	r3, [pc, #40]	; (800165c <HAL_TIM_Base_MspInit+0x4c>)
 8001634:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	60fb      	str	r3, [r7, #12]
 800163c:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2100      	movs	r1, #0
 8001642:	201d      	movs	r0, #29
 8001644:	f000 faff 	bl	8001c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001648:	201d      	movs	r0, #29
 800164a:	f000 fb18 	bl	8001c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800164e:	bf00      	nop
 8001650:	3710      	adds	r7, #16
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40000400 	.word	0x40000400
 800165c:	40023800 	.word	0x40023800

08001660 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b088      	sub	sp, #32
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001668:	f107 030c 	add.w	r3, r7, #12
 800166c:	2200      	movs	r2, #0
 800166e:	601a      	str	r2, [r3, #0]
 8001670:	605a      	str	r2, [r3, #4]
 8001672:	609a      	str	r2, [r3, #8]
 8001674:	60da      	str	r2, [r3, #12]
 8001676:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	4a12      	ldr	r2, [pc, #72]	; (80016c8 <HAL_TIM_MspPostInit+0x68>)
 800167e:	4293      	cmp	r3, r2
 8001680:	d11d      	bne.n	80016be <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001682:	2300      	movs	r3, #0
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	4b11      	ldr	r3, [pc, #68]	; (80016cc <HAL_TIM_MspPostInit+0x6c>)
 8001688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800168a:	4a10      	ldr	r2, [pc, #64]	; (80016cc <HAL_TIM_MspPostInit+0x6c>)
 800168c:	f043 0301 	orr.w	r3, r3, #1
 8001690:	6313      	str	r3, [r2, #48]	; 0x30
 8001692:	4b0e      	ldr	r3, [pc, #56]	; (80016cc <HAL_TIM_MspPostInit+0x6c>)
 8001694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001696:	f003 0301 	and.w	r3, r3, #1
 800169a:	60bb      	str	r3, [r7, #8]
 800169c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = LM_PWM_Pin;
 800169e:	2340      	movs	r3, #64	; 0x40
 80016a0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016a2:	2302      	movs	r3, #2
 80016a4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a6:	2300      	movs	r3, #0
 80016a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016aa:	2300      	movs	r3, #0
 80016ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80016ae:	2302      	movs	r3, #2
 80016b0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(LM_PWM_GPIO_Port, &GPIO_InitStruct);
 80016b2:	f107 030c 	add.w	r3, r7, #12
 80016b6:	4619      	mov	r1, r3
 80016b8:	4805      	ldr	r0, [pc, #20]	; (80016d0 <HAL_TIM_MspPostInit+0x70>)
 80016ba:	f000 fafb 	bl	8001cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80016be:	bf00      	nop
 80016c0:	3720      	adds	r7, #32
 80016c2:	46bd      	mov	sp, r7
 80016c4:	bd80      	pop	{r7, pc}
 80016c6:	bf00      	nop
 80016c8:	40000400 	.word	0x40000400
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000

080016d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08c      	sub	sp, #48	; 0x30
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 031c 	add.w	r3, r7, #28
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
 80016ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	681b      	ldr	r3, [r3, #0]
 80016f0:	4a3a      	ldr	r2, [pc, #232]	; (80017dc <HAL_UART_MspInit+0x108>)
 80016f2:	4293      	cmp	r3, r2
 80016f4:	d134      	bne.n	8001760 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80016f6:	2300      	movs	r3, #0
 80016f8:	61bb      	str	r3, [r7, #24]
 80016fa:	4b39      	ldr	r3, [pc, #228]	; (80017e0 <HAL_UART_MspInit+0x10c>)
 80016fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016fe:	4a38      	ldr	r2, [pc, #224]	; (80017e0 <HAL_UART_MspInit+0x10c>)
 8001700:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001704:	6413      	str	r3, [r2, #64]	; 0x40
 8001706:	4b36      	ldr	r3, [pc, #216]	; (80017e0 <HAL_UART_MspInit+0x10c>)
 8001708:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800170a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800170e:	61bb      	str	r3, [r7, #24]
 8001710:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001712:	2300      	movs	r3, #0
 8001714:	617b      	str	r3, [r7, #20]
 8001716:	4b32      	ldr	r3, [pc, #200]	; (80017e0 <HAL_UART_MspInit+0x10c>)
 8001718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800171a:	4a31      	ldr	r2, [pc, #196]	; (80017e0 <HAL_UART_MspInit+0x10c>)
 800171c:	f043 0301 	orr.w	r3, r3, #1
 8001720:	6313      	str	r3, [r2, #48]	; 0x30
 8001722:	4b2f      	ldr	r3, [pc, #188]	; (80017e0 <HAL_UART_MspInit+0x10c>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	f003 0301 	and.w	r3, r3, #1
 800172a:	617b      	str	r3, [r7, #20]
 800172c:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = ESP8266_USART_TX_Pin|ESP8266_USART_RX_Pin;
 800172e:	230c      	movs	r3, #12
 8001730:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800173a:	2303      	movs	r3, #3
 800173c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800173e:	2307      	movs	r3, #7
 8001740:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001742:	f107 031c 	add.w	r3, r7, #28
 8001746:	4619      	mov	r1, r3
 8001748:	4826      	ldr	r0, [pc, #152]	; (80017e4 <HAL_UART_MspInit+0x110>)
 800174a:	f000 fab3 	bl	8001cb4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800174e:	2200      	movs	r2, #0
 8001750:	2100      	movs	r1, #0
 8001752:	2026      	movs	r0, #38	; 0x26
 8001754:	f000 fa77 	bl	8001c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001758:	2026      	movs	r0, #38	; 0x26
 800175a:	f000 fa90 	bl	8001c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800175e:	e039      	b.n	80017d4 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	4a20      	ldr	r2, [pc, #128]	; (80017e8 <HAL_UART_MspInit+0x114>)
 8001766:	4293      	cmp	r3, r2
 8001768:	d134      	bne.n	80017d4 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	613b      	str	r3, [r7, #16]
 800176e:	4b1c      	ldr	r3, [pc, #112]	; (80017e0 <HAL_UART_MspInit+0x10c>)
 8001770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001772:	4a1b      	ldr	r2, [pc, #108]	; (80017e0 <HAL_UART_MspInit+0x10c>)
 8001774:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001778:	6413      	str	r3, [r2, #64]	; 0x40
 800177a:	4b19      	ldr	r3, [pc, #100]	; (80017e0 <HAL_UART_MspInit+0x10c>)
 800177c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800177e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001782:	613b      	str	r3, [r7, #16]
 8001784:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	60fb      	str	r3, [r7, #12]
 800178a:	4b15      	ldr	r3, [pc, #84]	; (80017e0 <HAL_UART_MspInit+0x10c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a14      	ldr	r2, [pc, #80]	; (80017e0 <HAL_UART_MspInit+0x10c>)
 8001790:	f043 0308 	orr.w	r3, r3, #8
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b12      	ldr	r3, [pc, #72]	; (80017e0 <HAL_UART_MspInit+0x10c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0308 	and.w	r3, r3, #8
 800179e:	60fb      	str	r3, [r7, #12]
 80017a0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PC_USART_TX_Pin|PC_USART_RX_Pin;
 80017a2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80017a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017a8:	2302      	movs	r3, #2
 80017aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017ac:	2300      	movs	r3, #0
 80017ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017b0:	2303      	movs	r3, #3
 80017b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80017b4:	2307      	movs	r3, #7
 80017b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017b8:	f107 031c 	add.w	r3, r7, #28
 80017bc:	4619      	mov	r1, r3
 80017be:	480b      	ldr	r0, [pc, #44]	; (80017ec <HAL_UART_MspInit+0x118>)
 80017c0:	f000 fa78 	bl	8001cb4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80017c4:	2200      	movs	r2, #0
 80017c6:	2100      	movs	r1, #0
 80017c8:	2027      	movs	r0, #39	; 0x27
 80017ca:	f000 fa3c 	bl	8001c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80017ce:	2027      	movs	r0, #39	; 0x27
 80017d0:	f000 fa55 	bl	8001c7e <HAL_NVIC_EnableIRQ>
}
 80017d4:	bf00      	nop
 80017d6:	3730      	adds	r7, #48	; 0x30
 80017d8:	46bd      	mov	sp, r7
 80017da:	bd80      	pop	{r7, pc}
 80017dc:	40004400 	.word	0x40004400
 80017e0:	40023800 	.word	0x40023800
 80017e4:	40020000 	.word	0x40020000
 80017e8:	40004800 	.word	0x40004800
 80017ec:	40020c00 	.word	0x40020c00

080017f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017f0:	b480      	push	{r7}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017f4:	e7fe      	b.n	80017f4 <NMI_Handler+0x4>

080017f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017f6:	b480      	push	{r7}
 80017f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017fa:	e7fe      	b.n	80017fa <HardFault_Handler+0x4>

080017fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017fc:	b480      	push	{r7}
 80017fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001800:	e7fe      	b.n	8001800 <MemManage_Handler+0x4>

08001802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001802:	b480      	push	{r7}
 8001804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001806:	e7fe      	b.n	8001806 <BusFault_Handler+0x4>

08001808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001808:	b480      	push	{r7}
 800180a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800180c:	e7fe      	b.n	800180c <UsageFault_Handler+0x4>

0800180e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800180e:	b480      	push	{r7}
 8001810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001812:	bf00      	nop
 8001814:	46bd      	mov	sp, r7
 8001816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800181a:	4770      	bx	lr

0800181c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800181c:	b480      	push	{r7}
 800181e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr

0800182a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800182a:	b480      	push	{r7}
 800182c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800182e:	bf00      	nop
 8001830:	46bd      	mov	sp, r7
 8001832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001836:	4770      	bx	lr

08001838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001838:	b580      	push	{r7, lr}
 800183a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800183c:	f000 f8e4 	bl	8001a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001840:	bf00      	nop
 8001842:	bd80      	pop	{r7, pc}

08001844 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001848:	4802      	ldr	r0, [pc, #8]	; (8001854 <TIM3_IRQHandler+0x10>)
 800184a:	f001 fae9 	bl	8002e20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800184e:	bf00      	nop
 8001850:	bd80      	pop	{r7, pc}
 8001852:	bf00      	nop
 8001854:	2000092c 	.word	0x2000092c

08001858 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001858:	b580      	push	{r7, lr}
 800185a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 800185c:	4802      	ldr	r0, [pc, #8]	; (8001868 <USART2_IRQHandler+0x10>)
 800185e:	f7ff fa8b 	bl	8000d78 <Uart_isr>
	return;
 8001862:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	20000974 	.word	0x20000974

0800186c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 8001870:	4802      	ldr	r0, [pc, #8]	; (800187c <USART3_IRQHandler+0x10>)
 8001872:	f7ff fa81 	bl	8000d78 <Uart_isr>
	return;
 8001876:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001878:	bd80      	pop	{r7, pc}
 800187a:	bf00      	nop
 800187c:	200008e8 	.word	0x200008e8

08001880 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001880:	b580      	push	{r7, lr}
 8001882:	b086      	sub	sp, #24
 8001884:	af00      	add	r7, sp, #0
 8001886:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001888:	4a14      	ldr	r2, [pc, #80]	; (80018dc <_sbrk+0x5c>)
 800188a:	4b15      	ldr	r3, [pc, #84]	; (80018e0 <_sbrk+0x60>)
 800188c:	1ad3      	subs	r3, r2, r3
 800188e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001890:	697b      	ldr	r3, [r7, #20]
 8001892:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001894:	4b13      	ldr	r3, [pc, #76]	; (80018e4 <_sbrk+0x64>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	2b00      	cmp	r3, #0
 800189a:	d102      	bne.n	80018a2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800189c:	4b11      	ldr	r3, [pc, #68]	; (80018e4 <_sbrk+0x64>)
 800189e:	4a12      	ldr	r2, [pc, #72]	; (80018e8 <_sbrk+0x68>)
 80018a0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80018a2:	4b10      	ldr	r3, [pc, #64]	; (80018e4 <_sbrk+0x64>)
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4413      	add	r3, r2
 80018aa:	693a      	ldr	r2, [r7, #16]
 80018ac:	429a      	cmp	r2, r3
 80018ae:	d207      	bcs.n	80018c0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80018b0:	f002 fb26 	bl	8003f00 <__errno>
 80018b4:	4603      	mov	r3, r0
 80018b6:	220c      	movs	r2, #12
 80018b8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80018ba:	f04f 33ff 	mov.w	r3, #4294967295
 80018be:	e009      	b.n	80018d4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80018c0:	4b08      	ldr	r3, [pc, #32]	; (80018e4 <_sbrk+0x64>)
 80018c2:	681b      	ldr	r3, [r3, #0]
 80018c4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80018c6:	4b07      	ldr	r3, [pc, #28]	; (80018e4 <_sbrk+0x64>)
 80018c8:	681a      	ldr	r2, [r3, #0]
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	4413      	add	r3, r2
 80018ce:	4a05      	ldr	r2, [pc, #20]	; (80018e4 <_sbrk+0x64>)
 80018d0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80018d2:	68fb      	ldr	r3, [r7, #12]
}
 80018d4:	4618      	mov	r0, r3
 80018d6:	3718      	adds	r7, #24
 80018d8:	46bd      	mov	sp, r7
 80018da:	bd80      	pop	{r7, pc}
 80018dc:	20030000 	.word	0x20030000
 80018e0:	00000400 	.word	0x00000400
 80018e4:	200008b8 	.word	0x200008b8
 80018e8:	200009d0 	.word	0x200009d0

080018ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80018ec:	b480      	push	{r7}
 80018ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <SystemInit+0x20>)
 80018f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80018f6:	4a05      	ldr	r2, [pc, #20]	; (800190c <SystemInit+0x20>)
 80018f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80018fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001900:	bf00      	nop
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	e000ed00 	.word	0xe000ed00

08001910 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001948 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001914:	480d      	ldr	r0, [pc, #52]	; (800194c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001916:	490e      	ldr	r1, [pc, #56]	; (8001950 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001918:	4a0e      	ldr	r2, [pc, #56]	; (8001954 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800191a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800191c:	e002      	b.n	8001924 <LoopCopyDataInit>

0800191e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800191e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001922:	3304      	adds	r3, #4

08001924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001928:	d3f9      	bcc.n	800191e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800192a:	4a0b      	ldr	r2, [pc, #44]	; (8001958 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800192c:	4c0b      	ldr	r4, [pc, #44]	; (800195c <LoopFillZerobss+0x26>)
  movs r3, #0
 800192e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001930:	e001      	b.n	8001936 <LoopFillZerobss>

08001932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001934:	3204      	adds	r2, #4

08001936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001938:	d3fb      	bcc.n	8001932 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800193a:	f7ff ffd7 	bl	80018ec <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800193e:	f002 fae5 	bl	8003f0c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001942:	f7ff fac3 	bl	8000ecc <main>
  bx  lr    
 8001946:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001948:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 800194c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001950:	20000074 	.word	0x20000074
  ldr r2, =_sidata
 8001954:	08004b10 	.word	0x08004b10
  ldr r2, =_sbss
 8001958:	20000074 	.word	0x20000074
  ldr r4, =_ebss
 800195c:	200009cc 	.word	0x200009cc

08001960 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001960:	e7fe      	b.n	8001960 <ADC_IRQHandler>
	...

08001964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001968:	4b0e      	ldr	r3, [pc, #56]	; (80019a4 <HAL_Init+0x40>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a0d      	ldr	r2, [pc, #52]	; (80019a4 <HAL_Init+0x40>)
 800196e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001974:	4b0b      	ldr	r3, [pc, #44]	; (80019a4 <HAL_Init+0x40>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	4a0a      	ldr	r2, [pc, #40]	; (80019a4 <HAL_Init+0x40>)
 800197a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800197e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001980:	4b08      	ldr	r3, [pc, #32]	; (80019a4 <HAL_Init+0x40>)
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	4a07      	ldr	r2, [pc, #28]	; (80019a4 <HAL_Init+0x40>)
 8001986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800198a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800198c:	2003      	movs	r0, #3
 800198e:	f000 f94f 	bl	8001c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001992:	200f      	movs	r0, #15
 8001994:	f000 f808 	bl	80019a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001998:	f7ff fe12 	bl	80015c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800199c:	2300      	movs	r3, #0
}
 800199e:	4618      	mov	r0, r3
 80019a0:	bd80      	pop	{r7, pc}
 80019a2:	bf00      	nop
 80019a4:	40023c00 	.word	0x40023c00

080019a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80019a8:	b580      	push	{r7, lr}
 80019aa:	b082      	sub	sp, #8
 80019ac:	af00      	add	r7, sp, #0
 80019ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80019b0:	4b12      	ldr	r3, [pc, #72]	; (80019fc <HAL_InitTick+0x54>)
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b12      	ldr	r3, [pc, #72]	; (8001a00 <HAL_InitTick+0x58>)
 80019b6:	781b      	ldrb	r3, [r3, #0]
 80019b8:	4619      	mov	r1, r3
 80019ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80019be:	fbb3 f3f1 	udiv	r3, r3, r1
 80019c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80019c6:	4618      	mov	r0, r3
 80019c8:	f000 f967 	bl	8001c9a <HAL_SYSTICK_Config>
 80019cc:	4603      	mov	r3, r0
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e00e      	b.n	80019f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2b0f      	cmp	r3, #15
 80019da:	d80a      	bhi.n	80019f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80019dc:	2200      	movs	r2, #0
 80019de:	6879      	ldr	r1, [r7, #4]
 80019e0:	f04f 30ff 	mov.w	r0, #4294967295
 80019e4:	f000 f92f 	bl	8001c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80019e8:	4a06      	ldr	r2, [pc, #24]	; (8001a04 <HAL_InitTick+0x5c>)
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
 80019f0:	e000      	b.n	80019f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80019f2:	2301      	movs	r3, #1
}
 80019f4:	4618      	mov	r0, r3
 80019f6:	3708      	adds	r7, #8
 80019f8:	46bd      	mov	sp, r7
 80019fa:	bd80      	pop	{r7, pc}
 80019fc:	20000004 	.word	0x20000004
 8001a00:	2000000c 	.word	0x2000000c
 8001a04:	20000008 	.word	0x20000008

08001a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a0c:	4b06      	ldr	r3, [pc, #24]	; (8001a28 <HAL_IncTick+0x20>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	461a      	mov	r2, r3
 8001a12:	4b06      	ldr	r3, [pc, #24]	; (8001a2c <HAL_IncTick+0x24>)
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	4413      	add	r3, r2
 8001a18:	4a04      	ldr	r2, [pc, #16]	; (8001a2c <HAL_IncTick+0x24>)
 8001a1a:	6013      	str	r3, [r2, #0]
}
 8001a1c:	bf00      	nop
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	2000000c 	.word	0x2000000c
 8001a2c:	200009b8 	.word	0x200009b8

08001a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a30:	b480      	push	{r7}
 8001a32:	af00      	add	r7, sp, #0
  return uwTick;
 8001a34:	4b03      	ldr	r3, [pc, #12]	; (8001a44 <HAL_GetTick+0x14>)
 8001a36:	681b      	ldr	r3, [r3, #0]
}
 8001a38:	4618      	mov	r0, r3
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a40:	4770      	bx	lr
 8001a42:	bf00      	nop
 8001a44:	200009b8 	.word	0x200009b8

08001a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001a48:	b580      	push	{r7, lr}
 8001a4a:	b084      	sub	sp, #16
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001a50:	f7ff ffee 	bl	8001a30 <HAL_GetTick>
 8001a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001a5a:	68fb      	ldr	r3, [r7, #12]
 8001a5c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a60:	d005      	beq.n	8001a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001a62:	4b0a      	ldr	r3, [pc, #40]	; (8001a8c <HAL_Delay+0x44>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	4413      	add	r3, r2
 8001a6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001a6e:	bf00      	nop
 8001a70:	f7ff ffde 	bl	8001a30 <HAL_GetTick>
 8001a74:	4602      	mov	r2, r0
 8001a76:	68bb      	ldr	r3, [r7, #8]
 8001a78:	1ad3      	subs	r3, r2, r3
 8001a7a:	68fa      	ldr	r2, [r7, #12]
 8001a7c:	429a      	cmp	r2, r3
 8001a7e:	d8f7      	bhi.n	8001a70 <HAL_Delay+0x28>
  {
  }
}
 8001a80:	bf00      	nop
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	2000000c 	.word	0x2000000c

08001a90 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b085      	sub	sp, #20
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	f003 0307 	and.w	r3, r3, #7
 8001a9e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa0:	4b0c      	ldr	r3, [pc, #48]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001aa2:	68db      	ldr	r3, [r3, #12]
 8001aa4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aa6:	68ba      	ldr	r2, [r7, #8]
 8001aa8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001aac:	4013      	ands	r3, r2
 8001aae:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ab4:	68bb      	ldr	r3, [r7, #8]
 8001ab6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ab8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001abc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ac0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001ac2:	4a04      	ldr	r2, [pc, #16]	; (8001ad4 <__NVIC_SetPriorityGrouping+0x44>)
 8001ac4:	68bb      	ldr	r3, [r7, #8]
 8001ac6:	60d3      	str	r3, [r2, #12]
}
 8001ac8:	bf00      	nop
 8001aca:	3714      	adds	r7, #20
 8001acc:	46bd      	mov	sp, r7
 8001ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ad2:	4770      	bx	lr
 8001ad4:	e000ed00 	.word	0xe000ed00

08001ad8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ad8:	b480      	push	{r7}
 8001ada:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001adc:	4b04      	ldr	r3, [pc, #16]	; (8001af0 <__NVIC_GetPriorityGrouping+0x18>)
 8001ade:	68db      	ldr	r3, [r3, #12]
 8001ae0:	0a1b      	lsrs	r3, r3, #8
 8001ae2:	f003 0307 	and.w	r3, r3, #7
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aee:	4770      	bx	lr
 8001af0:	e000ed00 	.word	0xe000ed00

08001af4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001af4:	b480      	push	{r7}
 8001af6:	b083      	sub	sp, #12
 8001af8:	af00      	add	r7, sp, #0
 8001afa:	4603      	mov	r3, r0
 8001afc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001afe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	db0b      	blt.n	8001b1e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	f003 021f 	and.w	r2, r3, #31
 8001b0c:	4907      	ldr	r1, [pc, #28]	; (8001b2c <__NVIC_EnableIRQ+0x38>)
 8001b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b12:	095b      	lsrs	r3, r3, #5
 8001b14:	2001      	movs	r0, #1
 8001b16:	fa00 f202 	lsl.w	r2, r0, r2
 8001b1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b1e:	bf00      	nop
 8001b20:	370c      	adds	r7, #12
 8001b22:	46bd      	mov	sp, r7
 8001b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b28:	4770      	bx	lr
 8001b2a:	bf00      	nop
 8001b2c:	e000e100 	.word	0xe000e100

08001b30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b30:	b480      	push	{r7}
 8001b32:	b083      	sub	sp, #12
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	db0a      	blt.n	8001b5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b44:	683b      	ldr	r3, [r7, #0]
 8001b46:	b2da      	uxtb	r2, r3
 8001b48:	490c      	ldr	r1, [pc, #48]	; (8001b7c <__NVIC_SetPriority+0x4c>)
 8001b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4e:	0112      	lsls	r2, r2, #4
 8001b50:	b2d2      	uxtb	r2, r2
 8001b52:	440b      	add	r3, r1
 8001b54:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b58:	e00a      	b.n	8001b70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5a:	683b      	ldr	r3, [r7, #0]
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4908      	ldr	r1, [pc, #32]	; (8001b80 <__NVIC_SetPriority+0x50>)
 8001b60:	79fb      	ldrb	r3, [r7, #7]
 8001b62:	f003 030f 	and.w	r3, r3, #15
 8001b66:	3b04      	subs	r3, #4
 8001b68:	0112      	lsls	r2, r2, #4
 8001b6a:	b2d2      	uxtb	r2, r2
 8001b6c:	440b      	add	r3, r1
 8001b6e:	761a      	strb	r2, [r3, #24]
}
 8001b70:	bf00      	nop
 8001b72:	370c      	adds	r7, #12
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr
 8001b7c:	e000e100 	.word	0xe000e100
 8001b80:	e000ed00 	.word	0xe000ed00

08001b84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b84:	b480      	push	{r7}
 8001b86:	b089      	sub	sp, #36	; 0x24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	60f8      	str	r0, [r7, #12]
 8001b8c:	60b9      	str	r1, [r7, #8]
 8001b8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 0307 	and.w	r3, r3, #7
 8001b96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b98:	69fb      	ldr	r3, [r7, #28]
 8001b9a:	f1c3 0307 	rsb	r3, r3, #7
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	bf28      	it	cs
 8001ba2:	2304      	movcs	r3, #4
 8001ba4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ba6:	69fb      	ldr	r3, [r7, #28]
 8001ba8:	3304      	adds	r3, #4
 8001baa:	2b06      	cmp	r3, #6
 8001bac:	d902      	bls.n	8001bb4 <NVIC_EncodePriority+0x30>
 8001bae:	69fb      	ldr	r3, [r7, #28]
 8001bb0:	3b03      	subs	r3, #3
 8001bb2:	e000      	b.n	8001bb6 <NVIC_EncodePriority+0x32>
 8001bb4:	2300      	movs	r3, #0
 8001bb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bb8:	f04f 32ff 	mov.w	r2, #4294967295
 8001bbc:	69bb      	ldr	r3, [r7, #24]
 8001bbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	68bb      	ldr	r3, [r7, #8]
 8001bc6:	401a      	ands	r2, r3
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bcc:	f04f 31ff 	mov.w	r1, #4294967295
 8001bd0:	697b      	ldr	r3, [r7, #20]
 8001bd2:	fa01 f303 	lsl.w	r3, r1, r3
 8001bd6:	43d9      	mvns	r1, r3
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bdc:	4313      	orrs	r3, r2
         );
}
 8001bde:	4618      	mov	r0, r3
 8001be0:	3724      	adds	r7, #36	; 0x24
 8001be2:	46bd      	mov	sp, r7
 8001be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be8:	4770      	bx	lr
	...

08001bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001bfc:	d301      	bcc.n	8001c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00f      	b.n	8001c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c02:	4a0a      	ldr	r2, [pc, #40]	; (8001c2c <SysTick_Config+0x40>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0a:	210f      	movs	r1, #15
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295
 8001c10:	f7ff ff8e 	bl	8001b30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c14:	4b05      	ldr	r3, [pc, #20]	; (8001c2c <SysTick_Config+0x40>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1a:	4b04      	ldr	r3, [pc, #16]	; (8001c2c <SysTick_Config+0x40>)
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	e000e010 	.word	0xe000e010

08001c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff29 	bl	8001a90 <__NVIC_SetPriorityGrouping>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c58:	f7ff ff3e 	bl	8001ad8 <__NVIC_GetPriorityGrouping>
 8001c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	6978      	ldr	r0, [r7, #20]
 8001c64:	f7ff ff8e 	bl	8001b84 <NVIC_EncodePriority>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff5d 	bl	8001b30 <__NVIC_SetPriority>
}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff31 	bl	8001af4 <__NVIC_EnableIRQ>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ffa2 	bl	8001bec <SysTick_Config>
 8001ca8:	4603      	mov	r3, r0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b089      	sub	sp, #36	; 0x24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cc6:	2300      	movs	r3, #0
 8001cc8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001cca:	2300      	movs	r3, #0
 8001ccc:	61fb      	str	r3, [r7, #28]
 8001cce:	e177      	b.n	8001fc0 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001cd0:	2201      	movs	r2, #1
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	697a      	ldr	r2, [r7, #20]
 8001ce0:	4013      	ands	r3, r2
 8001ce2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001ce4:	693a      	ldr	r2, [r7, #16]
 8001ce6:	697b      	ldr	r3, [r7, #20]
 8001ce8:	429a      	cmp	r2, r3
 8001cea:	f040 8166 	bne.w	8001fba <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001cee:	683b      	ldr	r3, [r7, #0]
 8001cf0:	685b      	ldr	r3, [r3, #4]
 8001cf2:	f003 0303 	and.w	r3, r3, #3
 8001cf6:	2b01      	cmp	r3, #1
 8001cf8:	d005      	beq.n	8001d06 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cfa:	683b      	ldr	r3, [r7, #0]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d02:	2b02      	cmp	r3, #2
 8001d04:	d130      	bne.n	8001d68 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	689b      	ldr	r3, [r3, #8]
 8001d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d0c:	69fb      	ldr	r3, [r7, #28]
 8001d0e:	005b      	lsls	r3, r3, #1
 8001d10:	2203      	movs	r2, #3
 8001d12:	fa02 f303 	lsl.w	r3, r2, r3
 8001d16:	43db      	mvns	r3, r3
 8001d18:	69ba      	ldr	r2, [r7, #24]
 8001d1a:	4013      	ands	r3, r2
 8001d1c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d1e:	683b      	ldr	r3, [r7, #0]
 8001d20:	68da      	ldr	r2, [r3, #12]
 8001d22:	69fb      	ldr	r3, [r7, #28]
 8001d24:	005b      	lsls	r3, r3, #1
 8001d26:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4313      	orrs	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	69ba      	ldr	r2, [r7, #24]
 8001d34:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	685b      	ldr	r3, [r3, #4]
 8001d3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d3c:	2201      	movs	r2, #1
 8001d3e:	69fb      	ldr	r3, [r7, #28]
 8001d40:	fa02 f303 	lsl.w	r3, r2, r3
 8001d44:	43db      	mvns	r3, r3
 8001d46:	69ba      	ldr	r2, [r7, #24]
 8001d48:	4013      	ands	r3, r2
 8001d4a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 0201 	and.w	r2, r3, #1
 8001d56:	69fb      	ldr	r3, [r7, #28]
 8001d58:	fa02 f303 	lsl.w	r3, r2, r3
 8001d5c:	69ba      	ldr	r2, [r7, #24]
 8001d5e:	4313      	orrs	r3, r2
 8001d60:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	69ba      	ldr	r2, [r7, #24]
 8001d66:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001d68:	683b      	ldr	r3, [r7, #0]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f003 0303 	and.w	r3, r3, #3
 8001d70:	2b03      	cmp	r3, #3
 8001d72:	d017      	beq.n	8001da4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001d7a:	69fb      	ldr	r3, [r7, #28]
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	2203      	movs	r2, #3
 8001d80:	fa02 f303 	lsl.w	r3, r2, r3
 8001d84:	43db      	mvns	r3, r3
 8001d86:	69ba      	ldr	r2, [r7, #24]
 8001d88:	4013      	ands	r3, r2
 8001d8a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001d8c:	683b      	ldr	r3, [r7, #0]
 8001d8e:	689a      	ldr	r2, [r3, #8]
 8001d90:	69fb      	ldr	r3, [r7, #28]
 8001d92:	005b      	lsls	r3, r3, #1
 8001d94:	fa02 f303 	lsl.w	r3, r2, r3
 8001d98:	69ba      	ldr	r2, [r7, #24]
 8001d9a:	4313      	orrs	r3, r2
 8001d9c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	69ba      	ldr	r2, [r7, #24]
 8001da2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f003 0303 	and.w	r3, r3, #3
 8001dac:	2b02      	cmp	r3, #2
 8001dae:	d123      	bne.n	8001df8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001db0:	69fb      	ldr	r3, [r7, #28]
 8001db2:	08da      	lsrs	r2, r3, #3
 8001db4:	687b      	ldr	r3, [r7, #4]
 8001db6:	3208      	adds	r2, #8
 8001db8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001dbc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001dbe:	69fb      	ldr	r3, [r7, #28]
 8001dc0:	f003 0307 	and.w	r3, r3, #7
 8001dc4:	009b      	lsls	r3, r3, #2
 8001dc6:	220f      	movs	r2, #15
 8001dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dcc:	43db      	mvns	r3, r3
 8001dce:	69ba      	ldr	r2, [r7, #24]
 8001dd0:	4013      	ands	r3, r2
 8001dd2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001dd4:	683b      	ldr	r3, [r7, #0]
 8001dd6:	691a      	ldr	r2, [r3, #16]
 8001dd8:	69fb      	ldr	r3, [r7, #28]
 8001dda:	f003 0307 	and.w	r3, r3, #7
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	fa02 f303 	lsl.w	r3, r2, r3
 8001de4:	69ba      	ldr	r2, [r7, #24]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	08da      	lsrs	r2, r3, #3
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3208      	adds	r2, #8
 8001df2:	69b9      	ldr	r1, [r7, #24]
 8001df4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001dfe:	69fb      	ldr	r3, [r7, #28]
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	2203      	movs	r2, #3
 8001e04:	fa02 f303 	lsl.w	r3, r2, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4013      	ands	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	685b      	ldr	r3, [r3, #4]
 8001e14:	f003 0203 	and.w	r2, r3, #3
 8001e18:	69fb      	ldr	r3, [r7, #28]
 8001e1a:	005b      	lsls	r3, r3, #1
 8001e1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e20:	69ba      	ldr	r2, [r7, #24]
 8001e22:	4313      	orrs	r3, r2
 8001e24:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	685b      	ldr	r3, [r3, #4]
 8001e30:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e34:	2b00      	cmp	r3, #0
 8001e36:	f000 80c0 	beq.w	8001fba <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e3a:	2300      	movs	r3, #0
 8001e3c:	60fb      	str	r3, [r7, #12]
 8001e3e:	4b66      	ldr	r3, [pc, #408]	; (8001fd8 <HAL_GPIO_Init+0x324>)
 8001e40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e42:	4a65      	ldr	r2, [pc, #404]	; (8001fd8 <HAL_GPIO_Init+0x324>)
 8001e44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e48:	6453      	str	r3, [r2, #68]	; 0x44
 8001e4a:	4b63      	ldr	r3, [pc, #396]	; (8001fd8 <HAL_GPIO_Init+0x324>)
 8001e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e52:	60fb      	str	r3, [r7, #12]
 8001e54:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e56:	4a61      	ldr	r2, [pc, #388]	; (8001fdc <HAL_GPIO_Init+0x328>)
 8001e58:	69fb      	ldr	r3, [r7, #28]
 8001e5a:	089b      	lsrs	r3, r3, #2
 8001e5c:	3302      	adds	r3, #2
 8001e5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e62:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e64:	69fb      	ldr	r3, [r7, #28]
 8001e66:	f003 0303 	and.w	r3, r3, #3
 8001e6a:	009b      	lsls	r3, r3, #2
 8001e6c:	220f      	movs	r2, #15
 8001e6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e72:	43db      	mvns	r3, r3
 8001e74:	69ba      	ldr	r2, [r7, #24]
 8001e76:	4013      	ands	r3, r2
 8001e78:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	4a58      	ldr	r2, [pc, #352]	; (8001fe0 <HAL_GPIO_Init+0x32c>)
 8001e7e:	4293      	cmp	r3, r2
 8001e80:	d037      	beq.n	8001ef2 <HAL_GPIO_Init+0x23e>
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	4a57      	ldr	r2, [pc, #348]	; (8001fe4 <HAL_GPIO_Init+0x330>)
 8001e86:	4293      	cmp	r3, r2
 8001e88:	d031      	beq.n	8001eee <HAL_GPIO_Init+0x23a>
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	4a56      	ldr	r2, [pc, #344]	; (8001fe8 <HAL_GPIO_Init+0x334>)
 8001e8e:	4293      	cmp	r3, r2
 8001e90:	d02b      	beq.n	8001eea <HAL_GPIO_Init+0x236>
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	4a55      	ldr	r2, [pc, #340]	; (8001fec <HAL_GPIO_Init+0x338>)
 8001e96:	4293      	cmp	r3, r2
 8001e98:	d025      	beq.n	8001ee6 <HAL_GPIO_Init+0x232>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	4a54      	ldr	r2, [pc, #336]	; (8001ff0 <HAL_GPIO_Init+0x33c>)
 8001e9e:	4293      	cmp	r3, r2
 8001ea0:	d01f      	beq.n	8001ee2 <HAL_GPIO_Init+0x22e>
 8001ea2:	687b      	ldr	r3, [r7, #4]
 8001ea4:	4a53      	ldr	r2, [pc, #332]	; (8001ff4 <HAL_GPIO_Init+0x340>)
 8001ea6:	4293      	cmp	r3, r2
 8001ea8:	d019      	beq.n	8001ede <HAL_GPIO_Init+0x22a>
 8001eaa:	687b      	ldr	r3, [r7, #4]
 8001eac:	4a52      	ldr	r2, [pc, #328]	; (8001ff8 <HAL_GPIO_Init+0x344>)
 8001eae:	4293      	cmp	r3, r2
 8001eb0:	d013      	beq.n	8001eda <HAL_GPIO_Init+0x226>
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a51      	ldr	r2, [pc, #324]	; (8001ffc <HAL_GPIO_Init+0x348>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d00d      	beq.n	8001ed6 <HAL_GPIO_Init+0x222>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a50      	ldr	r2, [pc, #320]	; (8002000 <HAL_GPIO_Init+0x34c>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d007      	beq.n	8001ed2 <HAL_GPIO_Init+0x21e>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a4f      	ldr	r2, [pc, #316]	; (8002004 <HAL_GPIO_Init+0x350>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d101      	bne.n	8001ece <HAL_GPIO_Init+0x21a>
 8001eca:	2309      	movs	r3, #9
 8001ecc:	e012      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001ece:	230a      	movs	r3, #10
 8001ed0:	e010      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001ed2:	2308      	movs	r3, #8
 8001ed4:	e00e      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001ed6:	2307      	movs	r3, #7
 8001ed8:	e00c      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001eda:	2306      	movs	r3, #6
 8001edc:	e00a      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001ede:	2305      	movs	r3, #5
 8001ee0:	e008      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001ee2:	2304      	movs	r3, #4
 8001ee4:	e006      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001ee6:	2303      	movs	r3, #3
 8001ee8:	e004      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001eea:	2302      	movs	r3, #2
 8001eec:	e002      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001eee:	2301      	movs	r3, #1
 8001ef0:	e000      	b.n	8001ef4 <HAL_GPIO_Init+0x240>
 8001ef2:	2300      	movs	r3, #0
 8001ef4:	69fa      	ldr	r2, [r7, #28]
 8001ef6:	f002 0203 	and.w	r2, r2, #3
 8001efa:	0092      	lsls	r2, r2, #2
 8001efc:	4093      	lsls	r3, r2
 8001efe:	69ba      	ldr	r2, [r7, #24]
 8001f00:	4313      	orrs	r3, r2
 8001f02:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f04:	4935      	ldr	r1, [pc, #212]	; (8001fdc <HAL_GPIO_Init+0x328>)
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	089b      	lsrs	r3, r3, #2
 8001f0a:	3302      	adds	r3, #2
 8001f0c:	69ba      	ldr	r2, [r7, #24]
 8001f0e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f12:	4b3d      	ldr	r3, [pc, #244]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	43db      	mvns	r3, r3
 8001f1c:	69ba      	ldr	r2, [r7, #24]
 8001f1e:	4013      	ands	r3, r2
 8001f20:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f22:	683b      	ldr	r3, [r7, #0]
 8001f24:	685b      	ldr	r3, [r3, #4]
 8001f26:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d003      	beq.n	8001f36 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001f2e:	69ba      	ldr	r2, [r7, #24]
 8001f30:	693b      	ldr	r3, [r7, #16]
 8001f32:	4313      	orrs	r3, r2
 8001f34:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001f36:	4a34      	ldr	r2, [pc, #208]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001f3c:	4b32      	ldr	r3, [pc, #200]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001f3e:	685b      	ldr	r3, [r3, #4]
 8001f40:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f42:	693b      	ldr	r3, [r7, #16]
 8001f44:	43db      	mvns	r3, r3
 8001f46:	69ba      	ldr	r2, [r7, #24]
 8001f48:	4013      	ands	r3, r2
 8001f4a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f4c:	683b      	ldr	r3, [r7, #0]
 8001f4e:	685b      	ldr	r3, [r3, #4]
 8001f50:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d003      	beq.n	8001f60 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001f58:	69ba      	ldr	r2, [r7, #24]
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	4313      	orrs	r3, r2
 8001f5e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f60:	4a29      	ldr	r2, [pc, #164]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001f62:	69bb      	ldr	r3, [r7, #24]
 8001f64:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f66:	4b28      	ldr	r3, [pc, #160]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001f68:	689b      	ldr	r3, [r3, #8]
 8001f6a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f6c:	693b      	ldr	r3, [r7, #16]
 8001f6e:	43db      	mvns	r3, r3
 8001f70:	69ba      	ldr	r2, [r7, #24]
 8001f72:	4013      	ands	r3, r2
 8001f74:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f76:	683b      	ldr	r3, [r7, #0]
 8001f78:	685b      	ldr	r3, [r3, #4]
 8001f7a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d003      	beq.n	8001f8a <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001f82:	69ba      	ldr	r2, [r7, #24]
 8001f84:	693b      	ldr	r3, [r7, #16]
 8001f86:	4313      	orrs	r3, r2
 8001f88:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f8a:	4a1f      	ldr	r2, [pc, #124]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f90:	4b1d      	ldr	r3, [pc, #116]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001f92:	68db      	ldr	r3, [r3, #12]
 8001f94:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f96:	693b      	ldr	r3, [r7, #16]
 8001f98:	43db      	mvns	r3, r3
 8001f9a:	69ba      	ldr	r2, [r7, #24]
 8001f9c:	4013      	ands	r3, r2
 8001f9e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	685b      	ldr	r3, [r3, #4]
 8001fa4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001fa8:	2b00      	cmp	r3, #0
 8001faa:	d003      	beq.n	8001fb4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001fac:	69ba      	ldr	r2, [r7, #24]
 8001fae:	693b      	ldr	r3, [r7, #16]
 8001fb0:	4313      	orrs	r3, r2
 8001fb2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001fb4:	4a14      	ldr	r2, [pc, #80]	; (8002008 <HAL_GPIO_Init+0x354>)
 8001fb6:	69bb      	ldr	r3, [r7, #24]
 8001fb8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	3301      	adds	r3, #1
 8001fbe:	61fb      	str	r3, [r7, #28]
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	2b0f      	cmp	r3, #15
 8001fc4:	f67f ae84 	bls.w	8001cd0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc8:	bf00      	nop
 8001fca:	bf00      	nop
 8001fcc:	3724      	adds	r7, #36	; 0x24
 8001fce:	46bd      	mov	sp, r7
 8001fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd4:	4770      	bx	lr
 8001fd6:	bf00      	nop
 8001fd8:	40023800 	.word	0x40023800
 8001fdc:	40013800 	.word	0x40013800
 8001fe0:	40020000 	.word	0x40020000
 8001fe4:	40020400 	.word	0x40020400
 8001fe8:	40020800 	.word	0x40020800
 8001fec:	40020c00 	.word	0x40020c00
 8001ff0:	40021000 	.word	0x40021000
 8001ff4:	40021400 	.word	0x40021400
 8001ff8:	40021800 	.word	0x40021800
 8001ffc:	40021c00 	.word	0x40021c00
 8002000:	40022000 	.word	0x40022000
 8002004:	40022400 	.word	0x40022400
 8002008:	40013c00 	.word	0x40013c00

0800200c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800200c:	b480      	push	{r7}
 800200e:	b083      	sub	sp, #12
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	460b      	mov	r3, r1
 8002016:	807b      	strh	r3, [r7, #2]
 8002018:	4613      	mov	r3, r2
 800201a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800201c:	787b      	ldrb	r3, [r7, #1]
 800201e:	2b00      	cmp	r3, #0
 8002020:	d003      	beq.n	800202a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002022:	887a      	ldrh	r2, [r7, #2]
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002028:	e003      	b.n	8002032 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800202a:	887b      	ldrh	r3, [r7, #2]
 800202c:	041a      	lsls	r2, r3, #16
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	619a      	str	r2, [r3, #24]
}
 8002032:	bf00      	nop
 8002034:	370c      	adds	r7, #12
 8002036:	46bd      	mov	sp, r7
 8002038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800203c:	4770      	bx	lr
	...

08002040 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b086      	sub	sp, #24
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d101      	bne.n	8002052 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800204e:	2301      	movs	r3, #1
 8002050:	e264      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	f003 0301 	and.w	r3, r3, #1
 800205a:	2b00      	cmp	r3, #0
 800205c:	d075      	beq.n	800214a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800205e:	4ba3      	ldr	r3, [pc, #652]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 8002060:	689b      	ldr	r3, [r3, #8]
 8002062:	f003 030c 	and.w	r3, r3, #12
 8002066:	2b04      	cmp	r3, #4
 8002068:	d00c      	beq.n	8002084 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800206a:	4ba0      	ldr	r3, [pc, #640]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 800206c:	689b      	ldr	r3, [r3, #8]
 800206e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002072:	2b08      	cmp	r3, #8
 8002074:	d112      	bne.n	800209c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002076:	4b9d      	ldr	r3, [pc, #628]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 8002078:	685b      	ldr	r3, [r3, #4]
 800207a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800207e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002082:	d10b      	bne.n	800209c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002084:	4b99      	ldr	r3, [pc, #612]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800208c:	2b00      	cmp	r3, #0
 800208e:	d05b      	beq.n	8002148 <HAL_RCC_OscConfig+0x108>
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	685b      	ldr	r3, [r3, #4]
 8002094:	2b00      	cmp	r3, #0
 8002096:	d157      	bne.n	8002148 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002098:	2301      	movs	r3, #1
 800209a:	e23f      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	685b      	ldr	r3, [r3, #4]
 80020a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80020a4:	d106      	bne.n	80020b4 <HAL_RCC_OscConfig+0x74>
 80020a6:	4b91      	ldr	r3, [pc, #580]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a90      	ldr	r2, [pc, #576]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80020ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e01d      	b.n	80020f0 <HAL_RCC_OscConfig+0xb0>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0x98>
 80020be:	4b8b      	ldr	r3, [pc, #556]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a8a      	ldr	r2, [pc, #552]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80020c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b88      	ldr	r3, [pc, #544]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a87      	ldr	r2, [pc, #540]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_OscConfig+0xb0>
 80020d8:	4b84      	ldr	r3, [pc, #528]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a83      	ldr	r2, [pc, #524]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80020de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b81      	ldr	r3, [pc, #516]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a80      	ldr	r2, [pc, #512]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80020ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80020ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d013      	beq.n	8002120 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff fc9a 	bl	8001a30 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002100:	f7ff fc96 	bl	8001a30 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	; 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e204      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	4b76      	ldr	r3, [pc, #472]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0xc0>
 800211e:	e014      	b.n	800214a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff fc86 	bl	8001a30 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002128:	f7ff fc82 	bl	8001a30 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	; 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e1f0      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213a:	4b6c      	ldr	r3, [pc, #432]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0xe8>
 8002146:	e000      	b.n	800214a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d063      	beq.n	800221e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002156:	4b65      	ldr	r3, [pc, #404]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 8002158:	689b      	ldr	r3, [r3, #8]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00b      	beq.n	800217a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002162:	4b62      	ldr	r3, [pc, #392]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 8002164:	689b      	ldr	r3, [r3, #8]
 8002166:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800216a:	2b08      	cmp	r3, #8
 800216c:	d11c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800216e:	4b5f      	ldr	r3, [pc, #380]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d116      	bne.n	80021a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217a:	4b5c      	ldr	r3, [pc, #368]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <HAL_RCC_OscConfig+0x152>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	68db      	ldr	r3, [r3, #12]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d001      	beq.n	8002192 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e1c4      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002192:	4b56      	ldr	r3, [pc, #344]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	691b      	ldr	r3, [r3, #16]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4952      	ldr	r1, [pc, #328]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a6:	e03a      	b.n	800221e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	68db      	ldr	r3, [r3, #12]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d020      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b0:	4b4f      	ldr	r3, [pc, #316]	; (80022f0 <HAL_RCC_OscConfig+0x2b0>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021b6:	f7ff fc3b 	bl	8001a30 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80021be:	f7ff fc37 	bl	8001a30 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e1a5      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d0:	4b46      	ldr	r3, [pc, #280]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021dc:	4b43      	ldr	r3, [pc, #268]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	691b      	ldr	r3, [r3, #16]
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4940      	ldr	r1, [pc, #256]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]
 80021f0:	e015      	b.n	800221e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f2:	4b3f      	ldr	r3, [pc, #252]	; (80022f0 <HAL_RCC_OscConfig+0x2b0>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80021f8:	f7ff fc1a 	bl	8001a30 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002200:	f7ff fc16 	bl	8001a30 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e184      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002212:	4b36      	ldr	r3, [pc, #216]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d030      	beq.n	800228c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	695b      	ldr	r3, [r3, #20]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d016      	beq.n	8002260 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002232:	4b30      	ldr	r3, [pc, #192]	; (80022f4 <HAL_RCC_OscConfig+0x2b4>)
 8002234:	2201      	movs	r2, #1
 8002236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002238:	f7ff fbfa 	bl	8001a30 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002240:	f7ff fbf6 	bl	8001a30 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e164      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002252:	4b26      	ldr	r3, [pc, #152]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 8002254:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x200>
 800225e:	e015      	b.n	800228c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002260:	4b24      	ldr	r3, [pc, #144]	; (80022f4 <HAL_RCC_OscConfig+0x2b4>)
 8002262:	2200      	movs	r2, #0
 8002264:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002266:	f7ff fbe3 	bl	8001a30 <HAL_GetTick>
 800226a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800226c:	e008      	b.n	8002280 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800226e:	f7ff fbdf 	bl	8001a30 <HAL_GetTick>
 8002272:	4602      	mov	r2, r0
 8002274:	693b      	ldr	r3, [r7, #16]
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	2b02      	cmp	r3, #2
 800227a:	d901      	bls.n	8002280 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800227c:	2303      	movs	r3, #3
 800227e:	e14d      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002280:	4b1a      	ldr	r3, [pc, #104]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 8002282:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002284:	f003 0302 	and.w	r3, r3, #2
 8002288:	2b00      	cmp	r3, #0
 800228a:	d1f0      	bne.n	800226e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	f003 0304 	and.w	r3, r3, #4
 8002294:	2b00      	cmp	r3, #0
 8002296:	f000 80a0 	beq.w	80023da <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800229a:	2300      	movs	r3, #0
 800229c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800229e:	4b13      	ldr	r3, [pc, #76]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80022a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d10f      	bne.n	80022ca <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	60bb      	str	r3, [r7, #8]
 80022ae:	4b0f      	ldr	r3, [pc, #60]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	4a0e      	ldr	r2, [pc, #56]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80022b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80022b8:	6413      	str	r3, [r2, #64]	; 0x40
 80022ba:	4b0c      	ldr	r3, [pc, #48]	; (80022ec <HAL_RCC_OscConfig+0x2ac>)
 80022bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80022c2:	60bb      	str	r3, [r7, #8]
 80022c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022c6:	2301      	movs	r3, #1
 80022c8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022ca:	4b0b      	ldr	r3, [pc, #44]	; (80022f8 <HAL_RCC_OscConfig+0x2b8>)
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d121      	bne.n	800231a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022d6:	4b08      	ldr	r3, [pc, #32]	; (80022f8 <HAL_RCC_OscConfig+0x2b8>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4a07      	ldr	r2, [pc, #28]	; (80022f8 <HAL_RCC_OscConfig+0x2b8>)
 80022dc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80022e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022e2:	f7ff fba5 	bl	8001a30 <HAL_GetTick>
 80022e6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022e8:	e011      	b.n	800230e <HAL_RCC_OscConfig+0x2ce>
 80022ea:	bf00      	nop
 80022ec:	40023800 	.word	0x40023800
 80022f0:	42470000 	.word	0x42470000
 80022f4:	42470e80 	.word	0x42470e80
 80022f8:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fc:	f7ff fb98 	bl	8001a30 <HAL_GetTick>
 8002300:	4602      	mov	r2, r0
 8002302:	693b      	ldr	r3, [r7, #16]
 8002304:	1ad3      	subs	r3, r2, r3
 8002306:	2b02      	cmp	r3, #2
 8002308:	d901      	bls.n	800230e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e106      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230e:	4b85      	ldr	r3, [pc, #532]	; (8002524 <HAL_RCC_OscConfig+0x4e4>)
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002316:	2b00      	cmp	r3, #0
 8002318:	d0f0      	beq.n	80022fc <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	689b      	ldr	r3, [r3, #8]
 800231e:	2b01      	cmp	r3, #1
 8002320:	d106      	bne.n	8002330 <HAL_RCC_OscConfig+0x2f0>
 8002322:	4b81      	ldr	r3, [pc, #516]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 8002324:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002326:	4a80      	ldr	r2, [pc, #512]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 8002328:	f043 0301 	orr.w	r3, r3, #1
 800232c:	6713      	str	r3, [r2, #112]	; 0x70
 800232e:	e01c      	b.n	800236a <HAL_RCC_OscConfig+0x32a>
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	689b      	ldr	r3, [r3, #8]
 8002334:	2b05      	cmp	r3, #5
 8002336:	d10c      	bne.n	8002352 <HAL_RCC_OscConfig+0x312>
 8002338:	4b7b      	ldr	r3, [pc, #492]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 800233a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800233c:	4a7a      	ldr	r2, [pc, #488]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 800233e:	f043 0304 	orr.w	r3, r3, #4
 8002342:	6713      	str	r3, [r2, #112]	; 0x70
 8002344:	4b78      	ldr	r3, [pc, #480]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 8002346:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002348:	4a77      	ldr	r2, [pc, #476]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 800234a:	f043 0301 	orr.w	r3, r3, #1
 800234e:	6713      	str	r3, [r2, #112]	; 0x70
 8002350:	e00b      	b.n	800236a <HAL_RCC_OscConfig+0x32a>
 8002352:	4b75      	ldr	r3, [pc, #468]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 8002354:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002356:	4a74      	ldr	r2, [pc, #464]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 8002358:	f023 0301 	bic.w	r3, r3, #1
 800235c:	6713      	str	r3, [r2, #112]	; 0x70
 800235e:	4b72      	ldr	r3, [pc, #456]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 8002360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002362:	4a71      	ldr	r2, [pc, #452]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 8002364:	f023 0304 	bic.w	r3, r3, #4
 8002368:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	689b      	ldr	r3, [r3, #8]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d015      	beq.n	800239e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002372:	f7ff fb5d 	bl	8001a30 <HAL_GetTick>
 8002376:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002378:	e00a      	b.n	8002390 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800237a:	f7ff fb59 	bl	8001a30 <HAL_GetTick>
 800237e:	4602      	mov	r2, r0
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	1ad3      	subs	r3, r2, r3
 8002384:	f241 3288 	movw	r2, #5000	; 0x1388
 8002388:	4293      	cmp	r3, r2
 800238a:	d901      	bls.n	8002390 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800238c:	2303      	movs	r3, #3
 800238e:	e0c5      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002390:	4b65      	ldr	r3, [pc, #404]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 8002392:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002394:	f003 0302 	and.w	r3, r3, #2
 8002398:	2b00      	cmp	r3, #0
 800239a:	d0ee      	beq.n	800237a <HAL_RCC_OscConfig+0x33a>
 800239c:	e014      	b.n	80023c8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800239e:	f7ff fb47 	bl	8001a30 <HAL_GetTick>
 80023a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023a4:	e00a      	b.n	80023bc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80023a6:	f7ff fb43 	bl	8001a30 <HAL_GetTick>
 80023aa:	4602      	mov	r2, r0
 80023ac:	693b      	ldr	r3, [r7, #16]
 80023ae:	1ad3      	subs	r3, r2, r3
 80023b0:	f241 3288 	movw	r2, #5000	; 0x1388
 80023b4:	4293      	cmp	r3, r2
 80023b6:	d901      	bls.n	80023bc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80023b8:	2303      	movs	r3, #3
 80023ba:	e0af      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023bc:	4b5a      	ldr	r3, [pc, #360]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 80023be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80023c0:	f003 0302 	and.w	r3, r3, #2
 80023c4:	2b00      	cmp	r3, #0
 80023c6:	d1ee      	bne.n	80023a6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80023c8:	7dfb      	ldrb	r3, [r7, #23]
 80023ca:	2b01      	cmp	r3, #1
 80023cc:	d105      	bne.n	80023da <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ce:	4b56      	ldr	r3, [pc, #344]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 80023d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023d2:	4a55      	ldr	r2, [pc, #340]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 80023d4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80023d8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	f000 809b 	beq.w	800251a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80023e4:	4b50      	ldr	r3, [pc, #320]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d05c      	beq.n	80024aa <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	699b      	ldr	r3, [r3, #24]
 80023f4:	2b02      	cmp	r3, #2
 80023f6:	d141      	bne.n	800247c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80023f8:	4b4c      	ldr	r3, [pc, #304]	; (800252c <HAL_RCC_OscConfig+0x4ec>)
 80023fa:	2200      	movs	r2, #0
 80023fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023fe:	f7ff fb17 	bl	8001a30 <HAL_GetTick>
 8002402:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002404:	e008      	b.n	8002418 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002406:	f7ff fb13 	bl	8001a30 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	693b      	ldr	r3, [r7, #16]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	2b02      	cmp	r3, #2
 8002412:	d901      	bls.n	8002418 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8002414:	2303      	movs	r3, #3
 8002416:	e081      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002418:	4b43      	ldr	r3, [pc, #268]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 800241a:	681b      	ldr	r3, [r3, #0]
 800241c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002420:	2b00      	cmp	r3, #0
 8002422:	d1f0      	bne.n	8002406 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	69da      	ldr	r2, [r3, #28]
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6a1b      	ldr	r3, [r3, #32]
 800242c:	431a      	orrs	r2, r3
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002432:	019b      	lsls	r3, r3, #6
 8002434:	431a      	orrs	r2, r3
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800243a:	085b      	lsrs	r3, r3, #1
 800243c:	3b01      	subs	r3, #1
 800243e:	041b      	lsls	r3, r3, #16
 8002440:	431a      	orrs	r2, r3
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002446:	061b      	lsls	r3, r3, #24
 8002448:	4937      	ldr	r1, [pc, #220]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800244e:	4b37      	ldr	r3, [pc, #220]	; (800252c <HAL_RCC_OscConfig+0x4ec>)
 8002450:	2201      	movs	r2, #1
 8002452:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002454:	f7ff faec 	bl	8001a30 <HAL_GetTick>
 8002458:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800245a:	e008      	b.n	800246e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800245c:	f7ff fae8 	bl	8001a30 <HAL_GetTick>
 8002460:	4602      	mov	r2, r0
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	1ad3      	subs	r3, r2, r3
 8002466:	2b02      	cmp	r3, #2
 8002468:	d901      	bls.n	800246e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800246a:	2303      	movs	r3, #3
 800246c:	e056      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800246e:	4b2e      	ldr	r3, [pc, #184]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002476:	2b00      	cmp	r3, #0
 8002478:	d0f0      	beq.n	800245c <HAL_RCC_OscConfig+0x41c>
 800247a:	e04e      	b.n	800251a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800247c:	4b2b      	ldr	r3, [pc, #172]	; (800252c <HAL_RCC_OscConfig+0x4ec>)
 800247e:	2200      	movs	r2, #0
 8002480:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002482:	f7ff fad5 	bl	8001a30 <HAL_GetTick>
 8002486:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002488:	e008      	b.n	800249c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800248a:	f7ff fad1 	bl	8001a30 <HAL_GetTick>
 800248e:	4602      	mov	r2, r0
 8002490:	693b      	ldr	r3, [r7, #16]
 8002492:	1ad3      	subs	r3, r2, r3
 8002494:	2b02      	cmp	r3, #2
 8002496:	d901      	bls.n	800249c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8002498:	2303      	movs	r3, #3
 800249a:	e03f      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800249c:	4b22      	ldr	r3, [pc, #136]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1f0      	bne.n	800248a <HAL_RCC_OscConfig+0x44a>
 80024a8:	e037      	b.n	800251a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	699b      	ldr	r3, [r3, #24]
 80024ae:	2b01      	cmp	r3, #1
 80024b0:	d101      	bne.n	80024b6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e032      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80024b6:	4b1c      	ldr	r3, [pc, #112]	; (8002528 <HAL_RCC_OscConfig+0x4e8>)
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	699b      	ldr	r3, [r3, #24]
 80024c0:	2b01      	cmp	r3, #1
 80024c2:	d028      	beq.n	8002516 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80024ce:	429a      	cmp	r2, r3
 80024d0:	d121      	bne.n	8002516 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024d2:	68fb      	ldr	r3, [r7, #12]
 80024d4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024dc:	429a      	cmp	r2, r3
 80024de:	d11a      	bne.n	8002516 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80024e0:	68fa      	ldr	r2, [r7, #12]
 80024e2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80024e6:	4013      	ands	r3, r2
 80024e8:	687a      	ldr	r2, [r7, #4]
 80024ea:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80024ec:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d111      	bne.n	8002516 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80024fc:	085b      	lsrs	r3, r3, #1
 80024fe:	3b01      	subs	r3, #1
 8002500:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002502:	429a      	cmp	r2, r3
 8002504:	d107      	bne.n	8002516 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002510:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002512:	429a      	cmp	r2, r3
 8002514:	d001      	beq.n	800251a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e000      	b.n	800251c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	3718      	adds	r7, #24
 8002520:	46bd      	mov	sp, r7
 8002522:	bd80      	pop	{r7, pc}
 8002524:	40007000 	.word	0x40007000
 8002528:	40023800 	.word	0x40023800
 800252c:	42470060 	.word	0x42470060

08002530 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b084      	sub	sp, #16
 8002534:	af00      	add	r7, sp, #0
 8002536:	6078      	str	r0, [r7, #4]
 8002538:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2b00      	cmp	r3, #0
 800253e:	d101      	bne.n	8002544 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002540:	2301      	movs	r3, #1
 8002542:	e0cc      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002544:	4b68      	ldr	r3, [pc, #416]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 030f 	and.w	r3, r3, #15
 800254c:	683a      	ldr	r2, [r7, #0]
 800254e:	429a      	cmp	r2, r3
 8002550:	d90c      	bls.n	800256c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002552:	4b65      	ldr	r3, [pc, #404]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002554:	683a      	ldr	r2, [r7, #0]
 8002556:	b2d2      	uxtb	r2, r2
 8002558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255a:	4b63      	ldr	r3, [pc, #396]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f003 030f 	and.w	r3, r3, #15
 8002562:	683a      	ldr	r2, [r7, #0]
 8002564:	429a      	cmp	r2, r3
 8002566:	d001      	beq.n	800256c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002568:	2301      	movs	r3, #1
 800256a:	e0b8      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	f003 0302 	and.w	r3, r3, #2
 8002574:	2b00      	cmp	r3, #0
 8002576:	d020      	beq.n	80025ba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	f003 0304 	and.w	r3, r3, #4
 8002580:	2b00      	cmp	r3, #0
 8002582:	d005      	beq.n	8002590 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002584:	4b59      	ldr	r3, [pc, #356]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002586:	689b      	ldr	r3, [r3, #8]
 8002588:	4a58      	ldr	r2, [pc, #352]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800258e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	681b      	ldr	r3, [r3, #0]
 8002594:	f003 0308 	and.w	r3, r3, #8
 8002598:	2b00      	cmp	r3, #0
 800259a:	d005      	beq.n	80025a8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800259c:	4b53      	ldr	r3, [pc, #332]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 800259e:	689b      	ldr	r3, [r3, #8]
 80025a0:	4a52      	ldr	r2, [pc, #328]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025a2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80025a6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a8:	4b50      	ldr	r3, [pc, #320]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	689b      	ldr	r3, [r3, #8]
 80025b4:	494d      	ldr	r1, [pc, #308]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	4313      	orrs	r3, r2
 80025b8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	f003 0301 	and.w	r3, r3, #1
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d044      	beq.n	8002650 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	685b      	ldr	r3, [r3, #4]
 80025ca:	2b01      	cmp	r3, #1
 80025cc:	d107      	bne.n	80025de <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025ce:	4b47      	ldr	r3, [pc, #284]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d119      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e07f      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	685b      	ldr	r3, [r3, #4]
 80025e2:	2b02      	cmp	r3, #2
 80025e4:	d003      	beq.n	80025ee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80025ea:	2b03      	cmp	r3, #3
 80025ec:	d107      	bne.n	80025fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025ee:	4b3f      	ldr	r3, [pc, #252]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d109      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e06f      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025fe:	4b3b      	ldr	r3, [pc, #236]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002600:	681b      	ldr	r3, [r3, #0]
 8002602:	f003 0302 	and.w	r3, r3, #2
 8002606:	2b00      	cmp	r3, #0
 8002608:	d101      	bne.n	800260e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800260a:	2301      	movs	r3, #1
 800260c:	e067      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800260e:	4b37      	ldr	r3, [pc, #220]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002610:	689b      	ldr	r3, [r3, #8]
 8002612:	f023 0203 	bic.w	r2, r3, #3
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	685b      	ldr	r3, [r3, #4]
 800261a:	4934      	ldr	r1, [pc, #208]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 800261c:	4313      	orrs	r3, r2
 800261e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002620:	f7ff fa06 	bl	8001a30 <HAL_GetTick>
 8002624:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002626:	e00a      	b.n	800263e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002628:	f7ff fa02 	bl	8001a30 <HAL_GetTick>
 800262c:	4602      	mov	r2, r0
 800262e:	68fb      	ldr	r3, [r7, #12]
 8002630:	1ad3      	subs	r3, r2, r3
 8002632:	f241 3288 	movw	r2, #5000	; 0x1388
 8002636:	4293      	cmp	r3, r2
 8002638:	d901      	bls.n	800263e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800263a:	2303      	movs	r3, #3
 800263c:	e04f      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800263e:	4b2b      	ldr	r3, [pc, #172]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002640:	689b      	ldr	r3, [r3, #8]
 8002642:	f003 020c 	and.w	r2, r3, #12
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	685b      	ldr	r3, [r3, #4]
 800264a:	009b      	lsls	r3, r3, #2
 800264c:	429a      	cmp	r2, r3
 800264e:	d1eb      	bne.n	8002628 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002650:	4b25      	ldr	r3, [pc, #148]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 030f 	and.w	r3, r3, #15
 8002658:	683a      	ldr	r2, [r7, #0]
 800265a:	429a      	cmp	r2, r3
 800265c:	d20c      	bcs.n	8002678 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800265e:	4b22      	ldr	r3, [pc, #136]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002660:	683a      	ldr	r2, [r7, #0]
 8002662:	b2d2      	uxtb	r2, r2
 8002664:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002666:	4b20      	ldr	r3, [pc, #128]	; (80026e8 <HAL_RCC_ClockConfig+0x1b8>)
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	f003 030f 	and.w	r3, r3, #15
 800266e:	683a      	ldr	r2, [r7, #0]
 8002670:	429a      	cmp	r2, r3
 8002672:	d001      	beq.n	8002678 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002674:	2301      	movs	r3, #1
 8002676:	e032      	b.n	80026de <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 0304 	and.w	r3, r3, #4
 8002680:	2b00      	cmp	r3, #0
 8002682:	d008      	beq.n	8002696 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002684:	4b19      	ldr	r3, [pc, #100]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002686:	689b      	ldr	r3, [r3, #8]
 8002688:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	68db      	ldr	r3, [r3, #12]
 8002690:	4916      	ldr	r1, [pc, #88]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 8002692:	4313      	orrs	r3, r2
 8002694:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f003 0308 	and.w	r3, r3, #8
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d009      	beq.n	80026b6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80026a2:	4b12      	ldr	r3, [pc, #72]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80026a4:	689b      	ldr	r3, [r3, #8]
 80026a6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	490e      	ldr	r1, [pc, #56]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80026b2:	4313      	orrs	r3, r2
 80026b4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80026b6:	f000 f821 	bl	80026fc <HAL_RCC_GetSysClockFreq>
 80026ba:	4602      	mov	r2, r0
 80026bc:	4b0b      	ldr	r3, [pc, #44]	; (80026ec <HAL_RCC_ClockConfig+0x1bc>)
 80026be:	689b      	ldr	r3, [r3, #8]
 80026c0:	091b      	lsrs	r3, r3, #4
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	490a      	ldr	r1, [pc, #40]	; (80026f0 <HAL_RCC_ClockConfig+0x1c0>)
 80026c8:	5ccb      	ldrb	r3, [r1, r3]
 80026ca:	fa22 f303 	lsr.w	r3, r2, r3
 80026ce:	4a09      	ldr	r2, [pc, #36]	; (80026f4 <HAL_RCC_ClockConfig+0x1c4>)
 80026d0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80026d2:	4b09      	ldr	r3, [pc, #36]	; (80026f8 <HAL_RCC_ClockConfig+0x1c8>)
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4618      	mov	r0, r3
 80026d8:	f7ff f966 	bl	80019a8 <HAL_InitTick>

  return HAL_OK;
 80026dc:	2300      	movs	r3, #0
}
 80026de:	4618      	mov	r0, r3
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
 80026e6:	bf00      	nop
 80026e8:	40023c00 	.word	0x40023c00
 80026ec:	40023800 	.word	0x40023800
 80026f0:	08004ab4 	.word	0x08004ab4
 80026f4:	20000004 	.word	0x20000004
 80026f8:	20000008 	.word	0x20000008

080026fc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026fc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002700:	b084      	sub	sp, #16
 8002702:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002704:	2300      	movs	r3, #0
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	2300      	movs	r3, #0
 800270a:	60fb      	str	r3, [r7, #12]
 800270c:	2300      	movs	r3, #0
 800270e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8002710:	2300      	movs	r3, #0
 8002712:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002714:	4b67      	ldr	r3, [pc, #412]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002716:	689b      	ldr	r3, [r3, #8]
 8002718:	f003 030c 	and.w	r3, r3, #12
 800271c:	2b08      	cmp	r3, #8
 800271e:	d00d      	beq.n	800273c <HAL_RCC_GetSysClockFreq+0x40>
 8002720:	2b08      	cmp	r3, #8
 8002722:	f200 80bd 	bhi.w	80028a0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002726:	2b00      	cmp	r3, #0
 8002728:	d002      	beq.n	8002730 <HAL_RCC_GetSysClockFreq+0x34>
 800272a:	2b04      	cmp	r3, #4
 800272c:	d003      	beq.n	8002736 <HAL_RCC_GetSysClockFreq+0x3a>
 800272e:	e0b7      	b.n	80028a0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002730:	4b61      	ldr	r3, [pc, #388]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002732:	60bb      	str	r3, [r7, #8]
       break;
 8002734:	e0b7      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002736:	4b61      	ldr	r3, [pc, #388]	; (80028bc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002738:	60bb      	str	r3, [r7, #8]
      break;
 800273a:	e0b4      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800273c:	4b5d      	ldr	r3, [pc, #372]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800273e:	685b      	ldr	r3, [r3, #4]
 8002740:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002744:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002746:	4b5b      	ldr	r3, [pc, #364]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d04d      	beq.n	80027ee <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002752:	4b58      	ldr	r3, [pc, #352]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002754:	685b      	ldr	r3, [r3, #4]
 8002756:	099b      	lsrs	r3, r3, #6
 8002758:	461a      	mov	r2, r3
 800275a:	f04f 0300 	mov.w	r3, #0
 800275e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002762:	f04f 0100 	mov.w	r1, #0
 8002766:	ea02 0800 	and.w	r8, r2, r0
 800276a:	ea03 0901 	and.w	r9, r3, r1
 800276e:	4640      	mov	r0, r8
 8002770:	4649      	mov	r1, r9
 8002772:	f04f 0200 	mov.w	r2, #0
 8002776:	f04f 0300 	mov.w	r3, #0
 800277a:	014b      	lsls	r3, r1, #5
 800277c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002780:	0142      	lsls	r2, r0, #5
 8002782:	4610      	mov	r0, r2
 8002784:	4619      	mov	r1, r3
 8002786:	ebb0 0008 	subs.w	r0, r0, r8
 800278a:	eb61 0109 	sbc.w	r1, r1, r9
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	018b      	lsls	r3, r1, #6
 8002798:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800279c:	0182      	lsls	r2, r0, #6
 800279e:	1a12      	subs	r2, r2, r0
 80027a0:	eb63 0301 	sbc.w	r3, r3, r1
 80027a4:	f04f 0000 	mov.w	r0, #0
 80027a8:	f04f 0100 	mov.w	r1, #0
 80027ac:	00d9      	lsls	r1, r3, #3
 80027ae:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80027b2:	00d0      	lsls	r0, r2, #3
 80027b4:	4602      	mov	r2, r0
 80027b6:	460b      	mov	r3, r1
 80027b8:	eb12 0208 	adds.w	r2, r2, r8
 80027bc:	eb43 0309 	adc.w	r3, r3, r9
 80027c0:	f04f 0000 	mov.w	r0, #0
 80027c4:	f04f 0100 	mov.w	r1, #0
 80027c8:	0259      	lsls	r1, r3, #9
 80027ca:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80027ce:	0250      	lsls	r0, r2, #9
 80027d0:	4602      	mov	r2, r0
 80027d2:	460b      	mov	r3, r1
 80027d4:	4610      	mov	r0, r2
 80027d6:	4619      	mov	r1, r3
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	461a      	mov	r2, r3
 80027dc:	f04f 0300 	mov.w	r3, #0
 80027e0:	f7fd fd5e 	bl	80002a0 <__aeabi_uldivmod>
 80027e4:	4602      	mov	r2, r0
 80027e6:	460b      	mov	r3, r1
 80027e8:	4613      	mov	r3, r2
 80027ea:	60fb      	str	r3, [r7, #12]
 80027ec:	e04a      	b.n	8002884 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80027ee:	4b31      	ldr	r3, [pc, #196]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	099b      	lsrs	r3, r3, #6
 80027f4:	461a      	mov	r2, r3
 80027f6:	f04f 0300 	mov.w	r3, #0
 80027fa:	f240 10ff 	movw	r0, #511	; 0x1ff
 80027fe:	f04f 0100 	mov.w	r1, #0
 8002802:	ea02 0400 	and.w	r4, r2, r0
 8002806:	ea03 0501 	and.w	r5, r3, r1
 800280a:	4620      	mov	r0, r4
 800280c:	4629      	mov	r1, r5
 800280e:	f04f 0200 	mov.w	r2, #0
 8002812:	f04f 0300 	mov.w	r3, #0
 8002816:	014b      	lsls	r3, r1, #5
 8002818:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800281c:	0142      	lsls	r2, r0, #5
 800281e:	4610      	mov	r0, r2
 8002820:	4619      	mov	r1, r3
 8002822:	1b00      	subs	r0, r0, r4
 8002824:	eb61 0105 	sbc.w	r1, r1, r5
 8002828:	f04f 0200 	mov.w	r2, #0
 800282c:	f04f 0300 	mov.w	r3, #0
 8002830:	018b      	lsls	r3, r1, #6
 8002832:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002836:	0182      	lsls	r2, r0, #6
 8002838:	1a12      	subs	r2, r2, r0
 800283a:	eb63 0301 	sbc.w	r3, r3, r1
 800283e:	f04f 0000 	mov.w	r0, #0
 8002842:	f04f 0100 	mov.w	r1, #0
 8002846:	00d9      	lsls	r1, r3, #3
 8002848:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800284c:	00d0      	lsls	r0, r2, #3
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	1912      	adds	r2, r2, r4
 8002854:	eb45 0303 	adc.w	r3, r5, r3
 8002858:	f04f 0000 	mov.w	r0, #0
 800285c:	f04f 0100 	mov.w	r1, #0
 8002860:	0299      	lsls	r1, r3, #10
 8002862:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002866:	0290      	lsls	r0, r2, #10
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4610      	mov	r0, r2
 800286e:	4619      	mov	r1, r3
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	461a      	mov	r2, r3
 8002874:	f04f 0300 	mov.w	r3, #0
 8002878:	f7fd fd12 	bl	80002a0 <__aeabi_uldivmod>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	4613      	mov	r3, r2
 8002882:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002884:	4b0b      	ldr	r3, [pc, #44]	; (80028b4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	0c1b      	lsrs	r3, r3, #16
 800288a:	f003 0303 	and.w	r3, r3, #3
 800288e:	3301      	adds	r3, #1
 8002890:	005b      	lsls	r3, r3, #1
 8002892:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8002894:	68fa      	ldr	r2, [r7, #12]
 8002896:	683b      	ldr	r3, [r7, #0]
 8002898:	fbb2 f3f3 	udiv	r3, r2, r3
 800289c:	60bb      	str	r3, [r7, #8]
      break;
 800289e:	e002      	b.n	80028a6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80028a0:	4b05      	ldr	r3, [pc, #20]	; (80028b8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80028a2:	60bb      	str	r3, [r7, #8]
      break;
 80028a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80028a6:	68bb      	ldr	r3, [r7, #8]
}
 80028a8:	4618      	mov	r0, r3
 80028aa:	3710      	adds	r7, #16
 80028ac:	46bd      	mov	sp, r7
 80028ae:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80028b2:	bf00      	nop
 80028b4:	40023800 	.word	0x40023800
 80028b8:	00f42400 	.word	0x00f42400
 80028bc:	007a1200 	.word	0x007a1200

080028c0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80028c0:	b480      	push	{r7}
 80028c2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80028c4:	4b03      	ldr	r3, [pc, #12]	; (80028d4 <HAL_RCC_GetHCLKFreq+0x14>)
 80028c6:	681b      	ldr	r3, [r3, #0]
}
 80028c8:	4618      	mov	r0, r3
 80028ca:	46bd      	mov	sp, r7
 80028cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028d0:	4770      	bx	lr
 80028d2:	bf00      	nop
 80028d4:	20000004 	.word	0x20000004

080028d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80028dc:	f7ff fff0 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 80028e0:	4602      	mov	r2, r0
 80028e2:	4b05      	ldr	r3, [pc, #20]	; (80028f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80028e4:	689b      	ldr	r3, [r3, #8]
 80028e6:	0a9b      	lsrs	r3, r3, #10
 80028e8:	f003 0307 	and.w	r3, r3, #7
 80028ec:	4903      	ldr	r1, [pc, #12]	; (80028fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80028ee:	5ccb      	ldrb	r3, [r1, r3]
 80028f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80028f4:	4618      	mov	r0, r3
 80028f6:	bd80      	pop	{r7, pc}
 80028f8:	40023800 	.word	0x40023800
 80028fc:	08004ac4 	.word	0x08004ac4

08002900 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002904:	f7ff ffdc 	bl	80028c0 <HAL_RCC_GetHCLKFreq>
 8002908:	4602      	mov	r2, r0
 800290a:	4b05      	ldr	r3, [pc, #20]	; (8002920 <HAL_RCC_GetPCLK2Freq+0x20>)
 800290c:	689b      	ldr	r3, [r3, #8]
 800290e:	0b5b      	lsrs	r3, r3, #13
 8002910:	f003 0307 	and.w	r3, r3, #7
 8002914:	4903      	ldr	r1, [pc, #12]	; (8002924 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002916:	5ccb      	ldrb	r3, [r1, r3]
 8002918:	fa22 f303 	lsr.w	r3, r2, r3
}
 800291c:	4618      	mov	r0, r3
 800291e:	bd80      	pop	{r7, pc}
 8002920:	40023800 	.word	0x40023800
 8002924:	08004ac4 	.word	0x08004ac4

08002928 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b082      	sub	sp, #8
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2b00      	cmp	r3, #0
 8002934:	d101      	bne.n	800293a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002936:	2301      	movs	r3, #1
 8002938:	e041      	b.n	80029be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002940:	b2db      	uxtb	r3, r3
 8002942:	2b00      	cmp	r3, #0
 8002944:	d106      	bne.n	8002954 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2200      	movs	r2, #0
 800294a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800294e:	6878      	ldr	r0, [r7, #4]
 8002950:	f7fe fe5e 	bl	8001610 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2202      	movs	r2, #2
 8002958:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681a      	ldr	r2, [r3, #0]
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	3304      	adds	r3, #4
 8002964:	4619      	mov	r1, r3
 8002966:	4610      	mov	r0, r2
 8002968:	f000 fd14 	bl	8003394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	2201      	movs	r2, #1
 8002978:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	2201      	movs	r2, #1
 8002980:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2201      	movs	r2, #1
 8002988:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	2201      	movs	r2, #1
 8002990:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	2201      	movs	r2, #1
 8002998:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2201      	movs	r2, #1
 80029a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	2201      	movs	r2, #1
 80029a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	2201      	movs	r2, #1
 80029b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	2201      	movs	r2, #1
 80029b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80029bc:	2300      	movs	r3, #0
}
 80029be:	4618      	mov	r0, r3
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}

080029c6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80029c6:	b580      	push	{r7, lr}
 80029c8:	b082      	sub	sp, #8
 80029ca:	af00      	add	r7, sp, #0
 80029cc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	2b00      	cmp	r3, #0
 80029d2:	d101      	bne.n	80029d8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80029d4:	2301      	movs	r3, #1
 80029d6:	e041      	b.n	8002a5c <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	2200      	movs	r2, #0
 80029e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f000 f839 	bl	8002a64 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2202      	movs	r2, #2
 80029f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	3304      	adds	r3, #4
 8002a02:	4619      	mov	r1, r3
 8002a04:	4610      	mov	r0, r2
 8002a06:	f000 fcc5 	bl	8003394 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2201      	movs	r2, #1
 8002a0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2201      	movs	r2, #1
 8002a16:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002a22:	687b      	ldr	r3, [r7, #4]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2201      	movs	r2, #1
 8002a2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a32:	687b      	ldr	r3, [r7, #4]
 8002a34:	2201      	movs	r2, #1
 8002a36:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	2201      	movs	r2, #1
 8002a3e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2201      	movs	r2, #1
 8002a46:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	2201      	movs	r2, #1
 8002a4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	2201      	movs	r2, #1
 8002a56:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	3708      	adds	r7, #8
 8002a60:	46bd      	mov	sp, r7
 8002a62:	bd80      	pop	{r7, pc}

08002a64 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b083      	sub	sp, #12
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002a6c:	bf00      	nop
 8002a6e:	370c      	adds	r7, #12
 8002a70:	46bd      	mov	sp, r7
 8002a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a76:	4770      	bx	lr

08002a78 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002a78:	b580      	push	{r7, lr}
 8002a7a:	b084      	sub	sp, #16
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	6078      	str	r0, [r7, #4]
 8002a80:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002a82:	2300      	movs	r3, #0
 8002a84:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002a86:	683b      	ldr	r3, [r7, #0]
 8002a88:	2b00      	cmp	r3, #0
 8002a8a:	d109      	bne.n	8002aa0 <HAL_TIM_PWM_Start_IT+0x28>
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002a92:	b2db      	uxtb	r3, r3
 8002a94:	2b01      	cmp	r3, #1
 8002a96:	bf14      	ite	ne
 8002a98:	2301      	movne	r3, #1
 8002a9a:	2300      	moveq	r3, #0
 8002a9c:	b2db      	uxtb	r3, r3
 8002a9e:	e022      	b.n	8002ae6 <HAL_TIM_PWM_Start_IT+0x6e>
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	2b04      	cmp	r3, #4
 8002aa4:	d109      	bne.n	8002aba <HAL_TIM_PWM_Start_IT+0x42>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002aac:	b2db      	uxtb	r3, r3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	bf14      	ite	ne
 8002ab2:	2301      	movne	r3, #1
 8002ab4:	2300      	moveq	r3, #0
 8002ab6:	b2db      	uxtb	r3, r3
 8002ab8:	e015      	b.n	8002ae6 <HAL_TIM_PWM_Start_IT+0x6e>
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	2b08      	cmp	r3, #8
 8002abe:	d109      	bne.n	8002ad4 <HAL_TIM_PWM_Start_IT+0x5c>
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002ac6:	b2db      	uxtb	r3, r3
 8002ac8:	2b01      	cmp	r3, #1
 8002aca:	bf14      	ite	ne
 8002acc:	2301      	movne	r3, #1
 8002ace:	2300      	moveq	r3, #0
 8002ad0:	b2db      	uxtb	r3, r3
 8002ad2:	e008      	b.n	8002ae6 <HAL_TIM_PWM_Start_IT+0x6e>
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002ada:	b2db      	uxtb	r3, r3
 8002adc:	2b01      	cmp	r3, #1
 8002ade:	bf14      	ite	ne
 8002ae0:	2301      	movne	r3, #1
 8002ae2:	2300      	moveq	r3, #0
 8002ae4:	b2db      	uxtb	r3, r3
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d001      	beq.n	8002aee <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e0c7      	b.n	8002c7e <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002aee:	683b      	ldr	r3, [r7, #0]
 8002af0:	2b00      	cmp	r3, #0
 8002af2:	d104      	bne.n	8002afe <HAL_TIM_PWM_Start_IT+0x86>
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	2202      	movs	r2, #2
 8002af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002afc:	e013      	b.n	8002b26 <HAL_TIM_PWM_Start_IT+0xae>
 8002afe:	683b      	ldr	r3, [r7, #0]
 8002b00:	2b04      	cmp	r3, #4
 8002b02:	d104      	bne.n	8002b0e <HAL_TIM_PWM_Start_IT+0x96>
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2202      	movs	r2, #2
 8002b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b0c:	e00b      	b.n	8002b26 <HAL_TIM_PWM_Start_IT+0xae>
 8002b0e:	683b      	ldr	r3, [r7, #0]
 8002b10:	2b08      	cmp	r3, #8
 8002b12:	d104      	bne.n	8002b1e <HAL_TIM_PWM_Start_IT+0xa6>
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	2202      	movs	r2, #2
 8002b18:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b1c:	e003      	b.n	8002b26 <HAL_TIM_PWM_Start_IT+0xae>
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	2202      	movs	r2, #2
 8002b22:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8002b26:	683b      	ldr	r3, [r7, #0]
 8002b28:	2b0c      	cmp	r3, #12
 8002b2a:	d841      	bhi.n	8002bb0 <HAL_TIM_PWM_Start_IT+0x138>
 8002b2c:	a201      	add	r2, pc, #4	; (adr r2, 8002b34 <HAL_TIM_PWM_Start_IT+0xbc>)
 8002b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002b32:	bf00      	nop
 8002b34:	08002b69 	.word	0x08002b69
 8002b38:	08002bb1 	.word	0x08002bb1
 8002b3c:	08002bb1 	.word	0x08002bb1
 8002b40:	08002bb1 	.word	0x08002bb1
 8002b44:	08002b7b 	.word	0x08002b7b
 8002b48:	08002bb1 	.word	0x08002bb1
 8002b4c:	08002bb1 	.word	0x08002bb1
 8002b50:	08002bb1 	.word	0x08002bb1
 8002b54:	08002b8d 	.word	0x08002b8d
 8002b58:	08002bb1 	.word	0x08002bb1
 8002b5c:	08002bb1 	.word	0x08002bb1
 8002b60:	08002bb1 	.word	0x08002bb1
 8002b64:	08002b9f 	.word	0x08002b9f
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	68da      	ldr	r2, [r3, #12]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	f042 0202 	orr.w	r2, r2, #2
 8002b76:	60da      	str	r2, [r3, #12]
      break;
 8002b78:	e01d      	b.n	8002bb6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	68da      	ldr	r2, [r3, #12]
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	f042 0204 	orr.w	r2, r2, #4
 8002b88:	60da      	str	r2, [r3, #12]
      break;
 8002b8a:	e014      	b.n	8002bb6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68da      	ldr	r2, [r3, #12]
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f042 0208 	orr.w	r2, r2, #8
 8002b9a:	60da      	str	r2, [r3, #12]
      break;
 8002b9c:	e00b      	b.n	8002bb6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	68da      	ldr	r2, [r3, #12]
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	f042 0210 	orr.w	r2, r2, #16
 8002bac:	60da      	str	r2, [r3, #12]
      break;
 8002bae:	e002      	b.n	8002bb6 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8002bb0:	2301      	movs	r3, #1
 8002bb2:	73fb      	strb	r3, [r7, #15]
      break;
 8002bb4:	bf00      	nop
  }

  if (status == HAL_OK)
 8002bb6:	7bfb      	ldrb	r3, [r7, #15]
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d15f      	bne.n	8002c7c <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	2201      	movs	r2, #1
 8002bc2:	6839      	ldr	r1, [r7, #0]
 8002bc4:	4618      	mov	r0, r3
 8002bc6:	f000 fecf 	bl	8003968 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a2e      	ldr	r2, [pc, #184]	; (8002c88 <HAL_TIM_PWM_Start_IT+0x210>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	d004      	beq.n	8002bde <HAL_TIM_PWM_Start_IT+0x166>
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	4a2c      	ldr	r2, [pc, #176]	; (8002c8c <HAL_TIM_PWM_Start_IT+0x214>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d101      	bne.n	8002be2 <HAL_TIM_PWM_Start_IT+0x16a>
 8002bde:	2301      	movs	r3, #1
 8002be0:	e000      	b.n	8002be4 <HAL_TIM_PWM_Start_IT+0x16c>
 8002be2:	2300      	movs	r3, #0
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d007      	beq.n	8002bf8 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002bf6:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4a22      	ldr	r2, [pc, #136]	; (8002c88 <HAL_TIM_PWM_Start_IT+0x210>)
 8002bfe:	4293      	cmp	r3, r2
 8002c00:	d022      	beq.n	8002c48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c0a:	d01d      	beq.n	8002c48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4a1f      	ldr	r2, [pc, #124]	; (8002c90 <HAL_TIM_PWM_Start_IT+0x218>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d018      	beq.n	8002c48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1e      	ldr	r2, [pc, #120]	; (8002c94 <HAL_TIM_PWM_Start_IT+0x21c>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d013      	beq.n	8002c48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a1c      	ldr	r2, [pc, #112]	; (8002c98 <HAL_TIM_PWM_Start_IT+0x220>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d00e      	beq.n	8002c48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <HAL_TIM_PWM_Start_IT+0x214>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d009      	beq.n	8002c48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4a18      	ldr	r2, [pc, #96]	; (8002c9c <HAL_TIM_PWM_Start_IT+0x224>)
 8002c3a:	4293      	cmp	r3, r2
 8002c3c:	d004      	beq.n	8002c48 <HAL_TIM_PWM_Start_IT+0x1d0>
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	4a17      	ldr	r2, [pc, #92]	; (8002ca0 <HAL_TIM_PWM_Start_IT+0x228>)
 8002c44:	4293      	cmp	r3, r2
 8002c46:	d111      	bne.n	8002c6c <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	689b      	ldr	r3, [r3, #8]
 8002c4e:	f003 0307 	and.w	r3, r3, #7
 8002c52:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b06      	cmp	r3, #6
 8002c58:	d010      	beq.n	8002c7c <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	681a      	ldr	r2, [r3, #0]
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f042 0201 	orr.w	r2, r2, #1
 8002c68:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c6a:	e007      	b.n	8002c7c <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	681a      	ldr	r2, [r3, #0]
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	f042 0201 	orr.w	r2, r2, #1
 8002c7a:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8002c7c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002c7e:	4618      	mov	r0, r3
 8002c80:	3710      	adds	r7, #16
 8002c82:	46bd      	mov	sp, r7
 8002c84:	bd80      	pop	{r7, pc}
 8002c86:	bf00      	nop
 8002c88:	40010000 	.word	0x40010000
 8002c8c:	40010400 	.word	0x40010400
 8002c90:	40000400 	.word	0x40000400
 8002c94:	40000800 	.word	0x40000800
 8002c98:	40000c00 	.word	0x40000c00
 8002c9c:	40014000 	.word	0x40014000
 8002ca0:	40001800 	.word	0x40001800

08002ca4 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b084      	sub	sp, #16
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
 8002cac:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002cae:	2300      	movs	r3, #0
 8002cb0:	73fb      	strb	r3, [r7, #15]
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b0c      	cmp	r3, #12
 8002cb6:	d841      	bhi.n	8002d3c <HAL_TIM_PWM_Stop_IT+0x98>
 8002cb8:	a201      	add	r2, pc, #4	; (adr r2, 8002cc0 <HAL_TIM_PWM_Stop_IT+0x1c>)
 8002cba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cbe:	bf00      	nop
 8002cc0:	08002cf5 	.word	0x08002cf5
 8002cc4:	08002d3d 	.word	0x08002d3d
 8002cc8:	08002d3d 	.word	0x08002d3d
 8002ccc:	08002d3d 	.word	0x08002d3d
 8002cd0:	08002d07 	.word	0x08002d07
 8002cd4:	08002d3d 	.word	0x08002d3d
 8002cd8:	08002d3d 	.word	0x08002d3d
 8002cdc:	08002d3d 	.word	0x08002d3d
 8002ce0:	08002d19 	.word	0x08002d19
 8002ce4:	08002d3d 	.word	0x08002d3d
 8002ce8:	08002d3d 	.word	0x08002d3d
 8002cec:	08002d3d 	.word	0x08002d3d
 8002cf0:	08002d2b 	.word	0x08002d2b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	68da      	ldr	r2, [r3, #12]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	f022 0202 	bic.w	r2, r2, #2
 8002d02:	60da      	str	r2, [r3, #12]
      break;
 8002d04:	e01d      	b.n	8002d42 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	68da      	ldr	r2, [r3, #12]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 0204 	bic.w	r2, r2, #4
 8002d14:	60da      	str	r2, [r3, #12]
      break;
 8002d16:	e014      	b.n	8002d42 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	68da      	ldr	r2, [r3, #12]
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	f022 0208 	bic.w	r2, r2, #8
 8002d26:	60da      	str	r2, [r3, #12]
      break;
 8002d28:	e00b      	b.n	8002d42 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68da      	ldr	r2, [r3, #12]
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f022 0210 	bic.w	r2, r2, #16
 8002d38:	60da      	str	r2, [r3, #12]
      break;
 8002d3a:	e002      	b.n	8002d42 <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8002d3c:	2301      	movs	r3, #1
 8002d3e:	73fb      	strb	r3, [r7, #15]
      break;
 8002d40:	bf00      	nop
  }

  if (status == HAL_OK)
 8002d42:	7bfb      	ldrb	r3, [r7, #15]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d161      	bne.n	8002e0c <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	2200      	movs	r2, #0
 8002d4e:	6839      	ldr	r1, [r7, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f000 fe09 	bl	8003968 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a2f      	ldr	r2, [pc, #188]	; (8002e18 <HAL_TIM_PWM_Stop_IT+0x174>)
 8002d5c:	4293      	cmp	r3, r2
 8002d5e:	d004      	beq.n	8002d6a <HAL_TIM_PWM_Stop_IT+0xc6>
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4a2d      	ldr	r2, [pc, #180]	; (8002e1c <HAL_TIM_PWM_Stop_IT+0x178>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d101      	bne.n	8002d6e <HAL_TIM_PWM_Stop_IT+0xca>
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e000      	b.n	8002d70 <HAL_TIM_PWM_Stop_IT+0xcc>
 8002d6e:	2300      	movs	r3, #0
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d017      	beq.n	8002da4 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	6a1a      	ldr	r2, [r3, #32]
 8002d7a:	f241 1311 	movw	r3, #4369	; 0x1111
 8002d7e:	4013      	ands	r3, r2
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d10f      	bne.n	8002da4 <HAL_TIM_PWM_Stop_IT+0x100>
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	6a1a      	ldr	r2, [r3, #32]
 8002d8a:	f240 4344 	movw	r3, #1092	; 0x444
 8002d8e:	4013      	ands	r3, r2
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d107      	bne.n	8002da4 <HAL_TIM_PWM_Stop_IT+0x100>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002da2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	6a1a      	ldr	r2, [r3, #32]
 8002daa:	f241 1311 	movw	r3, #4369	; 0x1111
 8002dae:	4013      	ands	r3, r2
 8002db0:	2b00      	cmp	r3, #0
 8002db2:	d10f      	bne.n	8002dd4 <HAL_TIM_PWM_Stop_IT+0x130>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	6a1a      	ldr	r2, [r3, #32]
 8002dba:	f240 4344 	movw	r3, #1092	; 0x444
 8002dbe:	4013      	ands	r3, r2
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d107      	bne.n	8002dd4 <HAL_TIM_PWM_Stop_IT+0x130>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	681a      	ldr	r2, [r3, #0]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f022 0201 	bic.w	r2, r2, #1
 8002dd2:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d104      	bne.n	8002de4 <HAL_TIM_PWM_Stop_IT+0x140>
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	2201      	movs	r2, #1
 8002dde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002de2:	e013      	b.n	8002e0c <HAL_TIM_PWM_Stop_IT+0x168>
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	2b04      	cmp	r3, #4
 8002de8:	d104      	bne.n	8002df4 <HAL_TIM_PWM_Stop_IT+0x150>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2201      	movs	r2, #1
 8002dee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002df2:	e00b      	b.n	8002e0c <HAL_TIM_PWM_Stop_IT+0x168>
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	2b08      	cmp	r3, #8
 8002df8:	d104      	bne.n	8002e04 <HAL_TIM_PWM_Stop_IT+0x160>
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e02:	e003      	b.n	8002e0c <HAL_TIM_PWM_Stop_IT+0x168>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	2201      	movs	r2, #1
 8002e08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8002e0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e0e:	4618      	mov	r0, r3
 8002e10:	3710      	adds	r7, #16
 8002e12:	46bd      	mov	sp, r7
 8002e14:	bd80      	pop	{r7, pc}
 8002e16:	bf00      	nop
 8002e18:	40010000 	.word	0x40010000
 8002e1c:	40010400 	.word	0x40010400

08002e20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b082      	sub	sp, #8
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d122      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	68db      	ldr	r3, [r3, #12]
 8002e3c:	f003 0302 	and.w	r3, r3, #2
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d11b      	bne.n	8002e7c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	f06f 0202 	mvn.w	r2, #2
 8002e4c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2201      	movs	r2, #1
 8002e52:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	699b      	ldr	r3, [r3, #24]
 8002e5a:	f003 0303 	and.w	r3, r3, #3
 8002e5e:	2b00      	cmp	r3, #0
 8002e60:	d003      	beq.n	8002e6a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002e62:	6878      	ldr	r0, [r7, #4]
 8002e64:	f000 fa81 	bl	800336a <HAL_TIM_IC_CaptureCallback>
 8002e68:	e005      	b.n	8002e76 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002e6a:	6878      	ldr	r0, [r7, #4]
 8002e6c:	f000 fa73 	bl	8003356 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002e70:	6878      	ldr	r0, [r7, #4]
 8002e72:	f7fe fadb 	bl	800142c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	2200      	movs	r2, #0
 8002e7a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	691b      	ldr	r3, [r3, #16]
 8002e82:	f003 0304 	and.w	r3, r3, #4
 8002e86:	2b04      	cmp	r3, #4
 8002e88:	d122      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	68db      	ldr	r3, [r3, #12]
 8002e90:	f003 0304 	and.w	r3, r3, #4
 8002e94:	2b04      	cmp	r3, #4
 8002e96:	d11b      	bne.n	8002ed0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	f06f 0204 	mvn.w	r2, #4
 8002ea0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	2202      	movs	r2, #2
 8002ea6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	699b      	ldr	r3, [r3, #24]
 8002eae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002eb2:	2b00      	cmp	r3, #0
 8002eb4:	d003      	beq.n	8002ebe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002eb6:	6878      	ldr	r0, [r7, #4]
 8002eb8:	f000 fa57 	bl	800336a <HAL_TIM_IC_CaptureCallback>
 8002ebc:	e005      	b.n	8002eca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002ebe:	6878      	ldr	r0, [r7, #4]
 8002ec0:	f000 fa49 	bl	8003356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ec4:	6878      	ldr	r0, [r7, #4]
 8002ec6:	f7fe fab1 	bl	800142c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	2200      	movs	r2, #0
 8002ece:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	691b      	ldr	r3, [r3, #16]
 8002ed6:	f003 0308 	and.w	r3, r3, #8
 8002eda:	2b08      	cmp	r3, #8
 8002edc:	d122      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	68db      	ldr	r3, [r3, #12]
 8002ee4:	f003 0308 	and.w	r3, r3, #8
 8002ee8:	2b08      	cmp	r3, #8
 8002eea:	d11b      	bne.n	8002f24 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	f06f 0208 	mvn.w	r2, #8
 8002ef4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	2204      	movs	r2, #4
 8002efa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	69db      	ldr	r3, [r3, #28]
 8002f02:	f003 0303 	and.w	r3, r3, #3
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d003      	beq.n	8002f12 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f000 fa2d 	bl	800336a <HAL_TIM_IC_CaptureCallback>
 8002f10:	e005      	b.n	8002f1e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f12:	6878      	ldr	r0, [r7, #4]
 8002f14:	f000 fa1f 	bl	8003356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f18:	6878      	ldr	r0, [r7, #4]
 8002f1a:	f7fe fa87 	bl	800142c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	2200      	movs	r2, #0
 8002f22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	691b      	ldr	r3, [r3, #16]
 8002f2a:	f003 0310 	and.w	r3, r3, #16
 8002f2e:	2b10      	cmp	r3, #16
 8002f30:	d122      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	68db      	ldr	r3, [r3, #12]
 8002f38:	f003 0310 	and.w	r3, r3, #16
 8002f3c:	2b10      	cmp	r3, #16
 8002f3e:	d11b      	bne.n	8002f78 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f06f 0210 	mvn.w	r2, #16
 8002f48:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	2208      	movs	r2, #8
 8002f4e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	69db      	ldr	r3, [r3, #28]
 8002f56:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d003      	beq.n	8002f66 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002f5e:	6878      	ldr	r0, [r7, #4]
 8002f60:	f000 fa03 	bl	800336a <HAL_TIM_IC_CaptureCallback>
 8002f64:	e005      	b.n	8002f72 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f66:	6878      	ldr	r0, [r7, #4]
 8002f68:	f000 f9f5 	bl	8003356 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f6c:	6878      	ldr	r0, [r7, #4]
 8002f6e:	f7fe fa5d 	bl	800142c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	2200      	movs	r2, #0
 8002f76:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	f003 0301 	and.w	r3, r3, #1
 8002f82:	2b01      	cmp	r3, #1
 8002f84:	d10e      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d107      	bne.n	8002fa4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	f06f 0201 	mvn.w	r2, #1
 8002f9c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f000 f9cf 	bl	8003342 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	691b      	ldr	r3, [r3, #16]
 8002faa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fae:	2b80      	cmp	r3, #128	; 0x80
 8002fb0:	d10e      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	68db      	ldr	r3, [r3, #12]
 8002fb8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002fbc:	2b80      	cmp	r3, #128	; 0x80
 8002fbe:	d107      	bne.n	8002fd0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8002fc8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f000 fd78 	bl	8003ac0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	691b      	ldr	r3, [r3, #16]
 8002fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fda:	2b40      	cmp	r3, #64	; 0x40
 8002fdc:	d10e      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	68db      	ldr	r3, [r3, #12]
 8002fe4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002fe8:	2b40      	cmp	r3, #64	; 0x40
 8002fea:	d107      	bne.n	8002ffc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8002ff4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002ff6:	6878      	ldr	r0, [r7, #4]
 8002ff8:	f000 f9c1 	bl	800337e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	691b      	ldr	r3, [r3, #16]
 8003002:	f003 0320 	and.w	r3, r3, #32
 8003006:	2b20      	cmp	r3, #32
 8003008:	d10e      	bne.n	8003028 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	68db      	ldr	r3, [r3, #12]
 8003010:	f003 0320 	and.w	r3, r3, #32
 8003014:	2b20      	cmp	r3, #32
 8003016:	d107      	bne.n	8003028 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	f06f 0220 	mvn.w	r2, #32
 8003020:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003022:	6878      	ldr	r0, [r7, #4]
 8003024:	f000 fd42 	bl	8003aac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003028:	bf00      	nop
 800302a:	3708      	adds	r7, #8
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b086      	sub	sp, #24
 8003034:	af00      	add	r7, sp, #0
 8003036:	60f8      	str	r0, [r7, #12]
 8003038:	60b9      	str	r1, [r7, #8]
 800303a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800303c:	2300      	movs	r3, #0
 800303e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003040:	68fb      	ldr	r3, [r7, #12]
 8003042:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003046:	2b01      	cmp	r3, #1
 8003048:	d101      	bne.n	800304e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800304a:	2302      	movs	r3, #2
 800304c:	e0ae      	b.n	80031ac <HAL_TIM_PWM_ConfigChannel+0x17c>
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	2201      	movs	r2, #1
 8003052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	2b0c      	cmp	r3, #12
 800305a:	f200 809f 	bhi.w	800319c <HAL_TIM_PWM_ConfigChannel+0x16c>
 800305e:	a201      	add	r2, pc, #4	; (adr r2, 8003064 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003060:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003064:	08003099 	.word	0x08003099
 8003068:	0800319d 	.word	0x0800319d
 800306c:	0800319d 	.word	0x0800319d
 8003070:	0800319d 	.word	0x0800319d
 8003074:	080030d9 	.word	0x080030d9
 8003078:	0800319d 	.word	0x0800319d
 800307c:	0800319d 	.word	0x0800319d
 8003080:	0800319d 	.word	0x0800319d
 8003084:	0800311b 	.word	0x0800311b
 8003088:	0800319d 	.word	0x0800319d
 800308c:	0800319d 	.word	0x0800319d
 8003090:	0800319d 	.word	0x0800319d
 8003094:	0800315b 	.word	0x0800315b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	68b9      	ldr	r1, [r7, #8]
 800309e:	4618      	mov	r0, r3
 80030a0:	f000 fa18 	bl	80034d4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80030a4:	68fb      	ldr	r3, [r7, #12]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	699a      	ldr	r2, [r3, #24]
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	681b      	ldr	r3, [r3, #0]
 80030ae:	f042 0208 	orr.w	r2, r2, #8
 80030b2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	699a      	ldr	r2, [r3, #24]
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0204 	bic.w	r2, r2, #4
 80030c2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	6999      	ldr	r1, [r3, #24]
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	691a      	ldr	r2, [r3, #16]
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	430a      	orrs	r2, r1
 80030d4:	619a      	str	r2, [r3, #24]
      break;
 80030d6:	e064      	b.n	80031a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	68b9      	ldr	r1, [r7, #8]
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fa68 	bl	80035b4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	699a      	ldr	r2, [r3, #24]
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80030f2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	681b      	ldr	r3, [r3, #0]
 80030f8:	699a      	ldr	r2, [r3, #24]
 80030fa:	68fb      	ldr	r3, [r7, #12]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003102:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003104:	68fb      	ldr	r3, [r7, #12]
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	6999      	ldr	r1, [r3, #24]
 800310a:	68bb      	ldr	r3, [r7, #8]
 800310c:	691b      	ldr	r3, [r3, #16]
 800310e:	021a      	lsls	r2, r3, #8
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	430a      	orrs	r2, r1
 8003116:	619a      	str	r2, [r3, #24]
      break;
 8003118:	e043      	b.n	80031a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	681b      	ldr	r3, [r3, #0]
 800311e:	68b9      	ldr	r1, [r7, #8]
 8003120:	4618      	mov	r0, r3
 8003122:	f000 fabd 	bl	80036a0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	69da      	ldr	r2, [r3, #28]
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	681b      	ldr	r3, [r3, #0]
 8003130:	f042 0208 	orr.w	r2, r2, #8
 8003134:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	69da      	ldr	r2, [r3, #28]
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	681b      	ldr	r3, [r3, #0]
 8003140:	f022 0204 	bic.w	r2, r2, #4
 8003144:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	69d9      	ldr	r1, [r3, #28]
 800314c:	68bb      	ldr	r3, [r7, #8]
 800314e:	691a      	ldr	r2, [r3, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	430a      	orrs	r2, r1
 8003156:	61da      	str	r2, [r3, #28]
      break;
 8003158:	e023      	b.n	80031a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	68b9      	ldr	r1, [r7, #8]
 8003160:	4618      	mov	r0, r3
 8003162:	f000 fb11 	bl	8003788 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	69da      	ldr	r2, [r3, #28]
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003174:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	69da      	ldr	r2, [r3, #28]
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003184:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	69d9      	ldr	r1, [r3, #28]
 800318c:	68bb      	ldr	r3, [r7, #8]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	021a      	lsls	r2, r3, #8
 8003192:	68fb      	ldr	r3, [r7, #12]
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	430a      	orrs	r2, r1
 8003198:	61da      	str	r2, [r3, #28]
      break;
 800319a:	e002      	b.n	80031a2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800319c:	2301      	movs	r3, #1
 800319e:	75fb      	strb	r3, [r7, #23]
      break;
 80031a0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	2200      	movs	r2, #0
 80031a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80031aa:	7dfb      	ldrb	r3, [r7, #23]
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3718      	adds	r7, #24
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
 80031bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80031be:	2300      	movs	r3, #0
 80031c0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80031c8:	2b01      	cmp	r3, #1
 80031ca:	d101      	bne.n	80031d0 <HAL_TIM_ConfigClockSource+0x1c>
 80031cc:	2302      	movs	r3, #2
 80031ce:	e0b4      	b.n	800333a <HAL_TIM_ConfigClockSource+0x186>
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	2201      	movs	r2, #1
 80031d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2202      	movs	r2, #2
 80031dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80031e0:	687b      	ldr	r3, [r7, #4]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	689b      	ldr	r3, [r3, #8]
 80031e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80031e8:	68bb      	ldr	r3, [r7, #8]
 80031ea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80031ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80031f6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	68ba      	ldr	r2, [r7, #8]
 80031fe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003200:	683b      	ldr	r3, [r7, #0]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003208:	d03e      	beq.n	8003288 <HAL_TIM_ConfigClockSource+0xd4>
 800320a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800320e:	f200 8087 	bhi.w	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003212:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003216:	f000 8086 	beq.w	8003326 <HAL_TIM_ConfigClockSource+0x172>
 800321a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800321e:	d87f      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003220:	2b70      	cmp	r3, #112	; 0x70
 8003222:	d01a      	beq.n	800325a <HAL_TIM_ConfigClockSource+0xa6>
 8003224:	2b70      	cmp	r3, #112	; 0x70
 8003226:	d87b      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003228:	2b60      	cmp	r3, #96	; 0x60
 800322a:	d050      	beq.n	80032ce <HAL_TIM_ConfigClockSource+0x11a>
 800322c:	2b60      	cmp	r3, #96	; 0x60
 800322e:	d877      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003230:	2b50      	cmp	r3, #80	; 0x50
 8003232:	d03c      	beq.n	80032ae <HAL_TIM_ConfigClockSource+0xfa>
 8003234:	2b50      	cmp	r3, #80	; 0x50
 8003236:	d873      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003238:	2b40      	cmp	r3, #64	; 0x40
 800323a:	d058      	beq.n	80032ee <HAL_TIM_ConfigClockSource+0x13a>
 800323c:	2b40      	cmp	r3, #64	; 0x40
 800323e:	d86f      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003240:	2b30      	cmp	r3, #48	; 0x30
 8003242:	d064      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x15a>
 8003244:	2b30      	cmp	r3, #48	; 0x30
 8003246:	d86b      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003248:	2b20      	cmp	r3, #32
 800324a:	d060      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x15a>
 800324c:	2b20      	cmp	r3, #32
 800324e:	d867      	bhi.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
 8003250:	2b00      	cmp	r3, #0
 8003252:	d05c      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x15a>
 8003254:	2b10      	cmp	r3, #16
 8003256:	d05a      	beq.n	800330e <HAL_TIM_ConfigClockSource+0x15a>
 8003258:	e062      	b.n	8003320 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	6818      	ldr	r0, [r3, #0]
 800325e:	683b      	ldr	r3, [r7, #0]
 8003260:	6899      	ldr	r1, [r3, #8]
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	685a      	ldr	r2, [r3, #4]
 8003266:	683b      	ldr	r3, [r7, #0]
 8003268:	68db      	ldr	r3, [r3, #12]
 800326a:	f000 fb5d 	bl	8003928 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	689b      	ldr	r3, [r3, #8]
 8003274:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003276:	68bb      	ldr	r3, [r7, #8]
 8003278:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800327c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	609a      	str	r2, [r3, #8]
      break;
 8003286:	e04f      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	6818      	ldr	r0, [r3, #0]
 800328c:	683b      	ldr	r3, [r7, #0]
 800328e:	6899      	ldr	r1, [r3, #8]
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	685a      	ldr	r2, [r3, #4]
 8003294:	683b      	ldr	r3, [r7, #0]
 8003296:	68db      	ldr	r3, [r3, #12]
 8003298:	f000 fb46 	bl	8003928 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	689a      	ldr	r2, [r3, #8]
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032aa:	609a      	str	r2, [r3, #8]
      break;
 80032ac:	e03c      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6818      	ldr	r0, [r3, #0]
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	6859      	ldr	r1, [r3, #4]
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	68db      	ldr	r3, [r3, #12]
 80032ba:	461a      	mov	r2, r3
 80032bc:	f000 faba 	bl	8003834 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	2150      	movs	r1, #80	; 0x50
 80032c6:	4618      	mov	r0, r3
 80032c8:	f000 fb13 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 80032cc:	e02c      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6818      	ldr	r0, [r3, #0]
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	6859      	ldr	r1, [r3, #4]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	68db      	ldr	r3, [r3, #12]
 80032da:	461a      	mov	r2, r3
 80032dc:	f000 fad9 	bl	8003892 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2160      	movs	r1, #96	; 0x60
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fb03 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 80032ec:	e01c      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	6818      	ldr	r0, [r3, #0]
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	6859      	ldr	r1, [r3, #4]
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	68db      	ldr	r3, [r3, #12]
 80032fa:	461a      	mov	r2, r3
 80032fc:	f000 fa9a 	bl	8003834 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	2140      	movs	r1, #64	; 0x40
 8003306:	4618      	mov	r0, r3
 8003308:	f000 faf3 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 800330c:	e00c      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	683b      	ldr	r3, [r7, #0]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4619      	mov	r1, r3
 8003318:	4610      	mov	r0, r2
 800331a:	f000 faea 	bl	80038f2 <TIM_ITRx_SetConfig>
      break;
 800331e:	e003      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	73fb      	strb	r3, [r7, #15]
      break;
 8003324:	e000      	b.n	8003328 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003326:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	2201      	movs	r2, #1
 800332c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	2200      	movs	r2, #0
 8003334:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003338:	7bfb      	ldrb	r3, [r7, #15]
}
 800333a:	4618      	mov	r0, r3
 800333c:	3710      	adds	r7, #16
 800333e:	46bd      	mov	sp, r7
 8003340:	bd80      	pop	{r7, pc}

08003342 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003342:	b480      	push	{r7}
 8003344:	b083      	sub	sp, #12
 8003346:	af00      	add	r7, sp, #0
 8003348:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800334a:	bf00      	nop
 800334c:	370c      	adds	r7, #12
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr

08003356 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003356:	b480      	push	{r7}
 8003358:	b083      	sub	sp, #12
 800335a:	af00      	add	r7, sp, #0
 800335c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800335e:	bf00      	nop
 8003360:	370c      	adds	r7, #12
 8003362:	46bd      	mov	sp, r7
 8003364:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003368:	4770      	bx	lr

0800336a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800336a:	b480      	push	{r7}
 800336c:	b083      	sub	sp, #12
 800336e:	af00      	add	r7, sp, #0
 8003370:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003372:	bf00      	nop
 8003374:	370c      	adds	r7, #12
 8003376:	46bd      	mov	sp, r7
 8003378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800337c:	4770      	bx	lr

0800337e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800337e:	b480      	push	{r7}
 8003380:	b083      	sub	sp, #12
 8003382:	af00      	add	r7, sp, #0
 8003384:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003386:	bf00      	nop
 8003388:	370c      	adds	r7, #12
 800338a:	46bd      	mov	sp, r7
 800338c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003390:	4770      	bx	lr
	...

08003394 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003394:	b480      	push	{r7}
 8003396:	b085      	sub	sp, #20
 8003398:	af00      	add	r7, sp, #0
 800339a:	6078      	str	r0, [r7, #4]
 800339c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	4a40      	ldr	r2, [pc, #256]	; (80034a8 <TIM_Base_SetConfig+0x114>)
 80033a8:	4293      	cmp	r3, r2
 80033aa:	d013      	beq.n	80033d4 <TIM_Base_SetConfig+0x40>
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033b2:	d00f      	beq.n	80033d4 <TIM_Base_SetConfig+0x40>
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	4a3d      	ldr	r2, [pc, #244]	; (80034ac <TIM_Base_SetConfig+0x118>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d00b      	beq.n	80033d4 <TIM_Base_SetConfig+0x40>
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	4a3c      	ldr	r2, [pc, #240]	; (80034b0 <TIM_Base_SetConfig+0x11c>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	d007      	beq.n	80033d4 <TIM_Base_SetConfig+0x40>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	4a3b      	ldr	r2, [pc, #236]	; (80034b4 <TIM_Base_SetConfig+0x120>)
 80033c8:	4293      	cmp	r3, r2
 80033ca:	d003      	beq.n	80033d4 <TIM_Base_SetConfig+0x40>
 80033cc:	687b      	ldr	r3, [r7, #4]
 80033ce:	4a3a      	ldr	r2, [pc, #232]	; (80034b8 <TIM_Base_SetConfig+0x124>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d108      	bne.n	80033e6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80033da:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	68fa      	ldr	r2, [r7, #12]
 80033e2:	4313      	orrs	r3, r2
 80033e4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	4a2f      	ldr	r2, [pc, #188]	; (80034a8 <TIM_Base_SetConfig+0x114>)
 80033ea:	4293      	cmp	r3, r2
 80033ec:	d02b      	beq.n	8003446 <TIM_Base_SetConfig+0xb2>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033f4:	d027      	beq.n	8003446 <TIM_Base_SetConfig+0xb2>
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	4a2c      	ldr	r2, [pc, #176]	; (80034ac <TIM_Base_SetConfig+0x118>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d023      	beq.n	8003446 <TIM_Base_SetConfig+0xb2>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	4a2b      	ldr	r2, [pc, #172]	; (80034b0 <TIM_Base_SetConfig+0x11c>)
 8003402:	4293      	cmp	r3, r2
 8003404:	d01f      	beq.n	8003446 <TIM_Base_SetConfig+0xb2>
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	4a2a      	ldr	r2, [pc, #168]	; (80034b4 <TIM_Base_SetConfig+0x120>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d01b      	beq.n	8003446 <TIM_Base_SetConfig+0xb2>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	4a29      	ldr	r2, [pc, #164]	; (80034b8 <TIM_Base_SetConfig+0x124>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d017      	beq.n	8003446 <TIM_Base_SetConfig+0xb2>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	4a28      	ldr	r2, [pc, #160]	; (80034bc <TIM_Base_SetConfig+0x128>)
 800341a:	4293      	cmp	r3, r2
 800341c:	d013      	beq.n	8003446 <TIM_Base_SetConfig+0xb2>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	4a27      	ldr	r2, [pc, #156]	; (80034c0 <TIM_Base_SetConfig+0x12c>)
 8003422:	4293      	cmp	r3, r2
 8003424:	d00f      	beq.n	8003446 <TIM_Base_SetConfig+0xb2>
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	4a26      	ldr	r2, [pc, #152]	; (80034c4 <TIM_Base_SetConfig+0x130>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d00b      	beq.n	8003446 <TIM_Base_SetConfig+0xb2>
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	4a25      	ldr	r2, [pc, #148]	; (80034c8 <TIM_Base_SetConfig+0x134>)
 8003432:	4293      	cmp	r3, r2
 8003434:	d007      	beq.n	8003446 <TIM_Base_SetConfig+0xb2>
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	4a24      	ldr	r2, [pc, #144]	; (80034cc <TIM_Base_SetConfig+0x138>)
 800343a:	4293      	cmp	r3, r2
 800343c:	d003      	beq.n	8003446 <TIM_Base_SetConfig+0xb2>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	4a23      	ldr	r2, [pc, #140]	; (80034d0 <TIM_Base_SetConfig+0x13c>)
 8003442:	4293      	cmp	r3, r2
 8003444:	d108      	bne.n	8003458 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800344c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	68db      	ldr	r3, [r3, #12]
 8003452:	68fa      	ldr	r2, [r7, #12]
 8003454:	4313      	orrs	r3, r2
 8003456:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	695b      	ldr	r3, [r3, #20]
 8003462:	4313      	orrs	r3, r2
 8003464:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	68fa      	ldr	r2, [r7, #12]
 800346a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	689a      	ldr	r2, [r3, #8]
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003474:	683b      	ldr	r3, [r7, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	4a0a      	ldr	r2, [pc, #40]	; (80034a8 <TIM_Base_SetConfig+0x114>)
 8003480:	4293      	cmp	r3, r2
 8003482:	d003      	beq.n	800348c <TIM_Base_SetConfig+0xf8>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	4a0c      	ldr	r2, [pc, #48]	; (80034b8 <TIM_Base_SetConfig+0x124>)
 8003488:	4293      	cmp	r3, r2
 800348a:	d103      	bne.n	8003494 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	691a      	ldr	r2, [r3, #16]
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	2201      	movs	r2, #1
 8003498:	615a      	str	r2, [r3, #20]
}
 800349a:	bf00      	nop
 800349c:	3714      	adds	r7, #20
 800349e:	46bd      	mov	sp, r7
 80034a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034a4:	4770      	bx	lr
 80034a6:	bf00      	nop
 80034a8:	40010000 	.word	0x40010000
 80034ac:	40000400 	.word	0x40000400
 80034b0:	40000800 	.word	0x40000800
 80034b4:	40000c00 	.word	0x40000c00
 80034b8:	40010400 	.word	0x40010400
 80034bc:	40014000 	.word	0x40014000
 80034c0:	40014400 	.word	0x40014400
 80034c4:	40014800 	.word	0x40014800
 80034c8:	40001800 	.word	0x40001800
 80034cc:	40001c00 	.word	0x40001c00
 80034d0:	40002000 	.word	0x40002000

080034d4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80034d4:	b480      	push	{r7}
 80034d6:	b087      	sub	sp, #28
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	6a1b      	ldr	r3, [r3, #32]
 80034e2:	f023 0201 	bic.w	r2, r3, #1
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a1b      	ldr	r3, [r3, #32]
 80034ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	699b      	ldr	r3, [r3, #24]
 80034fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003502:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	f023 0303 	bic.w	r3, r3, #3
 800350a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68fa      	ldr	r2, [r7, #12]
 8003512:	4313      	orrs	r3, r2
 8003514:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003516:	697b      	ldr	r3, [r7, #20]
 8003518:	f023 0302 	bic.w	r3, r3, #2
 800351c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	689b      	ldr	r3, [r3, #8]
 8003522:	697a      	ldr	r2, [r7, #20]
 8003524:	4313      	orrs	r3, r2
 8003526:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003528:	687b      	ldr	r3, [r7, #4]
 800352a:	4a20      	ldr	r2, [pc, #128]	; (80035ac <TIM_OC1_SetConfig+0xd8>)
 800352c:	4293      	cmp	r3, r2
 800352e:	d003      	beq.n	8003538 <TIM_OC1_SetConfig+0x64>
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	4a1f      	ldr	r2, [pc, #124]	; (80035b0 <TIM_OC1_SetConfig+0xdc>)
 8003534:	4293      	cmp	r3, r2
 8003536:	d10c      	bne.n	8003552 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	f023 0308 	bic.w	r3, r3, #8
 800353e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003540:	683b      	ldr	r3, [r7, #0]
 8003542:	68db      	ldr	r3, [r3, #12]
 8003544:	697a      	ldr	r2, [r7, #20]
 8003546:	4313      	orrs	r3, r2
 8003548:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800354a:	697b      	ldr	r3, [r7, #20]
 800354c:	f023 0304 	bic.w	r3, r3, #4
 8003550:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a15      	ldr	r2, [pc, #84]	; (80035ac <TIM_OC1_SetConfig+0xd8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d003      	beq.n	8003562 <TIM_OC1_SetConfig+0x8e>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a14      	ldr	r2, [pc, #80]	; (80035b0 <TIM_OC1_SetConfig+0xdc>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d111      	bne.n	8003586 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003562:	693b      	ldr	r3, [r7, #16]
 8003564:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003568:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800356a:	693b      	ldr	r3, [r7, #16]
 800356c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003570:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	695b      	ldr	r3, [r3, #20]
 8003576:	693a      	ldr	r2, [r7, #16]
 8003578:	4313      	orrs	r3, r2
 800357a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800357c:	683b      	ldr	r3, [r7, #0]
 800357e:	699b      	ldr	r3, [r3, #24]
 8003580:	693a      	ldr	r2, [r7, #16]
 8003582:	4313      	orrs	r3, r2
 8003584:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	693a      	ldr	r2, [r7, #16]
 800358a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	68fa      	ldr	r2, [r7, #12]
 8003590:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	697a      	ldr	r2, [r7, #20]
 800359e:	621a      	str	r2, [r3, #32]
}
 80035a0:	bf00      	nop
 80035a2:	371c      	adds	r7, #28
 80035a4:	46bd      	mov	sp, r7
 80035a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035aa:	4770      	bx	lr
 80035ac:	40010000 	.word	0x40010000
 80035b0:	40010400 	.word	0x40010400

080035b4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80035b4:	b480      	push	{r7}
 80035b6:	b087      	sub	sp, #28
 80035b8:	af00      	add	r7, sp, #0
 80035ba:	6078      	str	r0, [r7, #4]
 80035bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	6a1b      	ldr	r3, [r3, #32]
 80035c2:	f023 0210 	bic.w	r2, r3, #16
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	6a1b      	ldr	r3, [r3, #32]
 80035ce:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	685b      	ldr	r3, [r3, #4]
 80035d4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	699b      	ldr	r3, [r3, #24]
 80035da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80035e2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80035ea:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80035ec:	683b      	ldr	r3, [r7, #0]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	021b      	lsls	r3, r3, #8
 80035f2:	68fa      	ldr	r2, [r7, #12]
 80035f4:	4313      	orrs	r3, r2
 80035f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80035f8:	697b      	ldr	r3, [r7, #20]
 80035fa:	f023 0320 	bic.w	r3, r3, #32
 80035fe:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003600:	683b      	ldr	r3, [r7, #0]
 8003602:	689b      	ldr	r3, [r3, #8]
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	4a22      	ldr	r2, [pc, #136]	; (8003698 <TIM_OC2_SetConfig+0xe4>)
 8003610:	4293      	cmp	r3, r2
 8003612:	d003      	beq.n	800361c <TIM_OC2_SetConfig+0x68>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	4a21      	ldr	r2, [pc, #132]	; (800369c <TIM_OC2_SetConfig+0xe8>)
 8003618:	4293      	cmp	r3, r2
 800361a:	d10d      	bne.n	8003638 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800361c:	697b      	ldr	r3, [r7, #20]
 800361e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003622:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003624:	683b      	ldr	r3, [r7, #0]
 8003626:	68db      	ldr	r3, [r3, #12]
 8003628:	011b      	lsls	r3, r3, #4
 800362a:	697a      	ldr	r2, [r7, #20]
 800362c:	4313      	orrs	r3, r2
 800362e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003630:	697b      	ldr	r3, [r7, #20]
 8003632:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003636:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a17      	ldr	r2, [pc, #92]	; (8003698 <TIM_OC2_SetConfig+0xe4>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_OC2_SetConfig+0x94>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a16      	ldr	r2, [pc, #88]	; (800369c <TIM_OC2_SetConfig+0xe8>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d113      	bne.n	8003670 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003648:	693b      	ldr	r3, [r7, #16]
 800364a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800364e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003656:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	695b      	ldr	r3, [r3, #20]
 800365c:	009b      	lsls	r3, r3, #2
 800365e:	693a      	ldr	r2, [r7, #16]
 8003660:	4313      	orrs	r3, r2
 8003662:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003664:	683b      	ldr	r3, [r7, #0]
 8003666:	699b      	ldr	r3, [r3, #24]
 8003668:	009b      	lsls	r3, r3, #2
 800366a:	693a      	ldr	r2, [r7, #16]
 800366c:	4313      	orrs	r3, r2
 800366e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	693a      	ldr	r2, [r7, #16]
 8003674:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	68fa      	ldr	r2, [r7, #12]
 800367a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	685a      	ldr	r2, [r3, #4]
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	621a      	str	r2, [r3, #32]
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003694:	4770      	bx	lr
 8003696:	bf00      	nop
 8003698:	40010000 	.word	0x40010000
 800369c:	40010400 	.word	0x40010400

080036a0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80036a0:	b480      	push	{r7}
 80036a2:	b087      	sub	sp, #28
 80036a4:	af00      	add	r7, sp, #0
 80036a6:	6078      	str	r0, [r7, #4]
 80036a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6a1b      	ldr	r3, [r3, #32]
 80036ae:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	6a1b      	ldr	r3, [r3, #32]
 80036ba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	69db      	ldr	r3, [r3, #28]
 80036c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80036d0:	68fb      	ldr	r3, [r7, #12]
 80036d2:	f023 0303 	bic.w	r3, r3, #3
 80036d6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	681b      	ldr	r3, [r3, #0]
 80036dc:	68fa      	ldr	r2, [r7, #12]
 80036de:	4313      	orrs	r3, r2
 80036e0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80036e2:	697b      	ldr	r3, [r7, #20]
 80036e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80036e8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	021b      	lsls	r3, r3, #8
 80036f0:	697a      	ldr	r2, [r7, #20]
 80036f2:	4313      	orrs	r3, r2
 80036f4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	4a21      	ldr	r2, [pc, #132]	; (8003780 <TIM_OC3_SetConfig+0xe0>)
 80036fa:	4293      	cmp	r3, r2
 80036fc:	d003      	beq.n	8003706 <TIM_OC3_SetConfig+0x66>
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	4a20      	ldr	r2, [pc, #128]	; (8003784 <TIM_OC3_SetConfig+0xe4>)
 8003702:	4293      	cmp	r3, r2
 8003704:	d10d      	bne.n	8003722 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003706:	697b      	ldr	r3, [r7, #20]
 8003708:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800370c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800370e:	683b      	ldr	r3, [r7, #0]
 8003710:	68db      	ldr	r3, [r3, #12]
 8003712:	021b      	lsls	r3, r3, #8
 8003714:	697a      	ldr	r2, [r7, #20]
 8003716:	4313      	orrs	r3, r2
 8003718:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800371a:	697b      	ldr	r3, [r7, #20]
 800371c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003720:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	4a16      	ldr	r2, [pc, #88]	; (8003780 <TIM_OC3_SetConfig+0xe0>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d003      	beq.n	8003732 <TIM_OC3_SetConfig+0x92>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	4a15      	ldr	r2, [pc, #84]	; (8003784 <TIM_OC3_SetConfig+0xe4>)
 800372e:	4293      	cmp	r3, r2
 8003730:	d113      	bne.n	800375a <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003732:	693b      	ldr	r3, [r7, #16]
 8003734:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003738:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003740:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	695b      	ldr	r3, [r3, #20]
 8003746:	011b      	lsls	r3, r3, #4
 8003748:	693a      	ldr	r2, [r7, #16]
 800374a:	4313      	orrs	r3, r2
 800374c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800374e:	683b      	ldr	r3, [r7, #0]
 8003750:	699b      	ldr	r3, [r3, #24]
 8003752:	011b      	lsls	r3, r3, #4
 8003754:	693a      	ldr	r2, [r7, #16]
 8003756:	4313      	orrs	r3, r2
 8003758:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	693a      	ldr	r2, [r7, #16]
 800375e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	68fa      	ldr	r2, [r7, #12]
 8003764:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003766:	683b      	ldr	r3, [r7, #0]
 8003768:	685a      	ldr	r2, [r3, #4]
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	697a      	ldr	r2, [r7, #20]
 8003772:	621a      	str	r2, [r3, #32]
}
 8003774:	bf00      	nop
 8003776:	371c      	adds	r7, #28
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	40010000 	.word	0x40010000
 8003784:	40010400 	.word	0x40010400

08003788 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003788:	b480      	push	{r7}
 800378a:	b087      	sub	sp, #28
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
 8003790:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a1b      	ldr	r3, [r3, #32]
 8003796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6a1b      	ldr	r3, [r3, #32]
 80037a2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	69db      	ldr	r3, [r3, #28]
 80037ae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80037b6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80037be:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	021b      	lsls	r3, r3, #8
 80037c6:	68fa      	ldr	r2, [r7, #12]
 80037c8:	4313      	orrs	r3, r2
 80037ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80037d2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80037d4:	683b      	ldr	r3, [r7, #0]
 80037d6:	689b      	ldr	r3, [r3, #8]
 80037d8:	031b      	lsls	r3, r3, #12
 80037da:	693a      	ldr	r2, [r7, #16]
 80037dc:	4313      	orrs	r3, r2
 80037de:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	4a12      	ldr	r2, [pc, #72]	; (800382c <TIM_OC4_SetConfig+0xa4>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	d003      	beq.n	80037f0 <TIM_OC4_SetConfig+0x68>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	4a11      	ldr	r2, [pc, #68]	; (8003830 <TIM_OC4_SetConfig+0xa8>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d109      	bne.n	8003804 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80037f0:	697b      	ldr	r3, [r7, #20]
 80037f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80037f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	695b      	ldr	r3, [r3, #20]
 80037fc:	019b      	lsls	r3, r3, #6
 80037fe:	697a      	ldr	r2, [r7, #20]
 8003800:	4313      	orrs	r3, r2
 8003802:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	697a      	ldr	r2, [r7, #20]
 8003808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	68fa      	ldr	r2, [r7, #12]
 800380e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	685a      	ldr	r2, [r3, #4]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	693a      	ldr	r2, [r7, #16]
 800381c:	621a      	str	r2, [r3, #32]
}
 800381e:	bf00      	nop
 8003820:	371c      	adds	r7, #28
 8003822:	46bd      	mov	sp, r7
 8003824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003828:	4770      	bx	lr
 800382a:	bf00      	nop
 800382c:	40010000 	.word	0x40010000
 8003830:	40010400 	.word	0x40010400

08003834 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003834:	b480      	push	{r7}
 8003836:	b087      	sub	sp, #28
 8003838:	af00      	add	r7, sp, #0
 800383a:	60f8      	str	r0, [r7, #12]
 800383c:	60b9      	str	r1, [r7, #8]
 800383e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	6a1b      	ldr	r3, [r3, #32]
 8003844:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	f023 0201 	bic.w	r2, r3, #1
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003858:	693b      	ldr	r3, [r7, #16]
 800385a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800385e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	011b      	lsls	r3, r3, #4
 8003864:	693a      	ldr	r2, [r7, #16]
 8003866:	4313      	orrs	r3, r2
 8003868:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800386a:	697b      	ldr	r3, [r7, #20]
 800386c:	f023 030a 	bic.w	r3, r3, #10
 8003870:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003872:	697a      	ldr	r2, [r7, #20]
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	4313      	orrs	r3, r2
 8003878:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	693a      	ldr	r2, [r7, #16]
 800387e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	621a      	str	r2, [r3, #32]
}
 8003886:	bf00      	nop
 8003888:	371c      	adds	r7, #28
 800388a:	46bd      	mov	sp, r7
 800388c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003890:	4770      	bx	lr

08003892 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003892:	b480      	push	{r7}
 8003894:	b087      	sub	sp, #28
 8003896:	af00      	add	r7, sp, #0
 8003898:	60f8      	str	r0, [r7, #12]
 800389a:	60b9      	str	r1, [r7, #8]
 800389c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
 80038a2:	f023 0210 	bic.w	r2, r3, #16
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80038aa:	68fb      	ldr	r3, [r7, #12]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	6a1b      	ldr	r3, [r3, #32]
 80038b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80038b6:	697b      	ldr	r3, [r7, #20]
 80038b8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80038bc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	031b      	lsls	r3, r3, #12
 80038c2:	697a      	ldr	r2, [r7, #20]
 80038c4:	4313      	orrs	r3, r2
 80038c6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80038c8:	693b      	ldr	r3, [r7, #16]
 80038ca:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80038ce:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	011b      	lsls	r3, r3, #4
 80038d4:	693a      	ldr	r2, [r7, #16]
 80038d6:	4313      	orrs	r3, r2
 80038d8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	693a      	ldr	r2, [r7, #16]
 80038e4:	621a      	str	r2, [r3, #32]
}
 80038e6:	bf00      	nop
 80038e8:	371c      	adds	r7, #28
 80038ea:	46bd      	mov	sp, r7
 80038ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f0:	4770      	bx	lr

080038f2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80038f2:	b480      	push	{r7}
 80038f4:	b085      	sub	sp, #20
 80038f6:	af00      	add	r7, sp, #0
 80038f8:	6078      	str	r0, [r7, #4]
 80038fa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	689b      	ldr	r3, [r3, #8]
 8003900:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003908:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800390a:	683a      	ldr	r2, [r7, #0]
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	4313      	orrs	r3, r2
 8003910:	f043 0307 	orr.w	r3, r3, #7
 8003914:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	68fa      	ldr	r2, [r7, #12]
 800391a:	609a      	str	r2, [r3, #8]
}
 800391c:	bf00      	nop
 800391e:	3714      	adds	r7, #20
 8003920:	46bd      	mov	sp, r7
 8003922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003926:	4770      	bx	lr

08003928 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003928:	b480      	push	{r7}
 800392a:	b087      	sub	sp, #28
 800392c:	af00      	add	r7, sp, #0
 800392e:	60f8      	str	r0, [r7, #12]
 8003930:	60b9      	str	r1, [r7, #8]
 8003932:	607a      	str	r2, [r7, #4]
 8003934:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	689b      	ldr	r3, [r3, #8]
 800393a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800393c:	697b      	ldr	r3, [r7, #20]
 800393e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003942:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003944:	683b      	ldr	r3, [r7, #0]
 8003946:	021a      	lsls	r2, r3, #8
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	431a      	orrs	r2, r3
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	4313      	orrs	r3, r2
 8003950:	697a      	ldr	r2, [r7, #20]
 8003952:	4313      	orrs	r3, r2
 8003954:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	609a      	str	r2, [r3, #8]
}
 800395c:	bf00      	nop
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr

08003968 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003968:	b480      	push	{r7}
 800396a:	b087      	sub	sp, #28
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	f003 031f 	and.w	r3, r3, #31
 800397a:	2201      	movs	r2, #1
 800397c:	fa02 f303 	lsl.w	r3, r2, r3
 8003980:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	6a1a      	ldr	r2, [r3, #32]
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	43db      	mvns	r3, r3
 800398a:	401a      	ands	r2, r3
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	6a1a      	ldr	r2, [r3, #32]
 8003994:	68bb      	ldr	r3, [r7, #8]
 8003996:	f003 031f 	and.w	r3, r3, #31
 800399a:	6879      	ldr	r1, [r7, #4]
 800399c:	fa01 f303 	lsl.w	r3, r1, r3
 80039a0:	431a      	orrs	r2, r3
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	621a      	str	r2, [r3, #32]
}
 80039a6:	bf00      	nop
 80039a8:	371c      	adds	r7, #28
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr
	...

080039b4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80039b4:	b480      	push	{r7}
 80039b6:	b085      	sub	sp, #20
 80039b8:	af00      	add	r7, sp, #0
 80039ba:	6078      	str	r0, [r7, #4]
 80039bc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039c4:	2b01      	cmp	r3, #1
 80039c6:	d101      	bne.n	80039cc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80039c8:	2302      	movs	r3, #2
 80039ca:	e05a      	b.n	8003a82 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2201      	movs	r2, #1
 80039d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	685b      	ldr	r3, [r3, #4]
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	689b      	ldr	r3, [r3, #8]
 80039ea:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80039f2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80039f4:	683b      	ldr	r3, [r7, #0]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	68fa      	ldr	r2, [r7, #12]
 80039fa:	4313      	orrs	r3, r2
 80039fc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	68fa      	ldr	r2, [r7, #12]
 8003a04:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	4a21      	ldr	r2, [pc, #132]	; (8003a90 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003a0c:	4293      	cmp	r3, r2
 8003a0e:	d022      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a18:	d01d      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a1d      	ldr	r2, [pc, #116]	; (8003a94 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	d018      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	4a1b      	ldr	r2, [pc, #108]	; (8003a98 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003a2a:	4293      	cmp	r3, r2
 8003a2c:	d013      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a1a      	ldr	r2, [pc, #104]	; (8003a9c <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	4a18      	ldr	r2, [pc, #96]	; (8003aa0 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003a3e:	4293      	cmp	r3, r2
 8003a40:	d009      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a17      	ldr	r2, [pc, #92]	; (8003aa4 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a15      	ldr	r2, [pc, #84]	; (8003aa8 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d10c      	bne.n	8003a70 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003a5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003a5e:	683b      	ldr	r3, [r7, #0]
 8003a60:	685b      	ldr	r3, [r3, #4]
 8003a62:	68ba      	ldr	r2, [r7, #8]
 8003a64:	4313      	orrs	r3, r2
 8003a66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	68ba      	ldr	r2, [r7, #8]
 8003a6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	2201      	movs	r2, #1
 8003a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	2200      	movs	r2, #0
 8003a7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3714      	adds	r7, #20
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	40010000 	.word	0x40010000
 8003a94:	40000400 	.word	0x40000400
 8003a98:	40000800 	.word	0x40000800
 8003a9c:	40000c00 	.word	0x40000c00
 8003aa0:	40010400 	.word	0x40010400
 8003aa4:	40014000 	.word	0x40014000
 8003aa8:	40001800 	.word	0x40001800

08003aac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003aac:	b480      	push	{r7}
 8003aae:	b083      	sub	sp, #12
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ab4:	bf00      	nop
 8003ab6:	370c      	adds	r7, #12
 8003ab8:	46bd      	mov	sp, r7
 8003aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003abe:	4770      	bx	lr

08003ac0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ac8:	bf00      	nop
 8003aca:	370c      	adds	r7, #12
 8003acc:	46bd      	mov	sp, r7
 8003ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad2:	4770      	bx	lr

08003ad4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e03f      	b.n	8003b66 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003aec:	b2db      	uxtb	r3, r3
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d106      	bne.n	8003b00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003afa:	6878      	ldr	r0, [r7, #4]
 8003afc:	f7fd fdea 	bl	80016d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2224      	movs	r2, #36	; 0x24
 8003b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68da      	ldr	r2, [r3, #12]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003b16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f000 f829 	bl	8003b70 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	691a      	ldr	r2, [r3, #16]
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003b2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695a      	ldr	r2, [r3, #20]
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003b3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	68da      	ldr	r2, [r3, #12]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003b4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2200      	movs	r2, #0
 8003b52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2220      	movs	r2, #32
 8003b58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	2220      	movs	r2, #32
 8003b60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003b64:	2300      	movs	r3, #0
}
 8003b66:	4618      	mov	r0, r3
 8003b68:	3708      	adds	r7, #8
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}
	...

08003b70 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003b70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003b74:	b09f      	sub	sp, #124	; 0x7c
 8003b76:	af00      	add	r7, sp, #0
 8003b78:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003b7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	691b      	ldr	r3, [r3, #16]
 8003b80:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003b84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b86:	68d9      	ldr	r1, [r3, #12]
 8003b88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b8a:	681a      	ldr	r2, [r3, #0]
 8003b8c:	ea40 0301 	orr.w	r3, r0, r1
 8003b90:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003b92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b98:	691b      	ldr	r3, [r3, #16]
 8003b9a:	431a      	orrs	r2, r3
 8003b9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003b9e:	695b      	ldr	r3, [r3, #20]
 8003ba0:	431a      	orrs	r2, r3
 8003ba2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ba4:	69db      	ldr	r3, [r3, #28]
 8003ba6:	4313      	orrs	r3, r2
 8003ba8:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8003baa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	68db      	ldr	r3, [r3, #12]
 8003bb0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003bb4:	f021 010c 	bic.w	r1, r1, #12
 8003bb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bba:	681a      	ldr	r2, [r3, #0]
 8003bbc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8003bbe:	430b      	orrs	r3, r1
 8003bc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003bc2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	695b      	ldr	r3, [r3, #20]
 8003bc8:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003bcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bce:	6999      	ldr	r1, [r3, #24]
 8003bd0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bd2:	681a      	ldr	r2, [r3, #0]
 8003bd4:	ea40 0301 	orr.w	r3, r0, r1
 8003bd8:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003bda:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bdc:	681a      	ldr	r2, [r3, #0]
 8003bde:	4bc5      	ldr	r3, [pc, #788]	; (8003ef4 <UART_SetConfig+0x384>)
 8003be0:	429a      	cmp	r2, r3
 8003be2:	d004      	beq.n	8003bee <UART_SetConfig+0x7e>
 8003be4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003be6:	681a      	ldr	r2, [r3, #0]
 8003be8:	4bc3      	ldr	r3, [pc, #780]	; (8003ef8 <UART_SetConfig+0x388>)
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d103      	bne.n	8003bf6 <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003bee:	f7fe fe87 	bl	8002900 <HAL_RCC_GetPCLK2Freq>
 8003bf2:	6778      	str	r0, [r7, #116]	; 0x74
 8003bf4:	e002      	b.n	8003bfc <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003bf6:	f7fe fe6f 	bl	80028d8 <HAL_RCC_GetPCLK1Freq>
 8003bfa:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003bfc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003bfe:	69db      	ldr	r3, [r3, #28]
 8003c00:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003c04:	f040 80b6 	bne.w	8003d74 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003c08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c0a:	461c      	mov	r4, r3
 8003c0c:	f04f 0500 	mov.w	r5, #0
 8003c10:	4622      	mov	r2, r4
 8003c12:	462b      	mov	r3, r5
 8003c14:	1891      	adds	r1, r2, r2
 8003c16:	6439      	str	r1, [r7, #64]	; 0x40
 8003c18:	415b      	adcs	r3, r3
 8003c1a:	647b      	str	r3, [r7, #68]	; 0x44
 8003c1c:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003c20:	1912      	adds	r2, r2, r4
 8003c22:	eb45 0303 	adc.w	r3, r5, r3
 8003c26:	f04f 0000 	mov.w	r0, #0
 8003c2a:	f04f 0100 	mov.w	r1, #0
 8003c2e:	00d9      	lsls	r1, r3, #3
 8003c30:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c34:	00d0      	lsls	r0, r2, #3
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	1911      	adds	r1, r2, r4
 8003c3c:	6639      	str	r1, [r7, #96]	; 0x60
 8003c3e:	416b      	adcs	r3, r5
 8003c40:	667b      	str	r3, [r7, #100]	; 0x64
 8003c42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003c44:	685b      	ldr	r3, [r3, #4]
 8003c46:	461a      	mov	r2, r3
 8003c48:	f04f 0300 	mov.w	r3, #0
 8003c4c:	1891      	adds	r1, r2, r2
 8003c4e:	63b9      	str	r1, [r7, #56]	; 0x38
 8003c50:	415b      	adcs	r3, r3
 8003c52:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c54:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003c58:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8003c5c:	f7fc fb20 	bl	80002a0 <__aeabi_uldivmod>
 8003c60:	4602      	mov	r2, r0
 8003c62:	460b      	mov	r3, r1
 8003c64:	4ba5      	ldr	r3, [pc, #660]	; (8003efc <UART_SetConfig+0x38c>)
 8003c66:	fba3 2302 	umull	r2, r3, r3, r2
 8003c6a:	095b      	lsrs	r3, r3, #5
 8003c6c:	011e      	lsls	r6, r3, #4
 8003c6e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003c70:	461c      	mov	r4, r3
 8003c72:	f04f 0500 	mov.w	r5, #0
 8003c76:	4622      	mov	r2, r4
 8003c78:	462b      	mov	r3, r5
 8003c7a:	1891      	adds	r1, r2, r2
 8003c7c:	6339      	str	r1, [r7, #48]	; 0x30
 8003c7e:	415b      	adcs	r3, r3
 8003c80:	637b      	str	r3, [r7, #52]	; 0x34
 8003c82:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003c86:	1912      	adds	r2, r2, r4
 8003c88:	eb45 0303 	adc.w	r3, r5, r3
 8003c8c:	f04f 0000 	mov.w	r0, #0
 8003c90:	f04f 0100 	mov.w	r1, #0
 8003c94:	00d9      	lsls	r1, r3, #3
 8003c96:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003c9a:	00d0      	lsls	r0, r2, #3
 8003c9c:	4602      	mov	r2, r0
 8003c9e:	460b      	mov	r3, r1
 8003ca0:	1911      	adds	r1, r2, r4
 8003ca2:	65b9      	str	r1, [r7, #88]	; 0x58
 8003ca4:	416b      	adcs	r3, r5
 8003ca6:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003ca8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003caa:	685b      	ldr	r3, [r3, #4]
 8003cac:	461a      	mov	r2, r3
 8003cae:	f04f 0300 	mov.w	r3, #0
 8003cb2:	1891      	adds	r1, r2, r2
 8003cb4:	62b9      	str	r1, [r7, #40]	; 0x28
 8003cb6:	415b      	adcs	r3, r3
 8003cb8:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003cba:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003cbe:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8003cc2:	f7fc faed 	bl	80002a0 <__aeabi_uldivmod>
 8003cc6:	4602      	mov	r2, r0
 8003cc8:	460b      	mov	r3, r1
 8003cca:	4b8c      	ldr	r3, [pc, #560]	; (8003efc <UART_SetConfig+0x38c>)
 8003ccc:	fba3 1302 	umull	r1, r3, r3, r2
 8003cd0:	095b      	lsrs	r3, r3, #5
 8003cd2:	2164      	movs	r1, #100	; 0x64
 8003cd4:	fb01 f303 	mul.w	r3, r1, r3
 8003cd8:	1ad3      	subs	r3, r2, r3
 8003cda:	00db      	lsls	r3, r3, #3
 8003cdc:	3332      	adds	r3, #50	; 0x32
 8003cde:	4a87      	ldr	r2, [pc, #540]	; (8003efc <UART_SetConfig+0x38c>)
 8003ce0:	fba2 2303 	umull	r2, r3, r2, r3
 8003ce4:	095b      	lsrs	r3, r3, #5
 8003ce6:	005b      	lsls	r3, r3, #1
 8003ce8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003cec:	441e      	add	r6, r3
 8003cee:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003cf0:	4618      	mov	r0, r3
 8003cf2:	f04f 0100 	mov.w	r1, #0
 8003cf6:	4602      	mov	r2, r0
 8003cf8:	460b      	mov	r3, r1
 8003cfa:	1894      	adds	r4, r2, r2
 8003cfc:	623c      	str	r4, [r7, #32]
 8003cfe:	415b      	adcs	r3, r3
 8003d00:	627b      	str	r3, [r7, #36]	; 0x24
 8003d02:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003d06:	1812      	adds	r2, r2, r0
 8003d08:	eb41 0303 	adc.w	r3, r1, r3
 8003d0c:	f04f 0400 	mov.w	r4, #0
 8003d10:	f04f 0500 	mov.w	r5, #0
 8003d14:	00dd      	lsls	r5, r3, #3
 8003d16:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003d1a:	00d4      	lsls	r4, r2, #3
 8003d1c:	4622      	mov	r2, r4
 8003d1e:	462b      	mov	r3, r5
 8003d20:	1814      	adds	r4, r2, r0
 8003d22:	653c      	str	r4, [r7, #80]	; 0x50
 8003d24:	414b      	adcs	r3, r1
 8003d26:	657b      	str	r3, [r7, #84]	; 0x54
 8003d28:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d2a:	685b      	ldr	r3, [r3, #4]
 8003d2c:	461a      	mov	r2, r3
 8003d2e:	f04f 0300 	mov.w	r3, #0
 8003d32:	1891      	adds	r1, r2, r2
 8003d34:	61b9      	str	r1, [r7, #24]
 8003d36:	415b      	adcs	r3, r3
 8003d38:	61fb      	str	r3, [r7, #28]
 8003d3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d3e:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8003d42:	f7fc faad 	bl	80002a0 <__aeabi_uldivmod>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	4b6c      	ldr	r3, [pc, #432]	; (8003efc <UART_SetConfig+0x38c>)
 8003d4c:	fba3 1302 	umull	r1, r3, r3, r2
 8003d50:	095b      	lsrs	r3, r3, #5
 8003d52:	2164      	movs	r1, #100	; 0x64
 8003d54:	fb01 f303 	mul.w	r3, r1, r3
 8003d58:	1ad3      	subs	r3, r2, r3
 8003d5a:	00db      	lsls	r3, r3, #3
 8003d5c:	3332      	adds	r3, #50	; 0x32
 8003d5e:	4a67      	ldr	r2, [pc, #412]	; (8003efc <UART_SetConfig+0x38c>)
 8003d60:	fba2 2303 	umull	r2, r3, r2, r3
 8003d64:	095b      	lsrs	r3, r3, #5
 8003d66:	f003 0207 	and.w	r2, r3, #7
 8003d6a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	4432      	add	r2, r6
 8003d70:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8003d72:	e0b9      	b.n	8003ee8 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003d74:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003d76:	461c      	mov	r4, r3
 8003d78:	f04f 0500 	mov.w	r5, #0
 8003d7c:	4622      	mov	r2, r4
 8003d7e:	462b      	mov	r3, r5
 8003d80:	1891      	adds	r1, r2, r2
 8003d82:	6139      	str	r1, [r7, #16]
 8003d84:	415b      	adcs	r3, r3
 8003d86:	617b      	str	r3, [r7, #20]
 8003d88:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8003d8c:	1912      	adds	r2, r2, r4
 8003d8e:	eb45 0303 	adc.w	r3, r5, r3
 8003d92:	f04f 0000 	mov.w	r0, #0
 8003d96:	f04f 0100 	mov.w	r1, #0
 8003d9a:	00d9      	lsls	r1, r3, #3
 8003d9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003da0:	00d0      	lsls	r0, r2, #3
 8003da2:	4602      	mov	r2, r0
 8003da4:	460b      	mov	r3, r1
 8003da6:	eb12 0804 	adds.w	r8, r2, r4
 8003daa:	eb43 0905 	adc.w	r9, r3, r5
 8003dae:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	4618      	mov	r0, r3
 8003db4:	f04f 0100 	mov.w	r1, #0
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	008b      	lsls	r3, r1, #2
 8003dc2:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003dc6:	0082      	lsls	r2, r0, #2
 8003dc8:	4640      	mov	r0, r8
 8003dca:	4649      	mov	r1, r9
 8003dcc:	f7fc fa68 	bl	80002a0 <__aeabi_uldivmod>
 8003dd0:	4602      	mov	r2, r0
 8003dd2:	460b      	mov	r3, r1
 8003dd4:	4b49      	ldr	r3, [pc, #292]	; (8003efc <UART_SetConfig+0x38c>)
 8003dd6:	fba3 2302 	umull	r2, r3, r3, r2
 8003dda:	095b      	lsrs	r3, r3, #5
 8003ddc:	011e      	lsls	r6, r3, #4
 8003dde:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003de0:	4618      	mov	r0, r3
 8003de2:	f04f 0100 	mov.w	r1, #0
 8003de6:	4602      	mov	r2, r0
 8003de8:	460b      	mov	r3, r1
 8003dea:	1894      	adds	r4, r2, r2
 8003dec:	60bc      	str	r4, [r7, #8]
 8003dee:	415b      	adcs	r3, r3
 8003df0:	60fb      	str	r3, [r7, #12]
 8003df2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003df6:	1812      	adds	r2, r2, r0
 8003df8:	eb41 0303 	adc.w	r3, r1, r3
 8003dfc:	f04f 0400 	mov.w	r4, #0
 8003e00:	f04f 0500 	mov.w	r5, #0
 8003e04:	00dd      	lsls	r5, r3, #3
 8003e06:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e0a:	00d4      	lsls	r4, r2, #3
 8003e0c:	4622      	mov	r2, r4
 8003e0e:	462b      	mov	r3, r5
 8003e10:	1814      	adds	r4, r2, r0
 8003e12:	64bc      	str	r4, [r7, #72]	; 0x48
 8003e14:	414b      	adcs	r3, r1
 8003e16:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003e18:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e1a:	685b      	ldr	r3, [r3, #4]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f04f 0100 	mov.w	r1, #0
 8003e22:	f04f 0200 	mov.w	r2, #0
 8003e26:	f04f 0300 	mov.w	r3, #0
 8003e2a:	008b      	lsls	r3, r1, #2
 8003e2c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003e30:	0082      	lsls	r2, r0, #2
 8003e32:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8003e36:	f7fc fa33 	bl	80002a0 <__aeabi_uldivmod>
 8003e3a:	4602      	mov	r2, r0
 8003e3c:	460b      	mov	r3, r1
 8003e3e:	4b2f      	ldr	r3, [pc, #188]	; (8003efc <UART_SetConfig+0x38c>)
 8003e40:	fba3 1302 	umull	r1, r3, r3, r2
 8003e44:	095b      	lsrs	r3, r3, #5
 8003e46:	2164      	movs	r1, #100	; 0x64
 8003e48:	fb01 f303 	mul.w	r3, r1, r3
 8003e4c:	1ad3      	subs	r3, r2, r3
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	3332      	adds	r3, #50	; 0x32
 8003e52:	4a2a      	ldr	r2, [pc, #168]	; (8003efc <UART_SetConfig+0x38c>)
 8003e54:	fba2 2303 	umull	r2, r3, r2, r3
 8003e58:	095b      	lsrs	r3, r3, #5
 8003e5a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003e5e:	441e      	add	r6, r3
 8003e60:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e62:	4618      	mov	r0, r3
 8003e64:	f04f 0100 	mov.w	r1, #0
 8003e68:	4602      	mov	r2, r0
 8003e6a:	460b      	mov	r3, r1
 8003e6c:	1894      	adds	r4, r2, r2
 8003e6e:	603c      	str	r4, [r7, #0]
 8003e70:	415b      	adcs	r3, r3
 8003e72:	607b      	str	r3, [r7, #4]
 8003e74:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003e78:	1812      	adds	r2, r2, r0
 8003e7a:	eb41 0303 	adc.w	r3, r1, r3
 8003e7e:	f04f 0400 	mov.w	r4, #0
 8003e82:	f04f 0500 	mov.w	r5, #0
 8003e86:	00dd      	lsls	r5, r3, #3
 8003e88:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8003e8c:	00d4      	lsls	r4, r2, #3
 8003e8e:	4622      	mov	r2, r4
 8003e90:	462b      	mov	r3, r5
 8003e92:	eb12 0a00 	adds.w	sl, r2, r0
 8003e96:	eb43 0b01 	adc.w	fp, r3, r1
 8003e9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	f04f 0100 	mov.w	r1, #0
 8003ea4:	f04f 0200 	mov.w	r2, #0
 8003ea8:	f04f 0300 	mov.w	r3, #0
 8003eac:	008b      	lsls	r3, r1, #2
 8003eae:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8003eb2:	0082      	lsls	r2, r0, #2
 8003eb4:	4650      	mov	r0, sl
 8003eb6:	4659      	mov	r1, fp
 8003eb8:	f7fc f9f2 	bl	80002a0 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4b0e      	ldr	r3, [pc, #56]	; (8003efc <UART_SetConfig+0x38c>)
 8003ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	2164      	movs	r1, #100	; 0x64
 8003eca:	fb01 f303 	mul.w	r3, r1, r3
 8003ece:	1ad3      	subs	r3, r2, r3
 8003ed0:	011b      	lsls	r3, r3, #4
 8003ed2:	3332      	adds	r3, #50	; 0x32
 8003ed4:	4a09      	ldr	r2, [pc, #36]	; (8003efc <UART_SetConfig+0x38c>)
 8003ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8003eda:	095b      	lsrs	r3, r3, #5
 8003edc:	f003 020f 	and.w	r2, r3, #15
 8003ee0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4432      	add	r2, r6
 8003ee6:	609a      	str	r2, [r3, #8]
}
 8003ee8:	bf00      	nop
 8003eea:	377c      	adds	r7, #124	; 0x7c
 8003eec:	46bd      	mov	sp, r7
 8003eee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003ef2:	bf00      	nop
 8003ef4:	40011000 	.word	0x40011000
 8003ef8:	40011400 	.word	0x40011400
 8003efc:	51eb851f 	.word	0x51eb851f

08003f00 <__errno>:
 8003f00:	4b01      	ldr	r3, [pc, #4]	; (8003f08 <__errno+0x8>)
 8003f02:	6818      	ldr	r0, [r3, #0]
 8003f04:	4770      	bx	lr
 8003f06:	bf00      	nop
 8003f08:	20000010 	.word	0x20000010

08003f0c <__libc_init_array>:
 8003f0c:	b570      	push	{r4, r5, r6, lr}
 8003f0e:	4d0d      	ldr	r5, [pc, #52]	; (8003f44 <__libc_init_array+0x38>)
 8003f10:	4c0d      	ldr	r4, [pc, #52]	; (8003f48 <__libc_init_array+0x3c>)
 8003f12:	1b64      	subs	r4, r4, r5
 8003f14:	10a4      	asrs	r4, r4, #2
 8003f16:	2600      	movs	r6, #0
 8003f18:	42a6      	cmp	r6, r4
 8003f1a:	d109      	bne.n	8003f30 <__libc_init_array+0x24>
 8003f1c:	4d0b      	ldr	r5, [pc, #44]	; (8003f4c <__libc_init_array+0x40>)
 8003f1e:	4c0c      	ldr	r4, [pc, #48]	; (8003f50 <__libc_init_array+0x44>)
 8003f20:	f000 fc4e 	bl	80047c0 <_init>
 8003f24:	1b64      	subs	r4, r4, r5
 8003f26:	10a4      	asrs	r4, r4, #2
 8003f28:	2600      	movs	r6, #0
 8003f2a:	42a6      	cmp	r6, r4
 8003f2c:	d105      	bne.n	8003f3a <__libc_init_array+0x2e>
 8003f2e:	bd70      	pop	{r4, r5, r6, pc}
 8003f30:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f34:	4798      	blx	r3
 8003f36:	3601      	adds	r6, #1
 8003f38:	e7ee      	b.n	8003f18 <__libc_init_array+0xc>
 8003f3a:	f855 3b04 	ldr.w	r3, [r5], #4
 8003f3e:	4798      	blx	r3
 8003f40:	3601      	adds	r6, #1
 8003f42:	e7f2      	b.n	8003f2a <__libc_init_array+0x1e>
 8003f44:	08004b08 	.word	0x08004b08
 8003f48:	08004b08 	.word	0x08004b08
 8003f4c:	08004b08 	.word	0x08004b08
 8003f50:	08004b0c 	.word	0x08004b0c

08003f54 <memset>:
 8003f54:	4402      	add	r2, r0
 8003f56:	4603      	mov	r3, r0
 8003f58:	4293      	cmp	r3, r2
 8003f5a:	d100      	bne.n	8003f5e <memset+0xa>
 8003f5c:	4770      	bx	lr
 8003f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8003f62:	e7f9      	b.n	8003f58 <memset+0x4>

08003f64 <siprintf>:
 8003f64:	b40e      	push	{r1, r2, r3}
 8003f66:	b500      	push	{lr}
 8003f68:	b09c      	sub	sp, #112	; 0x70
 8003f6a:	ab1d      	add	r3, sp, #116	; 0x74
 8003f6c:	9002      	str	r0, [sp, #8]
 8003f6e:	9006      	str	r0, [sp, #24]
 8003f70:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8003f74:	4809      	ldr	r0, [pc, #36]	; (8003f9c <siprintf+0x38>)
 8003f76:	9107      	str	r1, [sp, #28]
 8003f78:	9104      	str	r1, [sp, #16]
 8003f7a:	4909      	ldr	r1, [pc, #36]	; (8003fa0 <siprintf+0x3c>)
 8003f7c:	f853 2b04 	ldr.w	r2, [r3], #4
 8003f80:	9105      	str	r1, [sp, #20]
 8003f82:	6800      	ldr	r0, [r0, #0]
 8003f84:	9301      	str	r3, [sp, #4]
 8003f86:	a902      	add	r1, sp, #8
 8003f88:	f000 f868 	bl	800405c <_svfiprintf_r>
 8003f8c:	9b02      	ldr	r3, [sp, #8]
 8003f8e:	2200      	movs	r2, #0
 8003f90:	701a      	strb	r2, [r3, #0]
 8003f92:	b01c      	add	sp, #112	; 0x70
 8003f94:	f85d eb04 	ldr.w	lr, [sp], #4
 8003f98:	b003      	add	sp, #12
 8003f9a:	4770      	bx	lr
 8003f9c:	20000010 	.word	0x20000010
 8003fa0:	ffff0208 	.word	0xffff0208

08003fa4 <__ssputs_r>:
 8003fa4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003fa8:	688e      	ldr	r6, [r1, #8]
 8003faa:	429e      	cmp	r6, r3
 8003fac:	4682      	mov	sl, r0
 8003fae:	460c      	mov	r4, r1
 8003fb0:	4690      	mov	r8, r2
 8003fb2:	461f      	mov	r7, r3
 8003fb4:	d838      	bhi.n	8004028 <__ssputs_r+0x84>
 8003fb6:	898a      	ldrh	r2, [r1, #12]
 8003fb8:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8003fbc:	d032      	beq.n	8004024 <__ssputs_r+0x80>
 8003fbe:	6825      	ldr	r5, [r4, #0]
 8003fc0:	6909      	ldr	r1, [r1, #16]
 8003fc2:	eba5 0901 	sub.w	r9, r5, r1
 8003fc6:	6965      	ldr	r5, [r4, #20]
 8003fc8:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8003fcc:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8003fd0:	3301      	adds	r3, #1
 8003fd2:	444b      	add	r3, r9
 8003fd4:	106d      	asrs	r5, r5, #1
 8003fd6:	429d      	cmp	r5, r3
 8003fd8:	bf38      	it	cc
 8003fda:	461d      	movcc	r5, r3
 8003fdc:	0553      	lsls	r3, r2, #21
 8003fde:	d531      	bpl.n	8004044 <__ssputs_r+0xa0>
 8003fe0:	4629      	mov	r1, r5
 8003fe2:	f000 fb47 	bl	8004674 <_malloc_r>
 8003fe6:	4606      	mov	r6, r0
 8003fe8:	b950      	cbnz	r0, 8004000 <__ssputs_r+0x5c>
 8003fea:	230c      	movs	r3, #12
 8003fec:	f8ca 3000 	str.w	r3, [sl]
 8003ff0:	89a3      	ldrh	r3, [r4, #12]
 8003ff2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8003ff6:	81a3      	strh	r3, [r4, #12]
 8003ff8:	f04f 30ff 	mov.w	r0, #4294967295
 8003ffc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004000:	6921      	ldr	r1, [r4, #16]
 8004002:	464a      	mov	r2, r9
 8004004:	f000 fabe 	bl	8004584 <memcpy>
 8004008:	89a3      	ldrh	r3, [r4, #12]
 800400a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800400e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8004012:	81a3      	strh	r3, [r4, #12]
 8004014:	6126      	str	r6, [r4, #16]
 8004016:	6165      	str	r5, [r4, #20]
 8004018:	444e      	add	r6, r9
 800401a:	eba5 0509 	sub.w	r5, r5, r9
 800401e:	6026      	str	r6, [r4, #0]
 8004020:	60a5      	str	r5, [r4, #8]
 8004022:	463e      	mov	r6, r7
 8004024:	42be      	cmp	r6, r7
 8004026:	d900      	bls.n	800402a <__ssputs_r+0x86>
 8004028:	463e      	mov	r6, r7
 800402a:	4632      	mov	r2, r6
 800402c:	6820      	ldr	r0, [r4, #0]
 800402e:	4641      	mov	r1, r8
 8004030:	f000 fab6 	bl	80045a0 <memmove>
 8004034:	68a3      	ldr	r3, [r4, #8]
 8004036:	6822      	ldr	r2, [r4, #0]
 8004038:	1b9b      	subs	r3, r3, r6
 800403a:	4432      	add	r2, r6
 800403c:	60a3      	str	r3, [r4, #8]
 800403e:	6022      	str	r2, [r4, #0]
 8004040:	2000      	movs	r0, #0
 8004042:	e7db      	b.n	8003ffc <__ssputs_r+0x58>
 8004044:	462a      	mov	r2, r5
 8004046:	f000 fb6f 	bl	8004728 <_realloc_r>
 800404a:	4606      	mov	r6, r0
 800404c:	2800      	cmp	r0, #0
 800404e:	d1e1      	bne.n	8004014 <__ssputs_r+0x70>
 8004050:	6921      	ldr	r1, [r4, #16]
 8004052:	4650      	mov	r0, sl
 8004054:	f000 fabe 	bl	80045d4 <_free_r>
 8004058:	e7c7      	b.n	8003fea <__ssputs_r+0x46>
	...

0800405c <_svfiprintf_r>:
 800405c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004060:	4698      	mov	r8, r3
 8004062:	898b      	ldrh	r3, [r1, #12]
 8004064:	061b      	lsls	r3, r3, #24
 8004066:	b09d      	sub	sp, #116	; 0x74
 8004068:	4607      	mov	r7, r0
 800406a:	460d      	mov	r5, r1
 800406c:	4614      	mov	r4, r2
 800406e:	d50e      	bpl.n	800408e <_svfiprintf_r+0x32>
 8004070:	690b      	ldr	r3, [r1, #16]
 8004072:	b963      	cbnz	r3, 800408e <_svfiprintf_r+0x32>
 8004074:	2140      	movs	r1, #64	; 0x40
 8004076:	f000 fafd 	bl	8004674 <_malloc_r>
 800407a:	6028      	str	r0, [r5, #0]
 800407c:	6128      	str	r0, [r5, #16]
 800407e:	b920      	cbnz	r0, 800408a <_svfiprintf_r+0x2e>
 8004080:	230c      	movs	r3, #12
 8004082:	603b      	str	r3, [r7, #0]
 8004084:	f04f 30ff 	mov.w	r0, #4294967295
 8004088:	e0d1      	b.n	800422e <_svfiprintf_r+0x1d2>
 800408a:	2340      	movs	r3, #64	; 0x40
 800408c:	616b      	str	r3, [r5, #20]
 800408e:	2300      	movs	r3, #0
 8004090:	9309      	str	r3, [sp, #36]	; 0x24
 8004092:	2320      	movs	r3, #32
 8004094:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8004098:	f8cd 800c 	str.w	r8, [sp, #12]
 800409c:	2330      	movs	r3, #48	; 0x30
 800409e:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 8004248 <_svfiprintf_r+0x1ec>
 80040a2:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80040a6:	f04f 0901 	mov.w	r9, #1
 80040aa:	4623      	mov	r3, r4
 80040ac:	469a      	mov	sl, r3
 80040ae:	f813 2b01 	ldrb.w	r2, [r3], #1
 80040b2:	b10a      	cbz	r2, 80040b8 <_svfiprintf_r+0x5c>
 80040b4:	2a25      	cmp	r2, #37	; 0x25
 80040b6:	d1f9      	bne.n	80040ac <_svfiprintf_r+0x50>
 80040b8:	ebba 0b04 	subs.w	fp, sl, r4
 80040bc:	d00b      	beq.n	80040d6 <_svfiprintf_r+0x7a>
 80040be:	465b      	mov	r3, fp
 80040c0:	4622      	mov	r2, r4
 80040c2:	4629      	mov	r1, r5
 80040c4:	4638      	mov	r0, r7
 80040c6:	f7ff ff6d 	bl	8003fa4 <__ssputs_r>
 80040ca:	3001      	adds	r0, #1
 80040cc:	f000 80aa 	beq.w	8004224 <_svfiprintf_r+0x1c8>
 80040d0:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80040d2:	445a      	add	r2, fp
 80040d4:	9209      	str	r2, [sp, #36]	; 0x24
 80040d6:	f89a 3000 	ldrb.w	r3, [sl]
 80040da:	2b00      	cmp	r3, #0
 80040dc:	f000 80a2 	beq.w	8004224 <_svfiprintf_r+0x1c8>
 80040e0:	2300      	movs	r3, #0
 80040e2:	f04f 32ff 	mov.w	r2, #4294967295
 80040e6:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80040ea:	f10a 0a01 	add.w	sl, sl, #1
 80040ee:	9304      	str	r3, [sp, #16]
 80040f0:	9307      	str	r3, [sp, #28]
 80040f2:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 80040f6:	931a      	str	r3, [sp, #104]	; 0x68
 80040f8:	4654      	mov	r4, sl
 80040fa:	2205      	movs	r2, #5
 80040fc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004100:	4851      	ldr	r0, [pc, #324]	; (8004248 <_svfiprintf_r+0x1ec>)
 8004102:	f7fc f87d 	bl	8000200 <memchr>
 8004106:	9a04      	ldr	r2, [sp, #16]
 8004108:	b9d8      	cbnz	r0, 8004142 <_svfiprintf_r+0xe6>
 800410a:	06d0      	lsls	r0, r2, #27
 800410c:	bf44      	itt	mi
 800410e:	2320      	movmi	r3, #32
 8004110:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8004114:	0711      	lsls	r1, r2, #28
 8004116:	bf44      	itt	mi
 8004118:	232b      	movmi	r3, #43	; 0x2b
 800411a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800411e:	f89a 3000 	ldrb.w	r3, [sl]
 8004122:	2b2a      	cmp	r3, #42	; 0x2a
 8004124:	d015      	beq.n	8004152 <_svfiprintf_r+0xf6>
 8004126:	9a07      	ldr	r2, [sp, #28]
 8004128:	4654      	mov	r4, sl
 800412a:	2000      	movs	r0, #0
 800412c:	f04f 0c0a 	mov.w	ip, #10
 8004130:	4621      	mov	r1, r4
 8004132:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004136:	3b30      	subs	r3, #48	; 0x30
 8004138:	2b09      	cmp	r3, #9
 800413a:	d94e      	bls.n	80041da <_svfiprintf_r+0x17e>
 800413c:	b1b0      	cbz	r0, 800416c <_svfiprintf_r+0x110>
 800413e:	9207      	str	r2, [sp, #28]
 8004140:	e014      	b.n	800416c <_svfiprintf_r+0x110>
 8004142:	eba0 0308 	sub.w	r3, r0, r8
 8004146:	fa09 f303 	lsl.w	r3, r9, r3
 800414a:	4313      	orrs	r3, r2
 800414c:	9304      	str	r3, [sp, #16]
 800414e:	46a2      	mov	sl, r4
 8004150:	e7d2      	b.n	80040f8 <_svfiprintf_r+0x9c>
 8004152:	9b03      	ldr	r3, [sp, #12]
 8004154:	1d19      	adds	r1, r3, #4
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	9103      	str	r1, [sp, #12]
 800415a:	2b00      	cmp	r3, #0
 800415c:	bfbb      	ittet	lt
 800415e:	425b      	neglt	r3, r3
 8004160:	f042 0202 	orrlt.w	r2, r2, #2
 8004164:	9307      	strge	r3, [sp, #28]
 8004166:	9307      	strlt	r3, [sp, #28]
 8004168:	bfb8      	it	lt
 800416a:	9204      	strlt	r2, [sp, #16]
 800416c:	7823      	ldrb	r3, [r4, #0]
 800416e:	2b2e      	cmp	r3, #46	; 0x2e
 8004170:	d10c      	bne.n	800418c <_svfiprintf_r+0x130>
 8004172:	7863      	ldrb	r3, [r4, #1]
 8004174:	2b2a      	cmp	r3, #42	; 0x2a
 8004176:	d135      	bne.n	80041e4 <_svfiprintf_r+0x188>
 8004178:	9b03      	ldr	r3, [sp, #12]
 800417a:	1d1a      	adds	r2, r3, #4
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	9203      	str	r2, [sp, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	bfb8      	it	lt
 8004184:	f04f 33ff 	movlt.w	r3, #4294967295
 8004188:	3402      	adds	r4, #2
 800418a:	9305      	str	r3, [sp, #20]
 800418c:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8004258 <_svfiprintf_r+0x1fc>
 8004190:	7821      	ldrb	r1, [r4, #0]
 8004192:	2203      	movs	r2, #3
 8004194:	4650      	mov	r0, sl
 8004196:	f7fc f833 	bl	8000200 <memchr>
 800419a:	b140      	cbz	r0, 80041ae <_svfiprintf_r+0x152>
 800419c:	2340      	movs	r3, #64	; 0x40
 800419e:	eba0 000a 	sub.w	r0, r0, sl
 80041a2:	fa03 f000 	lsl.w	r0, r3, r0
 80041a6:	9b04      	ldr	r3, [sp, #16]
 80041a8:	4303      	orrs	r3, r0
 80041aa:	3401      	adds	r4, #1
 80041ac:	9304      	str	r3, [sp, #16]
 80041ae:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041b2:	4826      	ldr	r0, [pc, #152]	; (800424c <_svfiprintf_r+0x1f0>)
 80041b4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80041b8:	2206      	movs	r2, #6
 80041ba:	f7fc f821 	bl	8000200 <memchr>
 80041be:	2800      	cmp	r0, #0
 80041c0:	d038      	beq.n	8004234 <_svfiprintf_r+0x1d8>
 80041c2:	4b23      	ldr	r3, [pc, #140]	; (8004250 <_svfiprintf_r+0x1f4>)
 80041c4:	bb1b      	cbnz	r3, 800420e <_svfiprintf_r+0x1b2>
 80041c6:	9b03      	ldr	r3, [sp, #12]
 80041c8:	3307      	adds	r3, #7
 80041ca:	f023 0307 	bic.w	r3, r3, #7
 80041ce:	3308      	adds	r3, #8
 80041d0:	9303      	str	r3, [sp, #12]
 80041d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80041d4:	4433      	add	r3, r6
 80041d6:	9309      	str	r3, [sp, #36]	; 0x24
 80041d8:	e767      	b.n	80040aa <_svfiprintf_r+0x4e>
 80041da:	fb0c 3202 	mla	r2, ip, r2, r3
 80041de:	460c      	mov	r4, r1
 80041e0:	2001      	movs	r0, #1
 80041e2:	e7a5      	b.n	8004130 <_svfiprintf_r+0xd4>
 80041e4:	2300      	movs	r3, #0
 80041e6:	3401      	adds	r4, #1
 80041e8:	9305      	str	r3, [sp, #20]
 80041ea:	4619      	mov	r1, r3
 80041ec:	f04f 0c0a 	mov.w	ip, #10
 80041f0:	4620      	mov	r0, r4
 80041f2:	f810 2b01 	ldrb.w	r2, [r0], #1
 80041f6:	3a30      	subs	r2, #48	; 0x30
 80041f8:	2a09      	cmp	r2, #9
 80041fa:	d903      	bls.n	8004204 <_svfiprintf_r+0x1a8>
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d0c5      	beq.n	800418c <_svfiprintf_r+0x130>
 8004200:	9105      	str	r1, [sp, #20]
 8004202:	e7c3      	b.n	800418c <_svfiprintf_r+0x130>
 8004204:	fb0c 2101 	mla	r1, ip, r1, r2
 8004208:	4604      	mov	r4, r0
 800420a:	2301      	movs	r3, #1
 800420c:	e7f0      	b.n	80041f0 <_svfiprintf_r+0x194>
 800420e:	ab03      	add	r3, sp, #12
 8004210:	9300      	str	r3, [sp, #0]
 8004212:	462a      	mov	r2, r5
 8004214:	4b0f      	ldr	r3, [pc, #60]	; (8004254 <_svfiprintf_r+0x1f8>)
 8004216:	a904      	add	r1, sp, #16
 8004218:	4638      	mov	r0, r7
 800421a:	f3af 8000 	nop.w
 800421e:	1c42      	adds	r2, r0, #1
 8004220:	4606      	mov	r6, r0
 8004222:	d1d6      	bne.n	80041d2 <_svfiprintf_r+0x176>
 8004224:	89ab      	ldrh	r3, [r5, #12]
 8004226:	065b      	lsls	r3, r3, #25
 8004228:	f53f af2c 	bmi.w	8004084 <_svfiprintf_r+0x28>
 800422c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800422e:	b01d      	add	sp, #116	; 0x74
 8004230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004234:	ab03      	add	r3, sp, #12
 8004236:	9300      	str	r3, [sp, #0]
 8004238:	462a      	mov	r2, r5
 800423a:	4b06      	ldr	r3, [pc, #24]	; (8004254 <_svfiprintf_r+0x1f8>)
 800423c:	a904      	add	r1, sp, #16
 800423e:	4638      	mov	r0, r7
 8004240:	f000 f87a 	bl	8004338 <_printf_i>
 8004244:	e7eb      	b.n	800421e <_svfiprintf_r+0x1c2>
 8004246:	bf00      	nop
 8004248:	08004acc 	.word	0x08004acc
 800424c:	08004ad6 	.word	0x08004ad6
 8004250:	00000000 	.word	0x00000000
 8004254:	08003fa5 	.word	0x08003fa5
 8004258:	08004ad2 	.word	0x08004ad2

0800425c <_printf_common>:
 800425c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004260:	4616      	mov	r6, r2
 8004262:	4699      	mov	r9, r3
 8004264:	688a      	ldr	r2, [r1, #8]
 8004266:	690b      	ldr	r3, [r1, #16]
 8004268:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800426c:	4293      	cmp	r3, r2
 800426e:	bfb8      	it	lt
 8004270:	4613      	movlt	r3, r2
 8004272:	6033      	str	r3, [r6, #0]
 8004274:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004278:	4607      	mov	r7, r0
 800427a:	460c      	mov	r4, r1
 800427c:	b10a      	cbz	r2, 8004282 <_printf_common+0x26>
 800427e:	3301      	adds	r3, #1
 8004280:	6033      	str	r3, [r6, #0]
 8004282:	6823      	ldr	r3, [r4, #0]
 8004284:	0699      	lsls	r1, r3, #26
 8004286:	bf42      	ittt	mi
 8004288:	6833      	ldrmi	r3, [r6, #0]
 800428a:	3302      	addmi	r3, #2
 800428c:	6033      	strmi	r3, [r6, #0]
 800428e:	6825      	ldr	r5, [r4, #0]
 8004290:	f015 0506 	ands.w	r5, r5, #6
 8004294:	d106      	bne.n	80042a4 <_printf_common+0x48>
 8004296:	f104 0a19 	add.w	sl, r4, #25
 800429a:	68e3      	ldr	r3, [r4, #12]
 800429c:	6832      	ldr	r2, [r6, #0]
 800429e:	1a9b      	subs	r3, r3, r2
 80042a0:	42ab      	cmp	r3, r5
 80042a2:	dc26      	bgt.n	80042f2 <_printf_common+0x96>
 80042a4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80042a8:	1e13      	subs	r3, r2, #0
 80042aa:	6822      	ldr	r2, [r4, #0]
 80042ac:	bf18      	it	ne
 80042ae:	2301      	movne	r3, #1
 80042b0:	0692      	lsls	r2, r2, #26
 80042b2:	d42b      	bmi.n	800430c <_printf_common+0xb0>
 80042b4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80042b8:	4649      	mov	r1, r9
 80042ba:	4638      	mov	r0, r7
 80042bc:	47c0      	blx	r8
 80042be:	3001      	adds	r0, #1
 80042c0:	d01e      	beq.n	8004300 <_printf_common+0xa4>
 80042c2:	6823      	ldr	r3, [r4, #0]
 80042c4:	68e5      	ldr	r5, [r4, #12]
 80042c6:	6832      	ldr	r2, [r6, #0]
 80042c8:	f003 0306 	and.w	r3, r3, #6
 80042cc:	2b04      	cmp	r3, #4
 80042ce:	bf08      	it	eq
 80042d0:	1aad      	subeq	r5, r5, r2
 80042d2:	68a3      	ldr	r3, [r4, #8]
 80042d4:	6922      	ldr	r2, [r4, #16]
 80042d6:	bf0c      	ite	eq
 80042d8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80042dc:	2500      	movne	r5, #0
 80042de:	4293      	cmp	r3, r2
 80042e0:	bfc4      	itt	gt
 80042e2:	1a9b      	subgt	r3, r3, r2
 80042e4:	18ed      	addgt	r5, r5, r3
 80042e6:	2600      	movs	r6, #0
 80042e8:	341a      	adds	r4, #26
 80042ea:	42b5      	cmp	r5, r6
 80042ec:	d11a      	bne.n	8004324 <_printf_common+0xc8>
 80042ee:	2000      	movs	r0, #0
 80042f0:	e008      	b.n	8004304 <_printf_common+0xa8>
 80042f2:	2301      	movs	r3, #1
 80042f4:	4652      	mov	r2, sl
 80042f6:	4649      	mov	r1, r9
 80042f8:	4638      	mov	r0, r7
 80042fa:	47c0      	blx	r8
 80042fc:	3001      	adds	r0, #1
 80042fe:	d103      	bne.n	8004308 <_printf_common+0xac>
 8004300:	f04f 30ff 	mov.w	r0, #4294967295
 8004304:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004308:	3501      	adds	r5, #1
 800430a:	e7c6      	b.n	800429a <_printf_common+0x3e>
 800430c:	18e1      	adds	r1, r4, r3
 800430e:	1c5a      	adds	r2, r3, #1
 8004310:	2030      	movs	r0, #48	; 0x30
 8004312:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004316:	4422      	add	r2, r4
 8004318:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800431c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004320:	3302      	adds	r3, #2
 8004322:	e7c7      	b.n	80042b4 <_printf_common+0x58>
 8004324:	2301      	movs	r3, #1
 8004326:	4622      	mov	r2, r4
 8004328:	4649      	mov	r1, r9
 800432a:	4638      	mov	r0, r7
 800432c:	47c0      	blx	r8
 800432e:	3001      	adds	r0, #1
 8004330:	d0e6      	beq.n	8004300 <_printf_common+0xa4>
 8004332:	3601      	adds	r6, #1
 8004334:	e7d9      	b.n	80042ea <_printf_common+0x8e>
	...

08004338 <_printf_i>:
 8004338:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800433c:	460c      	mov	r4, r1
 800433e:	4691      	mov	r9, r2
 8004340:	7e27      	ldrb	r7, [r4, #24]
 8004342:	990c      	ldr	r1, [sp, #48]	; 0x30
 8004344:	2f78      	cmp	r7, #120	; 0x78
 8004346:	4680      	mov	r8, r0
 8004348:	469a      	mov	sl, r3
 800434a:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800434e:	d807      	bhi.n	8004360 <_printf_i+0x28>
 8004350:	2f62      	cmp	r7, #98	; 0x62
 8004352:	d80a      	bhi.n	800436a <_printf_i+0x32>
 8004354:	2f00      	cmp	r7, #0
 8004356:	f000 80d8 	beq.w	800450a <_printf_i+0x1d2>
 800435a:	2f58      	cmp	r7, #88	; 0x58
 800435c:	f000 80a3 	beq.w	80044a6 <_printf_i+0x16e>
 8004360:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004364:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004368:	e03a      	b.n	80043e0 <_printf_i+0xa8>
 800436a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800436e:	2b15      	cmp	r3, #21
 8004370:	d8f6      	bhi.n	8004360 <_printf_i+0x28>
 8004372:	a001      	add	r0, pc, #4	; (adr r0, 8004378 <_printf_i+0x40>)
 8004374:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8004378:	080043d1 	.word	0x080043d1
 800437c:	080043e5 	.word	0x080043e5
 8004380:	08004361 	.word	0x08004361
 8004384:	08004361 	.word	0x08004361
 8004388:	08004361 	.word	0x08004361
 800438c:	08004361 	.word	0x08004361
 8004390:	080043e5 	.word	0x080043e5
 8004394:	08004361 	.word	0x08004361
 8004398:	08004361 	.word	0x08004361
 800439c:	08004361 	.word	0x08004361
 80043a0:	08004361 	.word	0x08004361
 80043a4:	080044f1 	.word	0x080044f1
 80043a8:	08004415 	.word	0x08004415
 80043ac:	080044d3 	.word	0x080044d3
 80043b0:	08004361 	.word	0x08004361
 80043b4:	08004361 	.word	0x08004361
 80043b8:	08004513 	.word	0x08004513
 80043bc:	08004361 	.word	0x08004361
 80043c0:	08004415 	.word	0x08004415
 80043c4:	08004361 	.word	0x08004361
 80043c8:	08004361 	.word	0x08004361
 80043cc:	080044db 	.word	0x080044db
 80043d0:	680b      	ldr	r3, [r1, #0]
 80043d2:	1d1a      	adds	r2, r3, #4
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	600a      	str	r2, [r1, #0]
 80043d8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80043dc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80043e0:	2301      	movs	r3, #1
 80043e2:	e0a3      	b.n	800452c <_printf_i+0x1f4>
 80043e4:	6825      	ldr	r5, [r4, #0]
 80043e6:	6808      	ldr	r0, [r1, #0]
 80043e8:	062e      	lsls	r6, r5, #24
 80043ea:	f100 0304 	add.w	r3, r0, #4
 80043ee:	d50a      	bpl.n	8004406 <_printf_i+0xce>
 80043f0:	6805      	ldr	r5, [r0, #0]
 80043f2:	600b      	str	r3, [r1, #0]
 80043f4:	2d00      	cmp	r5, #0
 80043f6:	da03      	bge.n	8004400 <_printf_i+0xc8>
 80043f8:	232d      	movs	r3, #45	; 0x2d
 80043fa:	426d      	negs	r5, r5
 80043fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004400:	485e      	ldr	r0, [pc, #376]	; (800457c <_printf_i+0x244>)
 8004402:	230a      	movs	r3, #10
 8004404:	e019      	b.n	800443a <_printf_i+0x102>
 8004406:	f015 0f40 	tst.w	r5, #64	; 0x40
 800440a:	6805      	ldr	r5, [r0, #0]
 800440c:	600b      	str	r3, [r1, #0]
 800440e:	bf18      	it	ne
 8004410:	b22d      	sxthne	r5, r5
 8004412:	e7ef      	b.n	80043f4 <_printf_i+0xbc>
 8004414:	680b      	ldr	r3, [r1, #0]
 8004416:	6825      	ldr	r5, [r4, #0]
 8004418:	1d18      	adds	r0, r3, #4
 800441a:	6008      	str	r0, [r1, #0]
 800441c:	0628      	lsls	r0, r5, #24
 800441e:	d501      	bpl.n	8004424 <_printf_i+0xec>
 8004420:	681d      	ldr	r5, [r3, #0]
 8004422:	e002      	b.n	800442a <_printf_i+0xf2>
 8004424:	0669      	lsls	r1, r5, #25
 8004426:	d5fb      	bpl.n	8004420 <_printf_i+0xe8>
 8004428:	881d      	ldrh	r5, [r3, #0]
 800442a:	4854      	ldr	r0, [pc, #336]	; (800457c <_printf_i+0x244>)
 800442c:	2f6f      	cmp	r7, #111	; 0x6f
 800442e:	bf0c      	ite	eq
 8004430:	2308      	moveq	r3, #8
 8004432:	230a      	movne	r3, #10
 8004434:	2100      	movs	r1, #0
 8004436:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800443a:	6866      	ldr	r6, [r4, #4]
 800443c:	60a6      	str	r6, [r4, #8]
 800443e:	2e00      	cmp	r6, #0
 8004440:	bfa2      	ittt	ge
 8004442:	6821      	ldrge	r1, [r4, #0]
 8004444:	f021 0104 	bicge.w	r1, r1, #4
 8004448:	6021      	strge	r1, [r4, #0]
 800444a:	b90d      	cbnz	r5, 8004450 <_printf_i+0x118>
 800444c:	2e00      	cmp	r6, #0
 800444e:	d04d      	beq.n	80044ec <_printf_i+0x1b4>
 8004450:	4616      	mov	r6, r2
 8004452:	fbb5 f1f3 	udiv	r1, r5, r3
 8004456:	fb03 5711 	mls	r7, r3, r1, r5
 800445a:	5dc7      	ldrb	r7, [r0, r7]
 800445c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004460:	462f      	mov	r7, r5
 8004462:	42bb      	cmp	r3, r7
 8004464:	460d      	mov	r5, r1
 8004466:	d9f4      	bls.n	8004452 <_printf_i+0x11a>
 8004468:	2b08      	cmp	r3, #8
 800446a:	d10b      	bne.n	8004484 <_printf_i+0x14c>
 800446c:	6823      	ldr	r3, [r4, #0]
 800446e:	07df      	lsls	r7, r3, #31
 8004470:	d508      	bpl.n	8004484 <_printf_i+0x14c>
 8004472:	6923      	ldr	r3, [r4, #16]
 8004474:	6861      	ldr	r1, [r4, #4]
 8004476:	4299      	cmp	r1, r3
 8004478:	bfde      	ittt	le
 800447a:	2330      	movle	r3, #48	; 0x30
 800447c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004480:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004484:	1b92      	subs	r2, r2, r6
 8004486:	6122      	str	r2, [r4, #16]
 8004488:	f8cd a000 	str.w	sl, [sp]
 800448c:	464b      	mov	r3, r9
 800448e:	aa03      	add	r2, sp, #12
 8004490:	4621      	mov	r1, r4
 8004492:	4640      	mov	r0, r8
 8004494:	f7ff fee2 	bl	800425c <_printf_common>
 8004498:	3001      	adds	r0, #1
 800449a:	d14c      	bne.n	8004536 <_printf_i+0x1fe>
 800449c:	f04f 30ff 	mov.w	r0, #4294967295
 80044a0:	b004      	add	sp, #16
 80044a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80044a6:	4835      	ldr	r0, [pc, #212]	; (800457c <_printf_i+0x244>)
 80044a8:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 80044ac:	6823      	ldr	r3, [r4, #0]
 80044ae:	680e      	ldr	r6, [r1, #0]
 80044b0:	061f      	lsls	r7, r3, #24
 80044b2:	f856 5b04 	ldr.w	r5, [r6], #4
 80044b6:	600e      	str	r6, [r1, #0]
 80044b8:	d514      	bpl.n	80044e4 <_printf_i+0x1ac>
 80044ba:	07d9      	lsls	r1, r3, #31
 80044bc:	bf44      	itt	mi
 80044be:	f043 0320 	orrmi.w	r3, r3, #32
 80044c2:	6023      	strmi	r3, [r4, #0]
 80044c4:	b91d      	cbnz	r5, 80044ce <_printf_i+0x196>
 80044c6:	6823      	ldr	r3, [r4, #0]
 80044c8:	f023 0320 	bic.w	r3, r3, #32
 80044cc:	6023      	str	r3, [r4, #0]
 80044ce:	2310      	movs	r3, #16
 80044d0:	e7b0      	b.n	8004434 <_printf_i+0xfc>
 80044d2:	6823      	ldr	r3, [r4, #0]
 80044d4:	f043 0320 	orr.w	r3, r3, #32
 80044d8:	6023      	str	r3, [r4, #0]
 80044da:	2378      	movs	r3, #120	; 0x78
 80044dc:	4828      	ldr	r0, [pc, #160]	; (8004580 <_printf_i+0x248>)
 80044de:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80044e2:	e7e3      	b.n	80044ac <_printf_i+0x174>
 80044e4:	065e      	lsls	r6, r3, #25
 80044e6:	bf48      	it	mi
 80044e8:	b2ad      	uxthmi	r5, r5
 80044ea:	e7e6      	b.n	80044ba <_printf_i+0x182>
 80044ec:	4616      	mov	r6, r2
 80044ee:	e7bb      	b.n	8004468 <_printf_i+0x130>
 80044f0:	680b      	ldr	r3, [r1, #0]
 80044f2:	6826      	ldr	r6, [r4, #0]
 80044f4:	6960      	ldr	r0, [r4, #20]
 80044f6:	1d1d      	adds	r5, r3, #4
 80044f8:	600d      	str	r5, [r1, #0]
 80044fa:	0635      	lsls	r5, r6, #24
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	d501      	bpl.n	8004504 <_printf_i+0x1cc>
 8004500:	6018      	str	r0, [r3, #0]
 8004502:	e002      	b.n	800450a <_printf_i+0x1d2>
 8004504:	0671      	lsls	r1, r6, #25
 8004506:	d5fb      	bpl.n	8004500 <_printf_i+0x1c8>
 8004508:	8018      	strh	r0, [r3, #0]
 800450a:	2300      	movs	r3, #0
 800450c:	6123      	str	r3, [r4, #16]
 800450e:	4616      	mov	r6, r2
 8004510:	e7ba      	b.n	8004488 <_printf_i+0x150>
 8004512:	680b      	ldr	r3, [r1, #0]
 8004514:	1d1a      	adds	r2, r3, #4
 8004516:	600a      	str	r2, [r1, #0]
 8004518:	681e      	ldr	r6, [r3, #0]
 800451a:	6862      	ldr	r2, [r4, #4]
 800451c:	2100      	movs	r1, #0
 800451e:	4630      	mov	r0, r6
 8004520:	f7fb fe6e 	bl	8000200 <memchr>
 8004524:	b108      	cbz	r0, 800452a <_printf_i+0x1f2>
 8004526:	1b80      	subs	r0, r0, r6
 8004528:	6060      	str	r0, [r4, #4]
 800452a:	6863      	ldr	r3, [r4, #4]
 800452c:	6123      	str	r3, [r4, #16]
 800452e:	2300      	movs	r3, #0
 8004530:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004534:	e7a8      	b.n	8004488 <_printf_i+0x150>
 8004536:	6923      	ldr	r3, [r4, #16]
 8004538:	4632      	mov	r2, r6
 800453a:	4649      	mov	r1, r9
 800453c:	4640      	mov	r0, r8
 800453e:	47d0      	blx	sl
 8004540:	3001      	adds	r0, #1
 8004542:	d0ab      	beq.n	800449c <_printf_i+0x164>
 8004544:	6823      	ldr	r3, [r4, #0]
 8004546:	079b      	lsls	r3, r3, #30
 8004548:	d413      	bmi.n	8004572 <_printf_i+0x23a>
 800454a:	68e0      	ldr	r0, [r4, #12]
 800454c:	9b03      	ldr	r3, [sp, #12]
 800454e:	4298      	cmp	r0, r3
 8004550:	bfb8      	it	lt
 8004552:	4618      	movlt	r0, r3
 8004554:	e7a4      	b.n	80044a0 <_printf_i+0x168>
 8004556:	2301      	movs	r3, #1
 8004558:	4632      	mov	r2, r6
 800455a:	4649      	mov	r1, r9
 800455c:	4640      	mov	r0, r8
 800455e:	47d0      	blx	sl
 8004560:	3001      	adds	r0, #1
 8004562:	d09b      	beq.n	800449c <_printf_i+0x164>
 8004564:	3501      	adds	r5, #1
 8004566:	68e3      	ldr	r3, [r4, #12]
 8004568:	9903      	ldr	r1, [sp, #12]
 800456a:	1a5b      	subs	r3, r3, r1
 800456c:	42ab      	cmp	r3, r5
 800456e:	dcf2      	bgt.n	8004556 <_printf_i+0x21e>
 8004570:	e7eb      	b.n	800454a <_printf_i+0x212>
 8004572:	2500      	movs	r5, #0
 8004574:	f104 0619 	add.w	r6, r4, #25
 8004578:	e7f5      	b.n	8004566 <_printf_i+0x22e>
 800457a:	bf00      	nop
 800457c:	08004add 	.word	0x08004add
 8004580:	08004aee 	.word	0x08004aee

08004584 <memcpy>:
 8004584:	440a      	add	r2, r1
 8004586:	4291      	cmp	r1, r2
 8004588:	f100 33ff 	add.w	r3, r0, #4294967295
 800458c:	d100      	bne.n	8004590 <memcpy+0xc>
 800458e:	4770      	bx	lr
 8004590:	b510      	push	{r4, lr}
 8004592:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004596:	f803 4f01 	strb.w	r4, [r3, #1]!
 800459a:	4291      	cmp	r1, r2
 800459c:	d1f9      	bne.n	8004592 <memcpy+0xe>
 800459e:	bd10      	pop	{r4, pc}

080045a0 <memmove>:
 80045a0:	4288      	cmp	r0, r1
 80045a2:	b510      	push	{r4, lr}
 80045a4:	eb01 0402 	add.w	r4, r1, r2
 80045a8:	d902      	bls.n	80045b0 <memmove+0x10>
 80045aa:	4284      	cmp	r4, r0
 80045ac:	4623      	mov	r3, r4
 80045ae:	d807      	bhi.n	80045c0 <memmove+0x20>
 80045b0:	1e43      	subs	r3, r0, #1
 80045b2:	42a1      	cmp	r1, r4
 80045b4:	d008      	beq.n	80045c8 <memmove+0x28>
 80045b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80045ba:	f803 2f01 	strb.w	r2, [r3, #1]!
 80045be:	e7f8      	b.n	80045b2 <memmove+0x12>
 80045c0:	4402      	add	r2, r0
 80045c2:	4601      	mov	r1, r0
 80045c4:	428a      	cmp	r2, r1
 80045c6:	d100      	bne.n	80045ca <memmove+0x2a>
 80045c8:	bd10      	pop	{r4, pc}
 80045ca:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80045ce:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80045d2:	e7f7      	b.n	80045c4 <memmove+0x24>

080045d4 <_free_r>:
 80045d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80045d6:	2900      	cmp	r1, #0
 80045d8:	d048      	beq.n	800466c <_free_r+0x98>
 80045da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80045de:	9001      	str	r0, [sp, #4]
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	f1a1 0404 	sub.w	r4, r1, #4
 80045e6:	bfb8      	it	lt
 80045e8:	18e4      	addlt	r4, r4, r3
 80045ea:	f000 f8d3 	bl	8004794 <__malloc_lock>
 80045ee:	4a20      	ldr	r2, [pc, #128]	; (8004670 <_free_r+0x9c>)
 80045f0:	9801      	ldr	r0, [sp, #4]
 80045f2:	6813      	ldr	r3, [r2, #0]
 80045f4:	4615      	mov	r5, r2
 80045f6:	b933      	cbnz	r3, 8004606 <_free_r+0x32>
 80045f8:	6063      	str	r3, [r4, #4]
 80045fa:	6014      	str	r4, [r2, #0]
 80045fc:	b003      	add	sp, #12
 80045fe:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004602:	f000 b8cd 	b.w	80047a0 <__malloc_unlock>
 8004606:	42a3      	cmp	r3, r4
 8004608:	d90b      	bls.n	8004622 <_free_r+0x4e>
 800460a:	6821      	ldr	r1, [r4, #0]
 800460c:	1862      	adds	r2, r4, r1
 800460e:	4293      	cmp	r3, r2
 8004610:	bf04      	itt	eq
 8004612:	681a      	ldreq	r2, [r3, #0]
 8004614:	685b      	ldreq	r3, [r3, #4]
 8004616:	6063      	str	r3, [r4, #4]
 8004618:	bf04      	itt	eq
 800461a:	1852      	addeq	r2, r2, r1
 800461c:	6022      	streq	r2, [r4, #0]
 800461e:	602c      	str	r4, [r5, #0]
 8004620:	e7ec      	b.n	80045fc <_free_r+0x28>
 8004622:	461a      	mov	r2, r3
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	b10b      	cbz	r3, 800462c <_free_r+0x58>
 8004628:	42a3      	cmp	r3, r4
 800462a:	d9fa      	bls.n	8004622 <_free_r+0x4e>
 800462c:	6811      	ldr	r1, [r2, #0]
 800462e:	1855      	adds	r5, r2, r1
 8004630:	42a5      	cmp	r5, r4
 8004632:	d10b      	bne.n	800464c <_free_r+0x78>
 8004634:	6824      	ldr	r4, [r4, #0]
 8004636:	4421      	add	r1, r4
 8004638:	1854      	adds	r4, r2, r1
 800463a:	42a3      	cmp	r3, r4
 800463c:	6011      	str	r1, [r2, #0]
 800463e:	d1dd      	bne.n	80045fc <_free_r+0x28>
 8004640:	681c      	ldr	r4, [r3, #0]
 8004642:	685b      	ldr	r3, [r3, #4]
 8004644:	6053      	str	r3, [r2, #4]
 8004646:	4421      	add	r1, r4
 8004648:	6011      	str	r1, [r2, #0]
 800464a:	e7d7      	b.n	80045fc <_free_r+0x28>
 800464c:	d902      	bls.n	8004654 <_free_r+0x80>
 800464e:	230c      	movs	r3, #12
 8004650:	6003      	str	r3, [r0, #0]
 8004652:	e7d3      	b.n	80045fc <_free_r+0x28>
 8004654:	6825      	ldr	r5, [r4, #0]
 8004656:	1961      	adds	r1, r4, r5
 8004658:	428b      	cmp	r3, r1
 800465a:	bf04      	itt	eq
 800465c:	6819      	ldreq	r1, [r3, #0]
 800465e:	685b      	ldreq	r3, [r3, #4]
 8004660:	6063      	str	r3, [r4, #4]
 8004662:	bf04      	itt	eq
 8004664:	1949      	addeq	r1, r1, r5
 8004666:	6021      	streq	r1, [r4, #0]
 8004668:	6054      	str	r4, [r2, #4]
 800466a:	e7c7      	b.n	80045fc <_free_r+0x28>
 800466c:	b003      	add	sp, #12
 800466e:	bd30      	pop	{r4, r5, pc}
 8004670:	200008bc 	.word	0x200008bc

08004674 <_malloc_r>:
 8004674:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004676:	1ccd      	adds	r5, r1, #3
 8004678:	f025 0503 	bic.w	r5, r5, #3
 800467c:	3508      	adds	r5, #8
 800467e:	2d0c      	cmp	r5, #12
 8004680:	bf38      	it	cc
 8004682:	250c      	movcc	r5, #12
 8004684:	2d00      	cmp	r5, #0
 8004686:	4606      	mov	r6, r0
 8004688:	db01      	blt.n	800468e <_malloc_r+0x1a>
 800468a:	42a9      	cmp	r1, r5
 800468c:	d903      	bls.n	8004696 <_malloc_r+0x22>
 800468e:	230c      	movs	r3, #12
 8004690:	6033      	str	r3, [r6, #0]
 8004692:	2000      	movs	r0, #0
 8004694:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004696:	f000 f87d 	bl	8004794 <__malloc_lock>
 800469a:	4921      	ldr	r1, [pc, #132]	; (8004720 <_malloc_r+0xac>)
 800469c:	680a      	ldr	r2, [r1, #0]
 800469e:	4614      	mov	r4, r2
 80046a0:	b99c      	cbnz	r4, 80046ca <_malloc_r+0x56>
 80046a2:	4f20      	ldr	r7, [pc, #128]	; (8004724 <_malloc_r+0xb0>)
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	b923      	cbnz	r3, 80046b2 <_malloc_r+0x3e>
 80046a8:	4621      	mov	r1, r4
 80046aa:	4630      	mov	r0, r6
 80046ac:	f000 f862 	bl	8004774 <_sbrk_r>
 80046b0:	6038      	str	r0, [r7, #0]
 80046b2:	4629      	mov	r1, r5
 80046b4:	4630      	mov	r0, r6
 80046b6:	f000 f85d 	bl	8004774 <_sbrk_r>
 80046ba:	1c43      	adds	r3, r0, #1
 80046bc:	d123      	bne.n	8004706 <_malloc_r+0x92>
 80046be:	230c      	movs	r3, #12
 80046c0:	6033      	str	r3, [r6, #0]
 80046c2:	4630      	mov	r0, r6
 80046c4:	f000 f86c 	bl	80047a0 <__malloc_unlock>
 80046c8:	e7e3      	b.n	8004692 <_malloc_r+0x1e>
 80046ca:	6823      	ldr	r3, [r4, #0]
 80046cc:	1b5b      	subs	r3, r3, r5
 80046ce:	d417      	bmi.n	8004700 <_malloc_r+0x8c>
 80046d0:	2b0b      	cmp	r3, #11
 80046d2:	d903      	bls.n	80046dc <_malloc_r+0x68>
 80046d4:	6023      	str	r3, [r4, #0]
 80046d6:	441c      	add	r4, r3
 80046d8:	6025      	str	r5, [r4, #0]
 80046da:	e004      	b.n	80046e6 <_malloc_r+0x72>
 80046dc:	6863      	ldr	r3, [r4, #4]
 80046de:	42a2      	cmp	r2, r4
 80046e0:	bf0c      	ite	eq
 80046e2:	600b      	streq	r3, [r1, #0]
 80046e4:	6053      	strne	r3, [r2, #4]
 80046e6:	4630      	mov	r0, r6
 80046e8:	f000 f85a 	bl	80047a0 <__malloc_unlock>
 80046ec:	f104 000b 	add.w	r0, r4, #11
 80046f0:	1d23      	adds	r3, r4, #4
 80046f2:	f020 0007 	bic.w	r0, r0, #7
 80046f6:	1ac2      	subs	r2, r0, r3
 80046f8:	d0cc      	beq.n	8004694 <_malloc_r+0x20>
 80046fa:	1a1b      	subs	r3, r3, r0
 80046fc:	50a3      	str	r3, [r4, r2]
 80046fe:	e7c9      	b.n	8004694 <_malloc_r+0x20>
 8004700:	4622      	mov	r2, r4
 8004702:	6864      	ldr	r4, [r4, #4]
 8004704:	e7cc      	b.n	80046a0 <_malloc_r+0x2c>
 8004706:	1cc4      	adds	r4, r0, #3
 8004708:	f024 0403 	bic.w	r4, r4, #3
 800470c:	42a0      	cmp	r0, r4
 800470e:	d0e3      	beq.n	80046d8 <_malloc_r+0x64>
 8004710:	1a21      	subs	r1, r4, r0
 8004712:	4630      	mov	r0, r6
 8004714:	f000 f82e 	bl	8004774 <_sbrk_r>
 8004718:	3001      	adds	r0, #1
 800471a:	d1dd      	bne.n	80046d8 <_malloc_r+0x64>
 800471c:	e7cf      	b.n	80046be <_malloc_r+0x4a>
 800471e:	bf00      	nop
 8004720:	200008bc 	.word	0x200008bc
 8004724:	200008c0 	.word	0x200008c0

08004728 <_realloc_r>:
 8004728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800472a:	4607      	mov	r7, r0
 800472c:	4614      	mov	r4, r2
 800472e:	460e      	mov	r6, r1
 8004730:	b921      	cbnz	r1, 800473c <_realloc_r+0x14>
 8004732:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 8004736:	4611      	mov	r1, r2
 8004738:	f7ff bf9c 	b.w	8004674 <_malloc_r>
 800473c:	b922      	cbnz	r2, 8004748 <_realloc_r+0x20>
 800473e:	f7ff ff49 	bl	80045d4 <_free_r>
 8004742:	4625      	mov	r5, r4
 8004744:	4628      	mov	r0, r5
 8004746:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004748:	f000 f830 	bl	80047ac <_malloc_usable_size_r>
 800474c:	42a0      	cmp	r0, r4
 800474e:	d20f      	bcs.n	8004770 <_realloc_r+0x48>
 8004750:	4621      	mov	r1, r4
 8004752:	4638      	mov	r0, r7
 8004754:	f7ff ff8e 	bl	8004674 <_malloc_r>
 8004758:	4605      	mov	r5, r0
 800475a:	2800      	cmp	r0, #0
 800475c:	d0f2      	beq.n	8004744 <_realloc_r+0x1c>
 800475e:	4631      	mov	r1, r6
 8004760:	4622      	mov	r2, r4
 8004762:	f7ff ff0f 	bl	8004584 <memcpy>
 8004766:	4631      	mov	r1, r6
 8004768:	4638      	mov	r0, r7
 800476a:	f7ff ff33 	bl	80045d4 <_free_r>
 800476e:	e7e9      	b.n	8004744 <_realloc_r+0x1c>
 8004770:	4635      	mov	r5, r6
 8004772:	e7e7      	b.n	8004744 <_realloc_r+0x1c>

08004774 <_sbrk_r>:
 8004774:	b538      	push	{r3, r4, r5, lr}
 8004776:	4d06      	ldr	r5, [pc, #24]	; (8004790 <_sbrk_r+0x1c>)
 8004778:	2300      	movs	r3, #0
 800477a:	4604      	mov	r4, r0
 800477c:	4608      	mov	r0, r1
 800477e:	602b      	str	r3, [r5, #0]
 8004780:	f7fd f87e 	bl	8001880 <_sbrk>
 8004784:	1c43      	adds	r3, r0, #1
 8004786:	d102      	bne.n	800478e <_sbrk_r+0x1a>
 8004788:	682b      	ldr	r3, [r5, #0]
 800478a:	b103      	cbz	r3, 800478e <_sbrk_r+0x1a>
 800478c:	6023      	str	r3, [r4, #0]
 800478e:	bd38      	pop	{r3, r4, r5, pc}
 8004790:	200009bc 	.word	0x200009bc

08004794 <__malloc_lock>:
 8004794:	4801      	ldr	r0, [pc, #4]	; (800479c <__malloc_lock+0x8>)
 8004796:	f000 b811 	b.w	80047bc <__retarget_lock_acquire_recursive>
 800479a:	bf00      	nop
 800479c:	200009c4 	.word	0x200009c4

080047a0 <__malloc_unlock>:
 80047a0:	4801      	ldr	r0, [pc, #4]	; (80047a8 <__malloc_unlock+0x8>)
 80047a2:	f000 b80c 	b.w	80047be <__retarget_lock_release_recursive>
 80047a6:	bf00      	nop
 80047a8:	200009c4 	.word	0x200009c4

080047ac <_malloc_usable_size_r>:
 80047ac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80047b0:	1f18      	subs	r0, r3, #4
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	bfbc      	itt	lt
 80047b6:	580b      	ldrlt	r3, [r1, r0]
 80047b8:	18c0      	addlt	r0, r0, r3
 80047ba:	4770      	bx	lr

080047bc <__retarget_lock_acquire_recursive>:
 80047bc:	4770      	bx	lr

080047be <__retarget_lock_release_recursive>:
 80047be:	4770      	bx	lr

080047c0 <_init>:
 80047c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047c2:	bf00      	nop
 80047c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047c6:	bc08      	pop	{r3}
 80047c8:	469e      	mov	lr, r3
 80047ca:	4770      	bx	lr

080047cc <_fini>:
 80047cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80047ce:	bf00      	nop
 80047d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80047d2:	bc08      	pop	{r3}
 80047d4:	469e      	mov	lr, r3
 80047d6:	4770      	bx	lr
