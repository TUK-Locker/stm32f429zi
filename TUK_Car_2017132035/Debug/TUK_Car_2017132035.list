
TUK_Car_2017132035.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000064c0  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000954  08006670  08006670  00016670  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006fc4  08006fc4  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08006fc4  08006fc4  00016fc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006fcc  08006fcc  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006fcc  08006fcc  00016fcc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006fd0  08006fd0  00016fd0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08006fd4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000200a8  2**0
                  CONTENTS
 10 .bss          00000a04  200000a8  200000a8  000200a8  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000aac  20000aac  000200a8  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 13 .debug_info   000108e0  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002074  00000000  00000000  000309b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ce8  00000000  00000000  00032a30  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000c60  00000000  00000000  00033718  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023c50  00000000  00000000  00034378  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000f34d  00000000  00000000  00057fc8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da884  00000000  00000000  00067315  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000053  00000000  00000000  00141b99  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000039f8  00000000  00000000  00141bec  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200000a8 	.word	0x200000a8
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08006658 	.word	0x08006658

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200000ac 	.word	0x200000ac
 80001ec:	08006658 	.word	0x08006658

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b96e 	b.w	80005b4 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9d08      	ldr	r5, [sp, #32]
 80002f6:	4604      	mov	r4, r0
 80002f8:	468c      	mov	ip, r1
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8083 	bne.w	8000406 <__udivmoddi4+0x116>
 8000300:	428a      	cmp	r2, r1
 8000302:	4617      	mov	r7, r2
 8000304:	d947      	bls.n	8000396 <__udivmoddi4+0xa6>
 8000306:	fab2 f282 	clz	r2, r2
 800030a:	b142      	cbz	r2, 800031e <__udivmoddi4+0x2e>
 800030c:	f1c2 0020 	rsb	r0, r2, #32
 8000310:	fa24 f000 	lsr.w	r0, r4, r0
 8000314:	4091      	lsls	r1, r2
 8000316:	4097      	lsls	r7, r2
 8000318:	ea40 0c01 	orr.w	ip, r0, r1
 800031c:	4094      	lsls	r4, r2
 800031e:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000322:	0c23      	lsrs	r3, r4, #16
 8000324:	fbbc f6f8 	udiv	r6, ip, r8
 8000328:	fa1f fe87 	uxth.w	lr, r7
 800032c:	fb08 c116 	mls	r1, r8, r6, ip
 8000330:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000334:	fb06 f10e 	mul.w	r1, r6, lr
 8000338:	4299      	cmp	r1, r3
 800033a:	d909      	bls.n	8000350 <__udivmoddi4+0x60>
 800033c:	18fb      	adds	r3, r7, r3
 800033e:	f106 30ff 	add.w	r0, r6, #4294967295
 8000342:	f080 8119 	bcs.w	8000578 <__udivmoddi4+0x288>
 8000346:	4299      	cmp	r1, r3
 8000348:	f240 8116 	bls.w	8000578 <__udivmoddi4+0x288>
 800034c:	3e02      	subs	r6, #2
 800034e:	443b      	add	r3, r7
 8000350:	1a5b      	subs	r3, r3, r1
 8000352:	b2a4      	uxth	r4, r4
 8000354:	fbb3 f0f8 	udiv	r0, r3, r8
 8000358:	fb08 3310 	mls	r3, r8, r0, r3
 800035c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000360:	fb00 fe0e 	mul.w	lr, r0, lr
 8000364:	45a6      	cmp	lr, r4
 8000366:	d909      	bls.n	800037c <__udivmoddi4+0x8c>
 8000368:	193c      	adds	r4, r7, r4
 800036a:	f100 33ff 	add.w	r3, r0, #4294967295
 800036e:	f080 8105 	bcs.w	800057c <__udivmoddi4+0x28c>
 8000372:	45a6      	cmp	lr, r4
 8000374:	f240 8102 	bls.w	800057c <__udivmoddi4+0x28c>
 8000378:	3802      	subs	r0, #2
 800037a:	443c      	add	r4, r7
 800037c:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000380:	eba4 040e 	sub.w	r4, r4, lr
 8000384:	2600      	movs	r6, #0
 8000386:	b11d      	cbz	r5, 8000390 <__udivmoddi4+0xa0>
 8000388:	40d4      	lsrs	r4, r2
 800038a:	2300      	movs	r3, #0
 800038c:	e9c5 4300 	strd	r4, r3, [r5]
 8000390:	4631      	mov	r1, r6
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	b902      	cbnz	r2, 800039a <__udivmoddi4+0xaa>
 8000398:	deff      	udf	#255	; 0xff
 800039a:	fab2 f282 	clz	r2, r2
 800039e:	2a00      	cmp	r2, #0
 80003a0:	d150      	bne.n	8000444 <__udivmoddi4+0x154>
 80003a2:	1bcb      	subs	r3, r1, r7
 80003a4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	2601      	movs	r6, #1
 80003ae:	fbb3 fcfe 	udiv	ip, r3, lr
 80003b2:	0c21      	lsrs	r1, r4, #16
 80003b4:	fb0e 331c 	mls	r3, lr, ip, r3
 80003b8:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003bc:	fb08 f30c 	mul.w	r3, r8, ip
 80003c0:	428b      	cmp	r3, r1
 80003c2:	d907      	bls.n	80003d4 <__udivmoddi4+0xe4>
 80003c4:	1879      	adds	r1, r7, r1
 80003c6:	f10c 30ff 	add.w	r0, ip, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0xe2>
 80003cc:	428b      	cmp	r3, r1
 80003ce:	f200 80e9 	bhi.w	80005a4 <__udivmoddi4+0x2b4>
 80003d2:	4684      	mov	ip, r0
 80003d4:	1ac9      	subs	r1, r1, r3
 80003d6:	b2a3      	uxth	r3, r4
 80003d8:	fbb1 f0fe 	udiv	r0, r1, lr
 80003dc:	fb0e 1110 	mls	r1, lr, r0, r1
 80003e0:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80003e4:	fb08 f800 	mul.w	r8, r8, r0
 80003e8:	45a0      	cmp	r8, r4
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x10c>
 80003ec:	193c      	adds	r4, r7, r4
 80003ee:	f100 33ff 	add.w	r3, r0, #4294967295
 80003f2:	d202      	bcs.n	80003fa <__udivmoddi4+0x10a>
 80003f4:	45a0      	cmp	r8, r4
 80003f6:	f200 80d9 	bhi.w	80005ac <__udivmoddi4+0x2bc>
 80003fa:	4618      	mov	r0, r3
 80003fc:	eba4 0408 	sub.w	r4, r4, r8
 8000400:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000404:	e7bf      	b.n	8000386 <__udivmoddi4+0x96>
 8000406:	428b      	cmp	r3, r1
 8000408:	d909      	bls.n	800041e <__udivmoddi4+0x12e>
 800040a:	2d00      	cmp	r5, #0
 800040c:	f000 80b1 	beq.w	8000572 <__udivmoddi4+0x282>
 8000410:	2600      	movs	r6, #0
 8000412:	e9c5 0100 	strd	r0, r1, [r5]
 8000416:	4630      	mov	r0, r6
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	fab3 f683 	clz	r6, r3
 8000422:	2e00      	cmp	r6, #0
 8000424:	d14a      	bne.n	80004bc <__udivmoddi4+0x1cc>
 8000426:	428b      	cmp	r3, r1
 8000428:	d302      	bcc.n	8000430 <__udivmoddi4+0x140>
 800042a:	4282      	cmp	r2, r0
 800042c:	f200 80b8 	bhi.w	80005a0 <__udivmoddi4+0x2b0>
 8000430:	1a84      	subs	r4, r0, r2
 8000432:	eb61 0103 	sbc.w	r1, r1, r3
 8000436:	2001      	movs	r0, #1
 8000438:	468c      	mov	ip, r1
 800043a:	2d00      	cmp	r5, #0
 800043c:	d0a8      	beq.n	8000390 <__udivmoddi4+0xa0>
 800043e:	e9c5 4c00 	strd	r4, ip, [r5]
 8000442:	e7a5      	b.n	8000390 <__udivmoddi4+0xa0>
 8000444:	f1c2 0320 	rsb	r3, r2, #32
 8000448:	fa20 f603 	lsr.w	r6, r0, r3
 800044c:	4097      	lsls	r7, r2
 800044e:	fa01 f002 	lsl.w	r0, r1, r2
 8000452:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000456:	40d9      	lsrs	r1, r3
 8000458:	4330      	orrs	r0, r6
 800045a:	0c03      	lsrs	r3, r0, #16
 800045c:	fbb1 f6fe 	udiv	r6, r1, lr
 8000460:	fa1f f887 	uxth.w	r8, r7
 8000464:	fb0e 1116 	mls	r1, lr, r6, r1
 8000468:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800046c:	fb06 f108 	mul.w	r1, r6, r8
 8000470:	4299      	cmp	r1, r3
 8000472:	fa04 f402 	lsl.w	r4, r4, r2
 8000476:	d909      	bls.n	800048c <__udivmoddi4+0x19c>
 8000478:	18fb      	adds	r3, r7, r3
 800047a:	f106 3cff 	add.w	ip, r6, #4294967295
 800047e:	f080 808d 	bcs.w	800059c <__udivmoddi4+0x2ac>
 8000482:	4299      	cmp	r1, r3
 8000484:	f240 808a 	bls.w	800059c <__udivmoddi4+0x2ac>
 8000488:	3e02      	subs	r6, #2
 800048a:	443b      	add	r3, r7
 800048c:	1a5b      	subs	r3, r3, r1
 800048e:	b281      	uxth	r1, r0
 8000490:	fbb3 f0fe 	udiv	r0, r3, lr
 8000494:	fb0e 3310 	mls	r3, lr, r0, r3
 8000498:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800049c:	fb00 f308 	mul.w	r3, r0, r8
 80004a0:	428b      	cmp	r3, r1
 80004a2:	d907      	bls.n	80004b4 <__udivmoddi4+0x1c4>
 80004a4:	1879      	adds	r1, r7, r1
 80004a6:	f100 3cff 	add.w	ip, r0, #4294967295
 80004aa:	d273      	bcs.n	8000594 <__udivmoddi4+0x2a4>
 80004ac:	428b      	cmp	r3, r1
 80004ae:	d971      	bls.n	8000594 <__udivmoddi4+0x2a4>
 80004b0:	3802      	subs	r0, #2
 80004b2:	4439      	add	r1, r7
 80004b4:	1acb      	subs	r3, r1, r3
 80004b6:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80004ba:	e778      	b.n	80003ae <__udivmoddi4+0xbe>
 80004bc:	f1c6 0c20 	rsb	ip, r6, #32
 80004c0:	fa03 f406 	lsl.w	r4, r3, r6
 80004c4:	fa22 f30c 	lsr.w	r3, r2, ip
 80004c8:	431c      	orrs	r4, r3
 80004ca:	fa20 f70c 	lsr.w	r7, r0, ip
 80004ce:	fa01 f306 	lsl.w	r3, r1, r6
 80004d2:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80004d6:	fa21 f10c 	lsr.w	r1, r1, ip
 80004da:	431f      	orrs	r7, r3
 80004dc:	0c3b      	lsrs	r3, r7, #16
 80004de:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e2:	fa1f f884 	uxth.w	r8, r4
 80004e6:	fb0e 1119 	mls	r1, lr, r9, r1
 80004ea:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80004ee:	fb09 fa08 	mul.w	sl, r9, r8
 80004f2:	458a      	cmp	sl, r1
 80004f4:	fa02 f206 	lsl.w	r2, r2, r6
 80004f8:	fa00 f306 	lsl.w	r3, r0, r6
 80004fc:	d908      	bls.n	8000510 <__udivmoddi4+0x220>
 80004fe:	1861      	adds	r1, r4, r1
 8000500:	f109 30ff 	add.w	r0, r9, #4294967295
 8000504:	d248      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 8000506:	458a      	cmp	sl, r1
 8000508:	d946      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800050a:	f1a9 0902 	sub.w	r9, r9, #2
 800050e:	4421      	add	r1, r4
 8000510:	eba1 010a 	sub.w	r1, r1, sl
 8000514:	b2bf      	uxth	r7, r7
 8000516:	fbb1 f0fe 	udiv	r0, r1, lr
 800051a:	fb0e 1110 	mls	r1, lr, r0, r1
 800051e:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000522:	fb00 f808 	mul.w	r8, r0, r8
 8000526:	45b8      	cmp	r8, r7
 8000528:	d907      	bls.n	800053a <__udivmoddi4+0x24a>
 800052a:	19e7      	adds	r7, r4, r7
 800052c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000530:	d22e      	bcs.n	8000590 <__udivmoddi4+0x2a0>
 8000532:	45b8      	cmp	r8, r7
 8000534:	d92c      	bls.n	8000590 <__udivmoddi4+0x2a0>
 8000536:	3802      	subs	r0, #2
 8000538:	4427      	add	r7, r4
 800053a:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 800053e:	eba7 0708 	sub.w	r7, r7, r8
 8000542:	fba0 8902 	umull	r8, r9, r0, r2
 8000546:	454f      	cmp	r7, r9
 8000548:	46c6      	mov	lr, r8
 800054a:	4649      	mov	r1, r9
 800054c:	d31a      	bcc.n	8000584 <__udivmoddi4+0x294>
 800054e:	d017      	beq.n	8000580 <__udivmoddi4+0x290>
 8000550:	b15d      	cbz	r5, 800056a <__udivmoddi4+0x27a>
 8000552:	ebb3 020e 	subs.w	r2, r3, lr
 8000556:	eb67 0701 	sbc.w	r7, r7, r1
 800055a:	fa07 fc0c 	lsl.w	ip, r7, ip
 800055e:	40f2      	lsrs	r2, r6
 8000560:	ea4c 0202 	orr.w	r2, ip, r2
 8000564:	40f7      	lsrs	r7, r6
 8000566:	e9c5 2700 	strd	r2, r7, [r5]
 800056a:	2600      	movs	r6, #0
 800056c:	4631      	mov	r1, r6
 800056e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000572:	462e      	mov	r6, r5
 8000574:	4628      	mov	r0, r5
 8000576:	e70b      	b.n	8000390 <__udivmoddi4+0xa0>
 8000578:	4606      	mov	r6, r0
 800057a:	e6e9      	b.n	8000350 <__udivmoddi4+0x60>
 800057c:	4618      	mov	r0, r3
 800057e:	e6fd      	b.n	800037c <__udivmoddi4+0x8c>
 8000580:	4543      	cmp	r3, r8
 8000582:	d2e5      	bcs.n	8000550 <__udivmoddi4+0x260>
 8000584:	ebb8 0e02 	subs.w	lr, r8, r2
 8000588:	eb69 0104 	sbc.w	r1, r9, r4
 800058c:	3801      	subs	r0, #1
 800058e:	e7df      	b.n	8000550 <__udivmoddi4+0x260>
 8000590:	4608      	mov	r0, r1
 8000592:	e7d2      	b.n	800053a <__udivmoddi4+0x24a>
 8000594:	4660      	mov	r0, ip
 8000596:	e78d      	b.n	80004b4 <__udivmoddi4+0x1c4>
 8000598:	4681      	mov	r9, r0
 800059a:	e7b9      	b.n	8000510 <__udivmoddi4+0x220>
 800059c:	4666      	mov	r6, ip
 800059e:	e775      	b.n	800048c <__udivmoddi4+0x19c>
 80005a0:	4630      	mov	r0, r6
 80005a2:	e74a      	b.n	800043a <__udivmoddi4+0x14a>
 80005a4:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a8:	4439      	add	r1, r7
 80005aa:	e713      	b.n	80003d4 <__udivmoddi4+0xe4>
 80005ac:	3802      	subs	r0, #2
 80005ae:	443c      	add	r4, r7
 80005b0:	e724      	b.n	80003fc <__udivmoddi4+0x10c>
 80005b2:	bf00      	nop

080005b4 <__aeabi_idiv0>:
 80005b4:	4770      	bx	lr
 80005b6:	bf00      	nop

080005b8 <ESP_Init>:


/*****************************************************************************************************************************************/

void ESP_Init (char *SSID, char *PASSWD)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b098      	sub	sp, #96	; 0x60
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
 80005c0:	6039      	str	r1, [r7, #0]
   char data[80];

   Ringbuf_init();
 80005c2:	f000 fdcf 	bl	8001164 <Ringbuf_init>

   Uart_sendstring("AT+RST\r\n", wifi_uart);
 80005c6:	4965      	ldr	r1, [pc, #404]	; (800075c <ESP_Init+0x1a4>)
 80005c8:	4865      	ldr	r0, [pc, #404]	; (8000760 <ESP_Init+0x1a8>)
 80005ca:	f001 f83c 	bl	8001646 <Uart_sendstring>
   Uart_sendstring("RESETTING.", pc_uart);
 80005ce:	4965      	ldr	r1, [pc, #404]	; (8000764 <ESP_Init+0x1ac>)
 80005d0:	4865      	ldr	r0, [pc, #404]	; (8000768 <ESP_Init+0x1b0>)
 80005d2:	f001 f838 	bl	8001646 <Uart_sendstring>
   for (int i=0; i<5; i++)
 80005d6:	2300      	movs	r3, #0
 80005d8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005da:	e00a      	b.n	80005f2 <ESP_Init+0x3a>
   {
      Uart_sendstring(".", pc_uart);
 80005dc:	4961      	ldr	r1, [pc, #388]	; (8000764 <ESP_Init+0x1ac>)
 80005de:	4863      	ldr	r0, [pc, #396]	; (800076c <ESP_Init+0x1b4>)
 80005e0:	f001 f831 	bl	8001646 <Uart_sendstring>
      HAL_Delay(1000);
 80005e4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80005e8:	f002 ff7a 	bl	80034e0 <HAL_Delay>
   for (int i=0; i<5; i++)
 80005ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005ee:	3301      	adds	r3, #1
 80005f0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80005f2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80005f4:	2b04      	cmp	r3, #4
 80005f6:	ddf1      	ble.n	80005dc <ESP_Init+0x24>
   }

   /********* AT **********/
   Uart_sendstring("AT\r\n", wifi_uart);
 80005f8:	4958      	ldr	r1, [pc, #352]	; (800075c <ESP_Init+0x1a4>)
 80005fa:	485d      	ldr	r0, [pc, #372]	; (8000770 <ESP_Init+0x1b8>)
 80005fc:	f001 f823 	bl	8001646 <Uart_sendstring>
   while(!(Wait_for("AT\r\r\n\r\nOK\r\n", wifi_uart)));
 8000600:	bf00      	nop
 8000602:	4956      	ldr	r1, [pc, #344]	; (800075c <ESP_Init+0x1a4>)
 8000604:	485b      	ldr	r0, [pc, #364]	; (8000774 <ESP_Init+0x1bc>)
 8000606:	f001 f8b3 	bl	8001770 <Wait_for>
 800060a:	4603      	mov	r3, r0
 800060c:	2b00      	cmp	r3, #0
 800060e:	d0f8      	beq.n	8000602 <ESP_Init+0x4a>
   Uart_sendstring("AT---->OK\n\n", pc_uart);
 8000610:	4954      	ldr	r1, [pc, #336]	; (8000764 <ESP_Init+0x1ac>)
 8000612:	4859      	ldr	r0, [pc, #356]	; (8000778 <ESP_Init+0x1c0>)
 8000614:	f001 f817 	bl	8001646 <Uart_sendstring>


   /********* AT+CWMODE=1 **********/
   Uart_sendstring("AT+CWMODE=1\r\n", wifi_uart);
 8000618:	4950      	ldr	r1, [pc, #320]	; (800075c <ESP_Init+0x1a4>)
 800061a:	4858      	ldr	r0, [pc, #352]	; (800077c <ESP_Init+0x1c4>)
 800061c:	f001 f813 	bl	8001646 <Uart_sendstring>
   while (!(Wait_for("AT+CWMODE=1\r\r\n\r\nOK\r\n", wifi_uart)));
 8000620:	bf00      	nop
 8000622:	494e      	ldr	r1, [pc, #312]	; (800075c <ESP_Init+0x1a4>)
 8000624:	4856      	ldr	r0, [pc, #344]	; (8000780 <ESP_Init+0x1c8>)
 8000626:	f001 f8a3 	bl	8001770 <Wait_for>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d0f8      	beq.n	8000622 <ESP_Init+0x6a>
   Uart_sendstring("CW MODE---->1\n\n", pc_uart);
 8000630:	494c      	ldr	r1, [pc, #304]	; (8000764 <ESP_Init+0x1ac>)
 8000632:	4854      	ldr	r0, [pc, #336]	; (8000784 <ESP_Init+0x1cc>)
 8000634:	f001 f807 	bl	8001646 <Uart_sendstring>



   /********* static ip***********/
   Uart_sendstring("AT+CIPSTA_CUR=\"192.168.0.222\",\"255.255.255.0\",\"192.168.0.1\"\r\n",wifi_uart);
 8000638:	4948      	ldr	r1, [pc, #288]	; (800075c <ESP_Init+0x1a4>)
 800063a:	4853      	ldr	r0, [pc, #332]	; (8000788 <ESP_Init+0x1d0>)
 800063c:	f001 f803 	bl	8001646 <Uart_sendstring>
   while (!(Wait_for("AT+CIPSTA_CUR=\"192.168.0.222\",\"255.255.255.0\",\"192.168.0.1\"\r\r\n\r\nOK\r\n", wifi_uart)));
 8000640:	bf00      	nop
 8000642:	4946      	ldr	r1, [pc, #280]	; (800075c <ESP_Init+0x1a4>)
 8000644:	4851      	ldr	r0, [pc, #324]	; (800078c <ESP_Init+0x1d4>)
 8000646:	f001 f893 	bl	8001770 <Wait_for>
 800064a:	4603      	mov	r3, r0
 800064c:	2b00      	cmp	r3, #0
 800064e:	d0f8      	beq.n	8000642 <ESP_Init+0x8a>
   Uart_sendstring("Static ip OK\r\n\n", pc_uart);
 8000650:	4944      	ldr	r1, [pc, #272]	; (8000764 <ESP_Init+0x1ac>)
 8000652:	484f      	ldr	r0, [pc, #316]	; (8000790 <ESP_Init+0x1d8>)
 8000654:	f000 fff7 	bl	8001646 <Uart_sendstring>

   /********* AT+CWJAP="SSID","PASSWD" **********/
   Uart_sendstring("connecting... to the provided AP\n", pc_uart);
 8000658:	4942      	ldr	r1, [pc, #264]	; (8000764 <ESP_Init+0x1ac>)
 800065a:	484e      	ldr	r0, [pc, #312]	; (8000794 <ESP_Init+0x1dc>)
 800065c:	f000 fff3 	bl	8001646 <Uart_sendstring>
   sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000660:	f107 0008 	add.w	r0, r7, #8
 8000664:	683b      	ldr	r3, [r7, #0]
 8000666:	687a      	ldr	r2, [r7, #4]
 8000668:	494b      	ldr	r1, [pc, #300]	; (8000798 <ESP_Init+0x1e0>)
 800066a:	f005 fbc7 	bl	8005dfc <siprintf>
   Uart_sendstring(data, wifi_uart);
 800066e:	f107 0308 	add.w	r3, r7, #8
 8000672:	493a      	ldr	r1, [pc, #232]	; (800075c <ESP_Init+0x1a4>)
 8000674:	4618      	mov	r0, r3
 8000676:	f000 ffe6 	bl	8001646 <Uart_sendstring>
   while (!(Wait_for("WIFI GOT IP\r\n\r\nOK\r\n", wifi_uart)));
 800067a:	bf00      	nop
 800067c:	4937      	ldr	r1, [pc, #220]	; (800075c <ESP_Init+0x1a4>)
 800067e:	4847      	ldr	r0, [pc, #284]	; (800079c <ESP_Init+0x1e4>)
 8000680:	f001 f876 	bl	8001770 <Wait_for>
 8000684:	4603      	mov	r3, r0
 8000686:	2b00      	cmp	r3, #0
 8000688:	d0f8      	beq.n	800067c <ESP_Init+0xc4>
   sprintf (data, "Connected to,\"%s\"\n\n", SSID);
 800068a:	f107 0308 	add.w	r3, r7, #8
 800068e:	687a      	ldr	r2, [r7, #4]
 8000690:	4943      	ldr	r1, [pc, #268]	; (80007a0 <ESP_Init+0x1e8>)
 8000692:	4618      	mov	r0, r3
 8000694:	f005 fbb2 	bl	8005dfc <siprintf>
   Uart_sendstring(data,pc_uart);
 8000698:	f107 0308 	add.w	r3, r7, #8
 800069c:	4931      	ldr	r1, [pc, #196]	; (8000764 <ESP_Init+0x1ac>)
 800069e:	4618      	mov	r0, r3
 80006a0:	f000 ffd1 	bl	8001646 <Uart_sendstring>



   /********* AT+CIFSR **********/
   Uart_sendstring("AT+CIFSR\r\n", wifi_uart);
 80006a4:	492d      	ldr	r1, [pc, #180]	; (800075c <ESP_Init+0x1a4>)
 80006a6:	483f      	ldr	r0, [pc, #252]	; (80007a4 <ESP_Init+0x1ec>)
 80006a8:	f000 ffcd 	bl	8001646 <Uart_sendstring>
   while (!(Wait_for("CIFSR:STAIP,\"", wifi_uart)));
 80006ac:	bf00      	nop
 80006ae:	492b      	ldr	r1, [pc, #172]	; (800075c <ESP_Init+0x1a4>)
 80006b0:	483d      	ldr	r0, [pc, #244]	; (80007a8 <ESP_Init+0x1f0>)
 80006b2:	f001 f85d 	bl	8001770 <Wait_for>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d0f8      	beq.n	80006ae <ESP_Init+0xf6>
   while (!(Copy_upto("\"",buffer, wifi_uart)));
 80006bc:	bf00      	nop
 80006be:	4a27      	ldr	r2, [pc, #156]	; (800075c <ESP_Init+0x1a4>)
 80006c0:	493a      	ldr	r1, [pc, #232]	; (80007ac <ESP_Init+0x1f4>)
 80006c2:	483b      	ldr	r0, [pc, #236]	; (80007b0 <ESP_Init+0x1f8>)
 80006c4:	f000 ffd6 	bl	8001674 <Copy_upto>
 80006c8:	4603      	mov	r3, r0
 80006ca:	2b00      	cmp	r3, #0
 80006cc:	d0f7      	beq.n	80006be <ESP_Init+0x106>
   while (!(Wait_for("OK\r\n", wifi_uart)));
 80006ce:	bf00      	nop
 80006d0:	4922      	ldr	r1, [pc, #136]	; (800075c <ESP_Init+0x1a4>)
 80006d2:	4838      	ldr	r0, [pc, #224]	; (80007b4 <ESP_Init+0x1fc>)
 80006d4:	f001 f84c 	bl	8001770 <Wait_for>
 80006d8:	4603      	mov	r3, r0
 80006da:	2b00      	cmp	r3, #0
 80006dc:	d0f8      	beq.n	80006d0 <ESP_Init+0x118>
   int len = strlen (buffer);
 80006de:	4833      	ldr	r0, [pc, #204]	; (80007ac <ESP_Init+0x1f4>)
 80006e0:	f7ff fd90 	bl	8000204 <strlen>
 80006e4:	4603      	mov	r3, r0
 80006e6:	65bb      	str	r3, [r7, #88]	; 0x58
   buffer[len-1] = '\0';
 80006e8:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80006ea:	3b01      	subs	r3, #1
 80006ec:	4a2f      	ldr	r2, [pc, #188]	; (80007ac <ESP_Init+0x1f4>)
 80006ee:	2100      	movs	r1, #0
 80006f0:	54d1      	strb	r1, [r2, r3]
   sprintf (data, "IP ADDR: %s\n\n", buffer);
 80006f2:	f107 0308 	add.w	r3, r7, #8
 80006f6:	4a2d      	ldr	r2, [pc, #180]	; (80007ac <ESP_Init+0x1f4>)
 80006f8:	492f      	ldr	r1, [pc, #188]	; (80007b8 <ESP_Init+0x200>)
 80006fa:	4618      	mov	r0, r3
 80006fc:	f005 fb7e 	bl	8005dfc <siprintf>
   Uart_sendstring(data, pc_uart);
 8000700:	f107 0308 	add.w	r3, r7, #8
 8000704:	4917      	ldr	r1, [pc, #92]	; (8000764 <ESP_Init+0x1ac>)
 8000706:	4618      	mov	r0, r3
 8000708:	f000 ff9d 	bl	8001646 <Uart_sendstring>


   Uart_sendstring("AT+CIPMUX=1\r\n", wifi_uart);
 800070c:	4913      	ldr	r1, [pc, #76]	; (800075c <ESP_Init+0x1a4>)
 800070e:	482b      	ldr	r0, [pc, #172]	; (80007bc <ESP_Init+0x204>)
 8000710:	f000 ff99 	bl	8001646 <Uart_sendstring>
   while (!(Wait_for("AT+CIPMUX=1\r\r\n\r\nOK\r\n", wifi_uart)));
 8000714:	bf00      	nop
 8000716:	4911      	ldr	r1, [pc, #68]	; (800075c <ESP_Init+0x1a4>)
 8000718:	4829      	ldr	r0, [pc, #164]	; (80007c0 <ESP_Init+0x208>)
 800071a:	f001 f829 	bl	8001770 <Wait_for>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d0f8      	beq.n	8000716 <ESP_Init+0x15e>
   Uart_sendstring("CIPMUX---->OK\n\n", pc_uart);
 8000724:	490f      	ldr	r1, [pc, #60]	; (8000764 <ESP_Init+0x1ac>)
 8000726:	4827      	ldr	r0, [pc, #156]	; (80007c4 <ESP_Init+0x20c>)
 8000728:	f000 ff8d 	bl	8001646 <Uart_sendstring>

   Uart_sendstring("AT+CIPSERVER=1,80\r\n", wifi_uart);
 800072c:	490b      	ldr	r1, [pc, #44]	; (800075c <ESP_Init+0x1a4>)
 800072e:	4826      	ldr	r0, [pc, #152]	; (80007c8 <ESP_Init+0x210>)
 8000730:	f000 ff89 	bl	8001646 <Uart_sendstring>
   while (!(Wait_for("OK\r\n", wifi_uart)));
 8000734:	bf00      	nop
 8000736:	4909      	ldr	r1, [pc, #36]	; (800075c <ESP_Init+0x1a4>)
 8000738:	481e      	ldr	r0, [pc, #120]	; (80007b4 <ESP_Init+0x1fc>)
 800073a:	f001 f819 	bl	8001770 <Wait_for>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d0f8      	beq.n	8000736 <ESP_Init+0x17e>
   Uart_sendstring("CIPSERVER---->OK\n\n", pc_uart);
 8000744:	4907      	ldr	r1, [pc, #28]	; (8000764 <ESP_Init+0x1ac>)
 8000746:	4821      	ldr	r0, [pc, #132]	; (80007cc <ESP_Init+0x214>)
 8000748:	f000 ff7d 	bl	8001646 <Uart_sendstring>

   Uart_sendstring("Now Connect to the IP ADRESS\n\n", pc_uart);
 800074c:	4905      	ldr	r1, [pc, #20]	; (8000764 <ESP_Init+0x1ac>)
 800074e:	4820      	ldr	r0, [pc, #128]	; (80007d0 <ESP_Init+0x218>)
 8000750:	f000 ff79 	bl	8001646 <Uart_sendstring>
}
 8000754:	bf00      	nop
 8000756:	3760      	adds	r7, #96	; 0x60
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}
 800075c:	20000a54 	.word	0x20000a54
 8000760:	08006a4c 	.word	0x08006a4c
 8000764:	20000938 	.word	0x20000938
 8000768:	08006a58 	.word	0x08006a58
 800076c:	08006a64 	.word	0x08006a64
 8000770:	08006a68 	.word	0x08006a68
 8000774:	08006a70 	.word	0x08006a70
 8000778:	08006a7c 	.word	0x08006a7c
 800077c:	08006a88 	.word	0x08006a88
 8000780:	08006a98 	.word	0x08006a98
 8000784:	08006ab0 	.word	0x08006ab0
 8000788:	08006ac0 	.word	0x08006ac0
 800078c:	08006b00 	.word	0x08006b00
 8000790:	08006b48 	.word	0x08006b48
 8000794:	08006b58 	.word	0x08006b58
 8000798:	08006b7c 	.word	0x08006b7c
 800079c:	08006b94 	.word	0x08006b94
 80007a0:	08006ba8 	.word	0x08006ba8
 80007a4:	08006bbc 	.word	0x08006bbc
 80007a8:	08006bc8 	.word	0x08006bc8
 80007ac:	20000914 	.word	0x20000914
 80007b0:	08006bd8 	.word	0x08006bd8
 80007b4:	08006bdc 	.word	0x08006bdc
 80007b8:	08006be4 	.word	0x08006be4
 80007bc:	08006bf4 	.word	0x08006bf4
 80007c0:	08006c04 	.word	0x08006c04
 80007c4:	08006c1c 	.word	0x08006c1c
 80007c8:	08006c2c 	.word	0x08006c2c
 80007cc:	08006c40 	.word	0x08006c40
 80007d0:	08006c54 	.word	0x08006c54

080007d4 <Server_Send>:




int Server_Send (char *str, int Link_ID)
{
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b098      	sub	sp, #96	; 0x60
 80007d8:	af00      	add	r7, sp, #0
 80007da:	6078      	str	r0, [r7, #4]
 80007dc:	6039      	str	r1, [r7, #0]
	int len = strlen (str);
 80007de:	6878      	ldr	r0, [r7, #4]
 80007e0:	f7ff fd10 	bl	8000204 <strlen>
 80007e4:	4603      	mov	r3, r0
 80007e6:	65fb      	str	r3, [r7, #92]	; 0x5c
	char data[80];
	sprintf (data, "AT+CIPSEND=%d,%d\r\n", Link_ID, len);
 80007e8:	f107 000c 	add.w	r0, r7, #12
 80007ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80007ee:	683a      	ldr	r2, [r7, #0]
 80007f0:	491a      	ldr	r1, [pc, #104]	; (800085c <Server_Send+0x88>)
 80007f2:	f005 fb03 	bl	8005dfc <siprintf>
	Uart_sendstring(data, wifi_uart);
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	4919      	ldr	r1, [pc, #100]	; (8000860 <Server_Send+0x8c>)
 80007fc:	4618      	mov	r0, r3
 80007fe:	f000 ff22 	bl	8001646 <Uart_sendstring>
	while (!(Wait_for(">", wifi_uart)));
 8000802:	bf00      	nop
 8000804:	4916      	ldr	r1, [pc, #88]	; (8000860 <Server_Send+0x8c>)
 8000806:	4817      	ldr	r0, [pc, #92]	; (8000864 <Server_Send+0x90>)
 8000808:	f000 ffb2 	bl	8001770 <Wait_for>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d0f8      	beq.n	8000804 <Server_Send+0x30>
	Uart_sendstring (str, wifi_uart);
 8000812:	4913      	ldr	r1, [pc, #76]	; (8000860 <Server_Send+0x8c>)
 8000814:	6878      	ldr	r0, [r7, #4]
 8000816:	f000 ff16 	bl	8001646 <Uart_sendstring>
	while (!(Wait_for("SEND OK", wifi_uart)));
 800081a:	bf00      	nop
 800081c:	4910      	ldr	r1, [pc, #64]	; (8000860 <Server_Send+0x8c>)
 800081e:	4812      	ldr	r0, [pc, #72]	; (8000868 <Server_Send+0x94>)
 8000820:	f000 ffa6 	bl	8001770 <Wait_for>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d0f8      	beq.n	800081c <Server_Send+0x48>
	sprintf (data, "AT+CIPCLOSE=5\r\n");
 800082a:	f107 030c 	add.w	r3, r7, #12
 800082e:	490f      	ldr	r1, [pc, #60]	; (800086c <Server_Send+0x98>)
 8000830:	4618      	mov	r0, r3
 8000832:	f005 fae3 	bl	8005dfc <siprintf>
	Uart_sendstring(data, wifi_uart);
 8000836:	f107 030c 	add.w	r3, r7, #12
 800083a:	4909      	ldr	r1, [pc, #36]	; (8000860 <Server_Send+0x8c>)
 800083c:	4618      	mov	r0, r3
 800083e:	f000 ff02 	bl	8001646 <Uart_sendstring>
	while (!(Wait_for("OK\r\n", wifi_uart)));
 8000842:	bf00      	nop
 8000844:	4906      	ldr	r1, [pc, #24]	; (8000860 <Server_Send+0x8c>)
 8000846:	480a      	ldr	r0, [pc, #40]	; (8000870 <Server_Send+0x9c>)
 8000848:	f000 ff92 	bl	8001770 <Wait_for>
 800084c:	4603      	mov	r3, r0
 800084e:	2b00      	cmp	r3, #0
 8000850:	d0f8      	beq.n	8000844 <Server_Send+0x70>
	return 1;
 8000852:	2301      	movs	r3, #1
}
 8000854:	4618      	mov	r0, r3
 8000856:	3760      	adds	r7, #96	; 0x60
 8000858:	46bd      	mov	sp, r7
 800085a:	bd80      	pop	{r7, pc}
 800085c:	08006c74 	.word	0x08006c74
 8000860:	20000a54 	.word	0x20000a54
 8000864:	08006c88 	.word	0x08006c88
 8000868:	08006c8c 	.word	0x08006c8c
 800086c:	08006c94 	.word	0x08006c94
 8000870:	08006bdc 	.word	0x08006bdc

08000874 <Server_Handle>:

void Server_Handle (char *str, int Link_ID)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	f5ad 6d81 	sub.w	sp, sp, #1032	; 0x408
 800087a:	af00      	add	r7, sp, #0
 800087c:	1d3b      	adds	r3, r7, #4
 800087e:	6018      	str	r0, [r3, #0]
 8000880:	463b      	mov	r3, r7
 8000882:	6019      	str	r1, [r3, #0]
	char datatosend[1024] = {0};
 8000884:	f107 0308 	add.w	r3, r7, #8
 8000888:	2200      	movs	r2, #0
 800088a:	601a      	str	r2, [r3, #0]
 800088c:	3304      	adds	r3, #4
 800088e:	f44f 727f 	mov.w	r2, #1020	; 0x3fc
 8000892:	2100      	movs	r1, #0
 8000894:	4618      	mov	r0, r3
 8000896:	f005 faa9 	bl	8005dec <memset>
	if (!(strcmp (str, "/lockeroncall")))
 800089a:	1d3b      	adds	r3, r7, #4
 800089c:	4939      	ldr	r1, [pc, #228]	; (8000984 <Server_Handle+0x110>)
 800089e:	6818      	ldr	r0, [r3, #0]
 80008a0:	f7ff fca6 	bl	80001f0 <strcmp>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d10f      	bne.n	80008ca <Server_Handle+0x56>
	{
		sprintf (datatosend, lockeroncall);
 80008aa:	4b37      	ldr	r3, [pc, #220]	; (8000988 <Server_Handle+0x114>)
 80008ac:	681a      	ldr	r2, [r3, #0]
 80008ae:	f107 0308 	add.w	r3, r7, #8
 80008b2:	4611      	mov	r1, r2
 80008b4:	4618      	mov	r0, r3
 80008b6:	f005 faa1 	bl	8005dfc <siprintf>
		Server_Send(datatosend, Link_ID);
 80008ba:	463b      	mov	r3, r7
 80008bc:	f107 0208 	add.w	r2, r7, #8
 80008c0:	6819      	ldr	r1, [r3, #0]
 80008c2:	4610      	mov	r0, r2
 80008c4:	f7ff ff86 	bl	80007d4 <Server_Send>
	{
		sprintf (datatosend, Basic_inclusion);
		Server_Send(datatosend, Link_ID);
	}

}
 80008c8:	e056      	b.n	8000978 <Server_Handle+0x104>
	else if (!(strcmp (str, "/lockeron")))
 80008ca:	1d3b      	adds	r3, r7, #4
 80008cc:	492f      	ldr	r1, [pc, #188]	; (800098c <Server_Handle+0x118>)
 80008ce:	6818      	ldr	r0, [r3, #0]
 80008d0:	f7ff fc8e 	bl	80001f0 <strcmp>
 80008d4:	4603      	mov	r3, r0
 80008d6:	2b00      	cmp	r3, #0
 80008d8:	d10f      	bne.n	80008fa <Server_Handle+0x86>
		sprintf (datatosend, lockeron);
 80008da:	4b2d      	ldr	r3, [pc, #180]	; (8000990 <Server_Handle+0x11c>)
 80008dc:	681a      	ldr	r2, [r3, #0]
 80008de:	f107 0308 	add.w	r3, r7, #8
 80008e2:	4611      	mov	r1, r2
 80008e4:	4618      	mov	r0, r3
 80008e6:	f005 fa89 	bl	8005dfc <siprintf>
		Server_Send(datatosend, Link_ID);
 80008ea:	463b      	mov	r3, r7
 80008ec:	f107 0208 	add.w	r2, r7, #8
 80008f0:	6819      	ldr	r1, [r3, #0]
 80008f2:	4610      	mov	r0, r2
 80008f4:	f7ff ff6e 	bl	80007d4 <Server_Send>
}
 80008f8:	e03e      	b.n	8000978 <Server_Handle+0x104>
	else if (!(strcmp (str, "/lockeroffcall")))
 80008fa:	1d3b      	adds	r3, r7, #4
 80008fc:	4925      	ldr	r1, [pc, #148]	; (8000994 <Server_Handle+0x120>)
 80008fe:	6818      	ldr	r0, [r3, #0]
 8000900:	f7ff fc76 	bl	80001f0 <strcmp>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d10f      	bne.n	800092a <Server_Handle+0xb6>
		sprintf (datatosend, lockeroffcall);
 800090a:	4b23      	ldr	r3, [pc, #140]	; (8000998 <Server_Handle+0x124>)
 800090c:	681a      	ldr	r2, [r3, #0]
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	4611      	mov	r1, r2
 8000914:	4618      	mov	r0, r3
 8000916:	f005 fa71 	bl	8005dfc <siprintf>
		Server_Send(datatosend, Link_ID);
 800091a:	463b      	mov	r3, r7
 800091c:	f107 0208 	add.w	r2, r7, #8
 8000920:	6819      	ldr	r1, [r3, #0]
 8000922:	4610      	mov	r0, r2
 8000924:	f7ff ff56 	bl	80007d4 <Server_Send>
}
 8000928:	e026      	b.n	8000978 <Server_Handle+0x104>
	else if (!(strcmp (str, "/lockeroff")))
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	491b      	ldr	r1, [pc, #108]	; (800099c <Server_Handle+0x128>)
 800092e:	6818      	ldr	r0, [r3, #0]
 8000930:	f7ff fc5e 	bl	80001f0 <strcmp>
 8000934:	4603      	mov	r3, r0
 8000936:	2b00      	cmp	r3, #0
 8000938:	d10f      	bne.n	800095a <Server_Handle+0xe6>
		sprintf (datatosend, lockeroff);
 800093a:	4b19      	ldr	r3, [pc, #100]	; (80009a0 <Server_Handle+0x12c>)
 800093c:	681a      	ldr	r2, [r3, #0]
 800093e:	f107 0308 	add.w	r3, r7, #8
 8000942:	4611      	mov	r1, r2
 8000944:	4618      	mov	r0, r3
 8000946:	f005 fa59 	bl	8005dfc <siprintf>
		Server_Send(datatosend, Link_ID);
 800094a:	463b      	mov	r3, r7
 800094c:	f107 0208 	add.w	r2, r7, #8
 8000950:	6819      	ldr	r1, [r3, #0]
 8000952:	4610      	mov	r0, r2
 8000954:	f7ff ff3e 	bl	80007d4 <Server_Send>
}
 8000958:	e00e      	b.n	8000978 <Server_Handle+0x104>
		sprintf (datatosend, Basic_inclusion);
 800095a:	4b12      	ldr	r3, [pc, #72]	; (80009a4 <Server_Handle+0x130>)
 800095c:	681a      	ldr	r2, [r3, #0]
 800095e:	f107 0308 	add.w	r3, r7, #8
 8000962:	4611      	mov	r1, r2
 8000964:	4618      	mov	r0, r3
 8000966:	f005 fa49 	bl	8005dfc <siprintf>
		Server_Send(datatosend, Link_ID);
 800096a:	463b      	mov	r3, r7
 800096c:	f107 0208 	add.w	r2, r7, #8
 8000970:	6819      	ldr	r1, [r3, #0]
 8000972:	4610      	mov	r0, r2
 8000974:	f7ff ff2e 	bl	80007d4 <Server_Send>
}
 8000978:	bf00      	nop
 800097a:	f507 6781 	add.w	r7, r7, #1032	; 0x408
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	08006ca4 	.word	0x08006ca4
 8000988:	20000004 	.word	0x20000004
 800098c:	08006cb4 	.word	0x08006cb4
 8000990:	20000008 	.word	0x20000008
 8000994:	08006cc0 	.word	0x08006cc0
 8000998:	2000000c 	.word	0x2000000c
 800099c:	08006cd0 	.word	0x08006cd0
 80009a0:	20000010 	.word	0x20000010
 80009a4:	20000000 	.word	0x20000000

080009a8 <Server_Start>:


void Server_Start (void)
{
 80009a8:	b580      	push	{r7, lr}
 80009aa:	b092      	sub	sp, #72	; 0x48
 80009ac:	af00      	add	r7, sp, #0
	char buftocopyinto[64] = {0};
 80009ae:	2300      	movs	r3, #0
 80009b0:	60bb      	str	r3, [r7, #8]
 80009b2:	f107 030c 	add.w	r3, r7, #12
 80009b6:	223c      	movs	r2, #60	; 0x3c
 80009b8:	2100      	movs	r1, #0
 80009ba:	4618      	mov	r0, r3
 80009bc:	f005 fa16 	bl	8005dec <memset>
	char Link_ID;




	while (!(Get_after("+IPD,", 1, &Link_ID, wifi_uart)));
 80009c0:	bf00      	nop
 80009c2:	1dfa      	adds	r2, r7, #7
 80009c4:	4bb2      	ldr	r3, [pc, #712]	; (8000c90 <Server_Start+0x2e8>)
 80009c6:	2101      	movs	r1, #1
 80009c8:	48b2      	ldr	r0, [pc, #712]	; (8000c94 <Server_Start+0x2ec>)
 80009ca:	f000 fe0d 	bl	80015e8 <Get_after>
 80009ce:	4603      	mov	r3, r0
 80009d0:	2b00      	cmp	r3, #0
 80009d2:	d0f6      	beq.n	80009c2 <Server_Start+0x1a>
	Link_ID -= 48;
 80009d4:	79fb      	ldrb	r3, [r7, #7]
 80009d6:	3b30      	subs	r3, #48	; 0x30
 80009d8:	b2db      	uxtb	r3, r3
 80009da:	71fb      	strb	r3, [r7, #7]
	while (!(Copy_upto(" HTTP/1.1", buftocopyinto, wifi_uart)));
 80009dc:	bf00      	nop
 80009de:	f107 0308 	add.w	r3, r7, #8
 80009e2:	4aab      	ldr	r2, [pc, #684]	; (8000c90 <Server_Start+0x2e8>)
 80009e4:	4619      	mov	r1, r3
 80009e6:	48ac      	ldr	r0, [pc, #688]	; (8000c98 <Server_Start+0x2f0>)
 80009e8:	f000 fe44 	bl	8001674 <Copy_upto>
 80009ec:	4603      	mov	r3, r0
 80009ee:	2b00      	cmp	r3, #0
 80009f0:	d0f5      	beq.n	80009de <Server_Start+0x36>


	if (Look_for("/lockeron", buftocopyinto) == 1 )
 80009f2:	f107 0308 	add.w	r3, r7, #8
 80009f6:	4619      	mov	r1, r3
 80009f8:	48a8      	ldr	r0, [pc, #672]	; (8000c9c <Server_Start+0x2f4>)
 80009fa:	f000 fc1e 	bl	800123a <Look_for>
 80009fe:	4603      	mov	r3, r0
 8000a00:	2b01      	cmp	r3, #1
 8000a02:	f040 81be 	bne.w	8000d82 <Server_Start+0x3da>
	{

		if(Look_for("/lockeroncall1", buftocopyinto) == 1)
 8000a06:	f107 0308 	add.w	r3, r7, #8
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	48a4      	ldr	r0, [pc, #656]	; (8000ca0 <Server_Start+0x2f8>)
 8000a0e:	f000 fc14 	bl	800123a <Look_for>
 8000a12:	4603      	mov	r3, r0
 8000a14:	2b01      	cmp	r3, #1
 8000a16:	d10f      	bne.n	8000a38 <Server_Start+0x90>
		{
			if(Locker_Move_Flag==0)
 8000a18:	4ba2      	ldr	r3, [pc, #648]	; (8000ca4 <Server_Start+0x2fc>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	2b00      	cmp	r3, #0
 8000a1e:	d102      	bne.n	8000a26 <Server_Start+0x7e>
				Locker_Flag[0][0]=1;
 8000a20:	4ba1      	ldr	r3, [pc, #644]	; (8000ca8 <Server_Start+0x300>)
 8000a22:	2201      	movs	r2, #1
 8000a24:	701a      	strb	r2, [r3, #0]
			Locker_Move_Flag=1;
 8000a26:	4b9f      	ldr	r3, [pc, #636]	; (8000ca4 <Server_Start+0x2fc>)
 8000a28:	2201      	movs	r2, #1
 8000a2a:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroncall",Link_ID);
 8000a2c:	79fb      	ldrb	r3, [r7, #7]
 8000a2e:	4619      	mov	r1, r3
 8000a30:	489e      	ldr	r0, [pc, #632]	; (8000cac <Server_Start+0x304>)
 8000a32:	f7ff ff1f 	bl	8000874 <Server_Handle>
 8000a36:	e37c      	b.n	8001132 <Server_Start+0x78a>
		}
		else if(Look_for("/lockeron1", buftocopyinto) == 1)
 8000a38:	f107 0308 	add.w	r3, r7, #8
 8000a3c:	4619      	mov	r1, r3
 8000a3e:	489c      	ldr	r0, [pc, #624]	; (8000cb0 <Server_Start+0x308>)
 8000a40:	f000 fbfb 	bl	800123a <Look_for>
 8000a44:	4603      	mov	r3, r0
 8000a46:	2b01      	cmp	r3, #1
 8000a48:	d10f      	bne.n	8000a6a <Server_Start+0xc2>
		{
			if(Locker_Move_Flag==0)
 8000a4a:	4b96      	ldr	r3, [pc, #600]	; (8000ca4 <Server_Start+0x2fc>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d102      	bne.n	8000a58 <Server_Start+0xb0>
				Locker_Flag[0][0]=2;
 8000a52:	4b95      	ldr	r3, [pc, #596]	; (8000ca8 <Server_Start+0x300>)
 8000a54:	2202      	movs	r2, #2
 8000a56:	701a      	strb	r2, [r3, #0]
			Locker_Move_Flag=1;
 8000a58:	4b92      	ldr	r3, [pc, #584]	; (8000ca4 <Server_Start+0x2fc>)
 8000a5a:	2201      	movs	r2, #1
 8000a5c:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeron",Link_ID);
 8000a5e:	79fb      	ldrb	r3, [r7, #7]
 8000a60:	4619      	mov	r1, r3
 8000a62:	488e      	ldr	r0, [pc, #568]	; (8000c9c <Server_Start+0x2f4>)
 8000a64:	f7ff ff06 	bl	8000874 <Server_Handle>
 8000a68:	e363      	b.n	8001132 <Server_Start+0x78a>
		}


		else if(Look_for("/lockeroncall2", buftocopyinto) == 1)
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4890      	ldr	r0, [pc, #576]	; (8000cb4 <Server_Start+0x30c>)
 8000a72:	f000 fbe2 	bl	800123a <Look_for>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b01      	cmp	r3, #1
 8000a7a:	d10f      	bne.n	8000a9c <Server_Start+0xf4>
		{
			if(Locker_Move_Flag==0)
 8000a7c:	4b89      	ldr	r3, [pc, #548]	; (8000ca4 <Server_Start+0x2fc>)
 8000a7e:	781b      	ldrb	r3, [r3, #0]
 8000a80:	2b00      	cmp	r3, #0
 8000a82:	d102      	bne.n	8000a8a <Server_Start+0xe2>
				Locker_Flag[0][1]=1;
 8000a84:	4b88      	ldr	r3, [pc, #544]	; (8000ca8 <Server_Start+0x300>)
 8000a86:	2201      	movs	r2, #1
 8000a88:	705a      	strb	r2, [r3, #1]
			Locker_Move_Flag=2;
 8000a8a:	4b86      	ldr	r3, [pc, #536]	; (8000ca4 <Server_Start+0x2fc>)
 8000a8c:	2202      	movs	r2, #2
 8000a8e:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroncall",Link_ID);
 8000a90:	79fb      	ldrb	r3, [r7, #7]
 8000a92:	4619      	mov	r1, r3
 8000a94:	4885      	ldr	r0, [pc, #532]	; (8000cac <Server_Start+0x304>)
 8000a96:	f7ff feed 	bl	8000874 <Server_Handle>
 8000a9a:	e34a      	b.n	8001132 <Server_Start+0x78a>
		}
		else if(Look_for("/lockeron2", buftocopyinto) == 1)
 8000a9c:	f107 0308 	add.w	r3, r7, #8
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4885      	ldr	r0, [pc, #532]	; (8000cb8 <Server_Start+0x310>)
 8000aa4:	f000 fbc9 	bl	800123a <Look_for>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b01      	cmp	r3, #1
 8000aac:	d10f      	bne.n	8000ace <Server_Start+0x126>
		{
			if(Locker_Move_Flag==0)
 8000aae:	4b7d      	ldr	r3, [pc, #500]	; (8000ca4 <Server_Start+0x2fc>)
 8000ab0:	781b      	ldrb	r3, [r3, #0]
 8000ab2:	2b00      	cmp	r3, #0
 8000ab4:	d102      	bne.n	8000abc <Server_Start+0x114>
				Locker_Flag[0][1]=2;
 8000ab6:	4b7c      	ldr	r3, [pc, #496]	; (8000ca8 <Server_Start+0x300>)
 8000ab8:	2202      	movs	r2, #2
 8000aba:	705a      	strb	r2, [r3, #1]
			Locker_Move_Flag=2;
 8000abc:	4b79      	ldr	r3, [pc, #484]	; (8000ca4 <Server_Start+0x2fc>)
 8000abe:	2202      	movs	r2, #2
 8000ac0:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeron",Link_ID);
 8000ac2:	79fb      	ldrb	r3, [r7, #7]
 8000ac4:	4619      	mov	r1, r3
 8000ac6:	4875      	ldr	r0, [pc, #468]	; (8000c9c <Server_Start+0x2f4>)
 8000ac8:	f7ff fed4 	bl	8000874 <Server_Handle>
 8000acc:	e331      	b.n	8001132 <Server_Start+0x78a>
		}

		else if(Look_for("/lockeroncall3", buftocopyinto) == 1)
 8000ace:	f107 0308 	add.w	r3, r7, #8
 8000ad2:	4619      	mov	r1, r3
 8000ad4:	4879      	ldr	r0, [pc, #484]	; (8000cbc <Server_Start+0x314>)
 8000ad6:	f000 fbb0 	bl	800123a <Look_for>
 8000ada:	4603      	mov	r3, r0
 8000adc:	2b01      	cmp	r3, #1
 8000ade:	d10f      	bne.n	8000b00 <Server_Start+0x158>
		{
			if(Locker_Move_Flag==0)
 8000ae0:	4b70      	ldr	r3, [pc, #448]	; (8000ca4 <Server_Start+0x2fc>)
 8000ae2:	781b      	ldrb	r3, [r3, #0]
 8000ae4:	2b00      	cmp	r3, #0
 8000ae6:	d102      	bne.n	8000aee <Server_Start+0x146>
				Locker_Flag[0][2]=1;
 8000ae8:	4b6f      	ldr	r3, [pc, #444]	; (8000ca8 <Server_Start+0x300>)
 8000aea:	2201      	movs	r2, #1
 8000aec:	709a      	strb	r2, [r3, #2]
			Locker_Move_Flag=3;
 8000aee:	4b6d      	ldr	r3, [pc, #436]	; (8000ca4 <Server_Start+0x2fc>)
 8000af0:	2203      	movs	r2, #3
 8000af2:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroncall",Link_ID);
 8000af4:	79fb      	ldrb	r3, [r7, #7]
 8000af6:	4619      	mov	r1, r3
 8000af8:	486c      	ldr	r0, [pc, #432]	; (8000cac <Server_Start+0x304>)
 8000afa:	f7ff febb 	bl	8000874 <Server_Handle>
 8000afe:	e318      	b.n	8001132 <Server_Start+0x78a>
		}
		else if(Look_for("/lockeron3", buftocopyinto) == 1)
 8000b00:	f107 0308 	add.w	r3, r7, #8
 8000b04:	4619      	mov	r1, r3
 8000b06:	486e      	ldr	r0, [pc, #440]	; (8000cc0 <Server_Start+0x318>)
 8000b08:	f000 fb97 	bl	800123a <Look_for>
 8000b0c:	4603      	mov	r3, r0
 8000b0e:	2b01      	cmp	r3, #1
 8000b10:	d10f      	bne.n	8000b32 <Server_Start+0x18a>
		{
			if(Locker_Move_Flag==0)
 8000b12:	4b64      	ldr	r3, [pc, #400]	; (8000ca4 <Server_Start+0x2fc>)
 8000b14:	781b      	ldrb	r3, [r3, #0]
 8000b16:	2b00      	cmp	r3, #0
 8000b18:	d102      	bne.n	8000b20 <Server_Start+0x178>
				Locker_Flag[0][2]=2;
 8000b1a:	4b63      	ldr	r3, [pc, #396]	; (8000ca8 <Server_Start+0x300>)
 8000b1c:	2202      	movs	r2, #2
 8000b1e:	709a      	strb	r2, [r3, #2]
			Locker_Move_Flag=3;
 8000b20:	4b60      	ldr	r3, [pc, #384]	; (8000ca4 <Server_Start+0x2fc>)
 8000b22:	2203      	movs	r2, #3
 8000b24:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeron",Link_ID);
 8000b26:	79fb      	ldrb	r3, [r7, #7]
 8000b28:	4619      	mov	r1, r3
 8000b2a:	485c      	ldr	r0, [pc, #368]	; (8000c9c <Server_Start+0x2f4>)
 8000b2c:	f7ff fea2 	bl	8000874 <Server_Handle>
 8000b30:	e2ff      	b.n	8001132 <Server_Start+0x78a>
		}

		else if(Look_for("/lockeroncall4", buftocopyinto) == 1)
 8000b32:	f107 0308 	add.w	r3, r7, #8
 8000b36:	4619      	mov	r1, r3
 8000b38:	4862      	ldr	r0, [pc, #392]	; (8000cc4 <Server_Start+0x31c>)
 8000b3a:	f000 fb7e 	bl	800123a <Look_for>
 8000b3e:	4603      	mov	r3, r0
 8000b40:	2b01      	cmp	r3, #1
 8000b42:	d10f      	bne.n	8000b64 <Server_Start+0x1bc>
		{
			if(Locker_Move_Flag==0)
 8000b44:	4b57      	ldr	r3, [pc, #348]	; (8000ca4 <Server_Start+0x2fc>)
 8000b46:	781b      	ldrb	r3, [r3, #0]
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d102      	bne.n	8000b52 <Server_Start+0x1aa>
				Locker_Flag[0][3]=1;
 8000b4c:	4b56      	ldr	r3, [pc, #344]	; (8000ca8 <Server_Start+0x300>)
 8000b4e:	2201      	movs	r2, #1
 8000b50:	70da      	strb	r2, [r3, #3]
			Locker_Move_Flag=4;
 8000b52:	4b54      	ldr	r3, [pc, #336]	; (8000ca4 <Server_Start+0x2fc>)
 8000b54:	2204      	movs	r2, #4
 8000b56:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroncall",Link_ID);
 8000b58:	79fb      	ldrb	r3, [r7, #7]
 8000b5a:	4619      	mov	r1, r3
 8000b5c:	4853      	ldr	r0, [pc, #332]	; (8000cac <Server_Start+0x304>)
 8000b5e:	f7ff fe89 	bl	8000874 <Server_Handle>
 8000b62:	e2e6      	b.n	8001132 <Server_Start+0x78a>
		}
		else if(Look_for("/lockeron4", buftocopyinto) == 1)
 8000b64:	f107 0308 	add.w	r3, r7, #8
 8000b68:	4619      	mov	r1, r3
 8000b6a:	4857      	ldr	r0, [pc, #348]	; (8000cc8 <Server_Start+0x320>)
 8000b6c:	f000 fb65 	bl	800123a <Look_for>
 8000b70:	4603      	mov	r3, r0
 8000b72:	2b01      	cmp	r3, #1
 8000b74:	d10f      	bne.n	8000b96 <Server_Start+0x1ee>
		{
			if(Locker_Move_Flag==0)
 8000b76:	4b4b      	ldr	r3, [pc, #300]	; (8000ca4 <Server_Start+0x2fc>)
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d102      	bne.n	8000b84 <Server_Start+0x1dc>
				Locker_Flag[0][3]=2;
 8000b7e:	4b4a      	ldr	r3, [pc, #296]	; (8000ca8 <Server_Start+0x300>)
 8000b80:	2202      	movs	r2, #2
 8000b82:	70da      	strb	r2, [r3, #3]
			Locker_Move_Flag=4;
 8000b84:	4b47      	ldr	r3, [pc, #284]	; (8000ca4 <Server_Start+0x2fc>)
 8000b86:	2204      	movs	r2, #4
 8000b88:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeron",Link_ID);
 8000b8a:	79fb      	ldrb	r3, [r7, #7]
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4843      	ldr	r0, [pc, #268]	; (8000c9c <Server_Start+0x2f4>)
 8000b90:	f7ff fe70 	bl	8000874 <Server_Handle>
 8000b94:	e2cd      	b.n	8001132 <Server_Start+0x78a>
		}

		else if(Look_for("/lockeroncall5", buftocopyinto) == 1)
 8000b96:	f107 0308 	add.w	r3, r7, #8
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	484b      	ldr	r0, [pc, #300]	; (8000ccc <Server_Start+0x324>)
 8000b9e:	f000 fb4c 	bl	800123a <Look_for>
 8000ba2:	4603      	mov	r3, r0
 8000ba4:	2b01      	cmp	r3, #1
 8000ba6:	d10f      	bne.n	8000bc8 <Server_Start+0x220>
		{
			if(Locker_Move_Flag==0)
 8000ba8:	4b3e      	ldr	r3, [pc, #248]	; (8000ca4 <Server_Start+0x2fc>)
 8000baa:	781b      	ldrb	r3, [r3, #0]
 8000bac:	2b00      	cmp	r3, #0
 8000bae:	d102      	bne.n	8000bb6 <Server_Start+0x20e>
				Locker_Flag[1][0]=1;
 8000bb0:	4b3d      	ldr	r3, [pc, #244]	; (8000ca8 <Server_Start+0x300>)
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	711a      	strb	r2, [r3, #4]
			Locker_Move_Flag=5;
 8000bb6:	4b3b      	ldr	r3, [pc, #236]	; (8000ca4 <Server_Start+0x2fc>)
 8000bb8:	2205      	movs	r2, #5
 8000bba:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroncall",Link_ID);
 8000bbc:	79fb      	ldrb	r3, [r7, #7]
 8000bbe:	4619      	mov	r1, r3
 8000bc0:	483a      	ldr	r0, [pc, #232]	; (8000cac <Server_Start+0x304>)
 8000bc2:	f7ff fe57 	bl	8000874 <Server_Handle>
 8000bc6:	e2b4      	b.n	8001132 <Server_Start+0x78a>
		}
		else if(Look_for("/lockeron5", buftocopyinto) == 1)
 8000bc8:	f107 0308 	add.w	r3, r7, #8
 8000bcc:	4619      	mov	r1, r3
 8000bce:	4840      	ldr	r0, [pc, #256]	; (8000cd0 <Server_Start+0x328>)
 8000bd0:	f000 fb33 	bl	800123a <Look_for>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b01      	cmp	r3, #1
 8000bd8:	d10f      	bne.n	8000bfa <Server_Start+0x252>
		{
			if(Locker_Move_Flag==0)
 8000bda:	4b32      	ldr	r3, [pc, #200]	; (8000ca4 <Server_Start+0x2fc>)
 8000bdc:	781b      	ldrb	r3, [r3, #0]
 8000bde:	2b00      	cmp	r3, #0
 8000be0:	d102      	bne.n	8000be8 <Server_Start+0x240>
				Locker_Flag[1][0]=2;
 8000be2:	4b31      	ldr	r3, [pc, #196]	; (8000ca8 <Server_Start+0x300>)
 8000be4:	2202      	movs	r2, #2
 8000be6:	711a      	strb	r2, [r3, #4]
			Locker_Move_Flag=5;
 8000be8:	4b2e      	ldr	r3, [pc, #184]	; (8000ca4 <Server_Start+0x2fc>)
 8000bea:	2205      	movs	r2, #5
 8000bec:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeron",Link_ID);
 8000bee:	79fb      	ldrb	r3, [r7, #7]
 8000bf0:	4619      	mov	r1, r3
 8000bf2:	482a      	ldr	r0, [pc, #168]	; (8000c9c <Server_Start+0x2f4>)
 8000bf4:	f7ff fe3e 	bl	8000874 <Server_Handle>
 8000bf8:	e29b      	b.n	8001132 <Server_Start+0x78a>
		}

		else if(Look_for("/lockeroncall6", buftocopyinto) == 1)
 8000bfa:	f107 0308 	add.w	r3, r7, #8
 8000bfe:	4619      	mov	r1, r3
 8000c00:	4834      	ldr	r0, [pc, #208]	; (8000cd4 <Server_Start+0x32c>)
 8000c02:	f000 fb1a 	bl	800123a <Look_for>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b01      	cmp	r3, #1
 8000c0a:	d10f      	bne.n	8000c2c <Server_Start+0x284>
		{
			if(Locker_Move_Flag==0)
 8000c0c:	4b25      	ldr	r3, [pc, #148]	; (8000ca4 <Server_Start+0x2fc>)
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	2b00      	cmp	r3, #0
 8000c12:	d102      	bne.n	8000c1a <Server_Start+0x272>
				Locker_Flag[1][1]=1;
 8000c14:	4b24      	ldr	r3, [pc, #144]	; (8000ca8 <Server_Start+0x300>)
 8000c16:	2201      	movs	r2, #1
 8000c18:	715a      	strb	r2, [r3, #5]
			Locker_Move_Flag=6;
 8000c1a:	4b22      	ldr	r3, [pc, #136]	; (8000ca4 <Server_Start+0x2fc>)
 8000c1c:	2206      	movs	r2, #6
 8000c1e:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroncall",Link_ID);
 8000c20:	79fb      	ldrb	r3, [r7, #7]
 8000c22:	4619      	mov	r1, r3
 8000c24:	4821      	ldr	r0, [pc, #132]	; (8000cac <Server_Start+0x304>)
 8000c26:	f7ff fe25 	bl	8000874 <Server_Handle>
 8000c2a:	e282      	b.n	8001132 <Server_Start+0x78a>
		}
		else if(Look_for("/lockeron6", buftocopyinto) == 1)
 8000c2c:	f107 0308 	add.w	r3, r7, #8
 8000c30:	4619      	mov	r1, r3
 8000c32:	4829      	ldr	r0, [pc, #164]	; (8000cd8 <Server_Start+0x330>)
 8000c34:	f000 fb01 	bl	800123a <Look_for>
 8000c38:	4603      	mov	r3, r0
 8000c3a:	2b01      	cmp	r3, #1
 8000c3c:	d10f      	bne.n	8000c5e <Server_Start+0x2b6>
		{
			if(Locker_Move_Flag==0)
 8000c3e:	4b19      	ldr	r3, [pc, #100]	; (8000ca4 <Server_Start+0x2fc>)
 8000c40:	781b      	ldrb	r3, [r3, #0]
 8000c42:	2b00      	cmp	r3, #0
 8000c44:	d102      	bne.n	8000c4c <Server_Start+0x2a4>
				Locker_Flag[1][1]=2;
 8000c46:	4b18      	ldr	r3, [pc, #96]	; (8000ca8 <Server_Start+0x300>)
 8000c48:	2202      	movs	r2, #2
 8000c4a:	715a      	strb	r2, [r3, #5]
			Locker_Move_Flag=6;
 8000c4c:	4b15      	ldr	r3, [pc, #84]	; (8000ca4 <Server_Start+0x2fc>)
 8000c4e:	2206      	movs	r2, #6
 8000c50:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeron",Link_ID);
 8000c52:	79fb      	ldrb	r3, [r7, #7]
 8000c54:	4619      	mov	r1, r3
 8000c56:	4811      	ldr	r0, [pc, #68]	; (8000c9c <Server_Start+0x2f4>)
 8000c58:	f7ff fe0c 	bl	8000874 <Server_Handle>
 8000c5c:	e269      	b.n	8001132 <Server_Start+0x78a>
		}

		else if(Look_for("/lockeroncall7", buftocopyinto) == 1)
 8000c5e:	f107 0308 	add.w	r3, r7, #8
 8000c62:	4619      	mov	r1, r3
 8000c64:	481d      	ldr	r0, [pc, #116]	; (8000cdc <Server_Start+0x334>)
 8000c66:	f000 fae8 	bl	800123a <Look_for>
 8000c6a:	4603      	mov	r3, r0
 8000c6c:	2b01      	cmp	r3, #1
 8000c6e:	d137      	bne.n	8000ce0 <Server_Start+0x338>
		{
			if(Locker_Move_Flag==0)
 8000c70:	4b0c      	ldr	r3, [pc, #48]	; (8000ca4 <Server_Start+0x2fc>)
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	2b00      	cmp	r3, #0
 8000c76:	d102      	bne.n	8000c7e <Server_Start+0x2d6>
				Locker_Flag[1][2]=1;
 8000c78:	4b0b      	ldr	r3, [pc, #44]	; (8000ca8 <Server_Start+0x300>)
 8000c7a:	2201      	movs	r2, #1
 8000c7c:	719a      	strb	r2, [r3, #6]
			Locker_Move_Flag=7;
 8000c7e:	4b09      	ldr	r3, [pc, #36]	; (8000ca4 <Server_Start+0x2fc>)
 8000c80:	2207      	movs	r2, #7
 8000c82:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroncall",Link_ID);
 8000c84:	79fb      	ldrb	r3, [r7, #7]
 8000c86:	4619      	mov	r1, r3
 8000c88:	4808      	ldr	r0, [pc, #32]	; (8000cac <Server_Start+0x304>)
 8000c8a:	f7ff fdf3 	bl	8000874 <Server_Handle>
 8000c8e:	e250      	b.n	8001132 <Server_Start+0x78a>
 8000c90:	20000a54 	.word	0x20000a54
 8000c94:	08006cdc 	.word	0x08006cdc
 8000c98:	08006ce4 	.word	0x08006ce4
 8000c9c:	08006cb4 	.word	0x08006cb4
 8000ca0:	08006cf0 	.word	0x08006cf0
 8000ca4:	200008f0 	.word	0x200008f0
 8000ca8:	200008f4 	.word	0x200008f4
 8000cac:	08006ca4 	.word	0x08006ca4
 8000cb0:	08006d00 	.word	0x08006d00
 8000cb4:	08006d0c 	.word	0x08006d0c
 8000cb8:	08006d1c 	.word	0x08006d1c
 8000cbc:	08006d28 	.word	0x08006d28
 8000cc0:	08006d38 	.word	0x08006d38
 8000cc4:	08006d44 	.word	0x08006d44
 8000cc8:	08006d54 	.word	0x08006d54
 8000ccc:	08006d60 	.word	0x08006d60
 8000cd0:	08006d70 	.word	0x08006d70
 8000cd4:	08006d7c 	.word	0x08006d7c
 8000cd8:	08006d8c 	.word	0x08006d8c
 8000cdc:	08006d98 	.word	0x08006d98
		}
		else if(Look_for("/lockeron7", buftocopyinto) == 1)
 8000ce0:	f107 0308 	add.w	r3, r7, #8
 8000ce4:	4619      	mov	r1, r3
 8000ce6:	48b5      	ldr	r0, [pc, #724]	; (8000fbc <Server_Start+0x614>)
 8000ce8:	f000 faa7 	bl	800123a <Look_for>
 8000cec:	4603      	mov	r3, r0
 8000cee:	2b01      	cmp	r3, #1
 8000cf0:	d10f      	bne.n	8000d12 <Server_Start+0x36a>
		{
			if(Locker_Move_Flag==0)
 8000cf2:	4bb3      	ldr	r3, [pc, #716]	; (8000fc0 <Server_Start+0x618>)
 8000cf4:	781b      	ldrb	r3, [r3, #0]
 8000cf6:	2b00      	cmp	r3, #0
 8000cf8:	d102      	bne.n	8000d00 <Server_Start+0x358>
				Locker_Flag[1][2]=2;
 8000cfa:	4bb2      	ldr	r3, [pc, #712]	; (8000fc4 <Server_Start+0x61c>)
 8000cfc:	2202      	movs	r2, #2
 8000cfe:	719a      	strb	r2, [r3, #6]
			Locker_Move_Flag=7;
 8000d00:	4baf      	ldr	r3, [pc, #700]	; (8000fc0 <Server_Start+0x618>)
 8000d02:	2207      	movs	r2, #7
 8000d04:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeron",Link_ID);
 8000d06:	79fb      	ldrb	r3, [r7, #7]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	48af      	ldr	r0, [pc, #700]	; (8000fc8 <Server_Start+0x620>)
 8000d0c:	f7ff fdb2 	bl	8000874 <Server_Handle>
 8000d10:	e20f      	b.n	8001132 <Server_Start+0x78a>
		}

		else if(Look_for("/lockeroncall8", buftocopyinto) == 1)
 8000d12:	f107 0308 	add.w	r3, r7, #8
 8000d16:	4619      	mov	r1, r3
 8000d18:	48ac      	ldr	r0, [pc, #688]	; (8000fcc <Server_Start+0x624>)
 8000d1a:	f000 fa8e 	bl	800123a <Look_for>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b01      	cmp	r3, #1
 8000d22:	d10f      	bne.n	8000d44 <Server_Start+0x39c>
		{
			if(Locker_Move_Flag==0)
 8000d24:	4ba6      	ldr	r3, [pc, #664]	; (8000fc0 <Server_Start+0x618>)
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	2b00      	cmp	r3, #0
 8000d2a:	d102      	bne.n	8000d32 <Server_Start+0x38a>
				Locker_Flag[1][3]=1;
 8000d2c:	4ba5      	ldr	r3, [pc, #660]	; (8000fc4 <Server_Start+0x61c>)
 8000d2e:	2201      	movs	r2, #1
 8000d30:	71da      	strb	r2, [r3, #7]
			Locker_Move_Flag=8;
 8000d32:	4ba3      	ldr	r3, [pc, #652]	; (8000fc0 <Server_Start+0x618>)
 8000d34:	2208      	movs	r2, #8
 8000d36:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroncall",Link_ID);
 8000d38:	79fb      	ldrb	r3, [r7, #7]
 8000d3a:	4619      	mov	r1, r3
 8000d3c:	48a4      	ldr	r0, [pc, #656]	; (8000fd0 <Server_Start+0x628>)
 8000d3e:	f7ff fd99 	bl	8000874 <Server_Handle>
 8000d42:	e1f6      	b.n	8001132 <Server_Start+0x78a>
		}
		else if(Look_for("/lockeron8", buftocopyinto) == 1)
 8000d44:	f107 0308 	add.w	r3, r7, #8
 8000d48:	4619      	mov	r1, r3
 8000d4a:	48a2      	ldr	r0, [pc, #648]	; (8000fd4 <Server_Start+0x62c>)
 8000d4c:	f000 fa75 	bl	800123a <Look_for>
 8000d50:	4603      	mov	r3, r0
 8000d52:	2b01      	cmp	r3, #1
 8000d54:	d10f      	bne.n	8000d76 <Server_Start+0x3ce>
		{
			if(Locker_Move_Flag==0)
 8000d56:	4b9a      	ldr	r3, [pc, #616]	; (8000fc0 <Server_Start+0x618>)
 8000d58:	781b      	ldrb	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d102      	bne.n	8000d64 <Server_Start+0x3bc>
				Locker_Flag[1][3]=2;
 8000d5e:	4b99      	ldr	r3, [pc, #612]	; (8000fc4 <Server_Start+0x61c>)
 8000d60:	2202      	movs	r2, #2
 8000d62:	71da      	strb	r2, [r3, #7]
			Locker_Move_Flag=8;
 8000d64:	4b96      	ldr	r3, [pc, #600]	; (8000fc0 <Server_Start+0x618>)
 8000d66:	2208      	movs	r2, #8
 8000d68:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeron",Link_ID);
 8000d6a:	79fb      	ldrb	r3, [r7, #7]
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4896      	ldr	r0, [pc, #600]	; (8000fc8 <Server_Start+0x620>)
 8000d70:	f7ff fd80 	bl	8000874 <Server_Handle>
 8000d74:	e1dd      	b.n	8001132 <Server_Start+0x78a>
		}

		else
		{
			Server_Handle("/ ", Link_ID);
 8000d76:	79fb      	ldrb	r3, [r7, #7]
 8000d78:	4619      	mov	r1, r3
 8000d7a:	4897      	ldr	r0, [pc, #604]	; (8000fd8 <Server_Start+0x630>)
 8000d7c:	f7ff fd7a 	bl	8000874 <Server_Handle>
			return;
 8000d80:	e1d7      	b.n	8001132 <Server_Start+0x78a>
		}


	}

	else if (Look_for("/lockeroff", buftocopyinto) == 1)
 8000d82:	f107 0308 	add.w	r3, r7, #8
 8000d86:	4619      	mov	r1, r3
 8000d88:	4894      	ldr	r0, [pc, #592]	; (8000fdc <Server_Start+0x634>)
 8000d8a:	f000 fa56 	bl	800123a <Look_for>
 8000d8e:	4603      	mov	r3, r0
 8000d90:	2b01      	cmp	r3, #1
 8000d92:	f040 81c0 	bne.w	8001116 <Server_Start+0x76e>
	{


		if(Look_for("/lockeroffcall1", buftocopyinto) == 1)
 8000d96:	f107 0308 	add.w	r3, r7, #8
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	4890      	ldr	r0, [pc, #576]	; (8000fe0 <Server_Start+0x638>)
 8000d9e:	f000 fa4c 	bl	800123a <Look_for>
 8000da2:	4603      	mov	r3, r0
 8000da4:	2b01      	cmp	r3, #1
 8000da6:	d10f      	bne.n	8000dc8 <Server_Start+0x420>
		{
			if(Locker_Move_Flag==0)
 8000da8:	4b85      	ldr	r3, [pc, #532]	; (8000fc0 <Server_Start+0x618>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d102      	bne.n	8000db6 <Server_Start+0x40e>
				Locker_Flag[0][0]=3;
 8000db0:	4b84      	ldr	r3, [pc, #528]	; (8000fc4 <Server_Start+0x61c>)
 8000db2:	2203      	movs	r2, #3
 8000db4:	701a      	strb	r2, [r3, #0]
			Locker_Move_Flag=1;
 8000db6:	4b82      	ldr	r3, [pc, #520]	; (8000fc0 <Server_Start+0x618>)
 8000db8:	2201      	movs	r2, #1
 8000dba:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroffcall",Link_ID);
 8000dbc:	79fb      	ldrb	r3, [r7, #7]
 8000dbe:	4619      	mov	r1, r3
 8000dc0:	4888      	ldr	r0, [pc, #544]	; (8000fe4 <Server_Start+0x63c>)
 8000dc2:	f7ff fd57 	bl	8000874 <Server_Handle>
 8000dc6:	e1b4      	b.n	8001132 <Server_Start+0x78a>
		}
		else if(Look_for("/lockeroff1", buftocopyinto) == 1)
 8000dc8:	f107 0308 	add.w	r3, r7, #8
 8000dcc:	4619      	mov	r1, r3
 8000dce:	4886      	ldr	r0, [pc, #536]	; (8000fe8 <Server_Start+0x640>)
 8000dd0:	f000 fa33 	bl	800123a <Look_for>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d10f      	bne.n	8000dfa <Server_Start+0x452>
		{
			if(Locker_Move_Flag==0)
 8000dda:	4b79      	ldr	r3, [pc, #484]	; (8000fc0 <Server_Start+0x618>)
 8000ddc:	781b      	ldrb	r3, [r3, #0]
 8000dde:	2b00      	cmp	r3, #0
 8000de0:	d102      	bne.n	8000de8 <Server_Start+0x440>
				Locker_Flag[0][0]=4;
 8000de2:	4b78      	ldr	r3, [pc, #480]	; (8000fc4 <Server_Start+0x61c>)
 8000de4:	2204      	movs	r2, #4
 8000de6:	701a      	strb	r2, [r3, #0]
			Locker_Move_Flag=1;
 8000de8:	4b75      	ldr	r3, [pc, #468]	; (8000fc0 <Server_Start+0x618>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroff",Link_ID);
 8000dee:	79fb      	ldrb	r3, [r7, #7]
 8000df0:	4619      	mov	r1, r3
 8000df2:	487a      	ldr	r0, [pc, #488]	; (8000fdc <Server_Start+0x634>)
 8000df4:	f7ff fd3e 	bl	8000874 <Server_Handle>
 8000df8:	e19b      	b.n	8001132 <Server_Start+0x78a>
		}


		else if(Look_for("/lockeroffcall2", buftocopyinto) == 1)
 8000dfa:	f107 0308 	add.w	r3, r7, #8
 8000dfe:	4619      	mov	r1, r3
 8000e00:	487a      	ldr	r0, [pc, #488]	; (8000fec <Server_Start+0x644>)
 8000e02:	f000 fa1a 	bl	800123a <Look_for>
 8000e06:	4603      	mov	r3, r0
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d10f      	bne.n	8000e2c <Server_Start+0x484>
		{
			if(Locker_Move_Flag==0)
 8000e0c:	4b6c      	ldr	r3, [pc, #432]	; (8000fc0 <Server_Start+0x618>)
 8000e0e:	781b      	ldrb	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <Server_Start+0x472>
				Locker_Flag[0][1]=3;
 8000e14:	4b6b      	ldr	r3, [pc, #428]	; (8000fc4 <Server_Start+0x61c>)
 8000e16:	2203      	movs	r2, #3
 8000e18:	705a      	strb	r2, [r3, #1]
			Locker_Move_Flag=2;
 8000e1a:	4b69      	ldr	r3, [pc, #420]	; (8000fc0 <Server_Start+0x618>)
 8000e1c:	2202      	movs	r2, #2
 8000e1e:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroffcall",Link_ID);
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	4619      	mov	r1, r3
 8000e24:	486f      	ldr	r0, [pc, #444]	; (8000fe4 <Server_Start+0x63c>)
 8000e26:	f7ff fd25 	bl	8000874 <Server_Handle>
 8000e2a:	e182      	b.n	8001132 <Server_Start+0x78a>
		}
		else if(Look_for("/lockeroff2", buftocopyinto) == 1)
 8000e2c:	f107 0308 	add.w	r3, r7, #8
 8000e30:	4619      	mov	r1, r3
 8000e32:	486f      	ldr	r0, [pc, #444]	; (8000ff0 <Server_Start+0x648>)
 8000e34:	f000 fa01 	bl	800123a <Look_for>
 8000e38:	4603      	mov	r3, r0
 8000e3a:	2b01      	cmp	r3, #1
 8000e3c:	d10f      	bne.n	8000e5e <Server_Start+0x4b6>
		{
			if(Locker_Move_Flag==0)
 8000e3e:	4b60      	ldr	r3, [pc, #384]	; (8000fc0 <Server_Start+0x618>)
 8000e40:	781b      	ldrb	r3, [r3, #0]
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	d102      	bne.n	8000e4c <Server_Start+0x4a4>
				Locker_Flag[0][1]=4;
 8000e46:	4b5f      	ldr	r3, [pc, #380]	; (8000fc4 <Server_Start+0x61c>)
 8000e48:	2204      	movs	r2, #4
 8000e4a:	705a      	strb	r2, [r3, #1]
			Locker_Move_Flag=2;
 8000e4c:	4b5c      	ldr	r3, [pc, #368]	; (8000fc0 <Server_Start+0x618>)
 8000e4e:	2202      	movs	r2, #2
 8000e50:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroff",Link_ID);
 8000e52:	79fb      	ldrb	r3, [r7, #7]
 8000e54:	4619      	mov	r1, r3
 8000e56:	4861      	ldr	r0, [pc, #388]	; (8000fdc <Server_Start+0x634>)
 8000e58:	f7ff fd0c 	bl	8000874 <Server_Handle>
 8000e5c:	e169      	b.n	8001132 <Server_Start+0x78a>
		}

		else if(Look_for("/lockeroffcall3", buftocopyinto) == 1)
 8000e5e:	f107 0308 	add.w	r3, r7, #8
 8000e62:	4619      	mov	r1, r3
 8000e64:	4863      	ldr	r0, [pc, #396]	; (8000ff4 <Server_Start+0x64c>)
 8000e66:	f000 f9e8 	bl	800123a <Look_for>
 8000e6a:	4603      	mov	r3, r0
 8000e6c:	2b01      	cmp	r3, #1
 8000e6e:	d10f      	bne.n	8000e90 <Server_Start+0x4e8>
		{
			if(Locker_Move_Flag==0)
 8000e70:	4b53      	ldr	r3, [pc, #332]	; (8000fc0 <Server_Start+0x618>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	d102      	bne.n	8000e7e <Server_Start+0x4d6>
				Locker_Flag[0][2]=3;
 8000e78:	4b52      	ldr	r3, [pc, #328]	; (8000fc4 <Server_Start+0x61c>)
 8000e7a:	2203      	movs	r2, #3
 8000e7c:	709a      	strb	r2, [r3, #2]
			Locker_Move_Flag=3;
 8000e7e:	4b50      	ldr	r3, [pc, #320]	; (8000fc0 <Server_Start+0x618>)
 8000e80:	2203      	movs	r2, #3
 8000e82:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroffcall",Link_ID);
 8000e84:	79fb      	ldrb	r3, [r7, #7]
 8000e86:	4619      	mov	r1, r3
 8000e88:	4856      	ldr	r0, [pc, #344]	; (8000fe4 <Server_Start+0x63c>)
 8000e8a:	f7ff fcf3 	bl	8000874 <Server_Handle>
 8000e8e:	e150      	b.n	8001132 <Server_Start+0x78a>
		}
		else if(Look_for("/lockeroff3", buftocopyinto) == 1)
 8000e90:	f107 0308 	add.w	r3, r7, #8
 8000e94:	4619      	mov	r1, r3
 8000e96:	4858      	ldr	r0, [pc, #352]	; (8000ff8 <Server_Start+0x650>)
 8000e98:	f000 f9cf 	bl	800123a <Look_for>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b01      	cmp	r3, #1
 8000ea0:	d10f      	bne.n	8000ec2 <Server_Start+0x51a>
		{
			if(Locker_Move_Flag==0)
 8000ea2:	4b47      	ldr	r3, [pc, #284]	; (8000fc0 <Server_Start+0x618>)
 8000ea4:	781b      	ldrb	r3, [r3, #0]
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d102      	bne.n	8000eb0 <Server_Start+0x508>
				Locker_Flag[0][2]=4;
 8000eaa:	4b46      	ldr	r3, [pc, #280]	; (8000fc4 <Server_Start+0x61c>)
 8000eac:	2204      	movs	r2, #4
 8000eae:	709a      	strb	r2, [r3, #2]
			Locker_Move_Flag=3;
 8000eb0:	4b43      	ldr	r3, [pc, #268]	; (8000fc0 <Server_Start+0x618>)
 8000eb2:	2203      	movs	r2, #3
 8000eb4:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroff",Link_ID);
 8000eb6:	79fb      	ldrb	r3, [r7, #7]
 8000eb8:	4619      	mov	r1, r3
 8000eba:	4848      	ldr	r0, [pc, #288]	; (8000fdc <Server_Start+0x634>)
 8000ebc:	f7ff fcda 	bl	8000874 <Server_Handle>
 8000ec0:	e137      	b.n	8001132 <Server_Start+0x78a>
		}

		else if(Look_for("/lockeroffcall4", buftocopyinto) == 1)
 8000ec2:	f107 0308 	add.w	r3, r7, #8
 8000ec6:	4619      	mov	r1, r3
 8000ec8:	484c      	ldr	r0, [pc, #304]	; (8000ffc <Server_Start+0x654>)
 8000eca:	f000 f9b6 	bl	800123a <Look_for>
 8000ece:	4603      	mov	r3, r0
 8000ed0:	2b01      	cmp	r3, #1
 8000ed2:	d10f      	bne.n	8000ef4 <Server_Start+0x54c>
		{
			if(Locker_Move_Flag==0)
 8000ed4:	4b3a      	ldr	r3, [pc, #232]	; (8000fc0 <Server_Start+0x618>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b00      	cmp	r3, #0
 8000eda:	d102      	bne.n	8000ee2 <Server_Start+0x53a>
				Locker_Flag[0][3]=3;
 8000edc:	4b39      	ldr	r3, [pc, #228]	; (8000fc4 <Server_Start+0x61c>)
 8000ede:	2203      	movs	r2, #3
 8000ee0:	70da      	strb	r2, [r3, #3]
			Locker_Move_Flag=4;
 8000ee2:	4b37      	ldr	r3, [pc, #220]	; (8000fc0 <Server_Start+0x618>)
 8000ee4:	2204      	movs	r2, #4
 8000ee6:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroffcall",Link_ID);
 8000ee8:	79fb      	ldrb	r3, [r7, #7]
 8000eea:	4619      	mov	r1, r3
 8000eec:	483d      	ldr	r0, [pc, #244]	; (8000fe4 <Server_Start+0x63c>)
 8000eee:	f7ff fcc1 	bl	8000874 <Server_Handle>
 8000ef2:	e11e      	b.n	8001132 <Server_Start+0x78a>
		}
		else if(Look_for("/lockeroff4", buftocopyinto) == 1)
 8000ef4:	f107 0308 	add.w	r3, r7, #8
 8000ef8:	4619      	mov	r1, r3
 8000efa:	4841      	ldr	r0, [pc, #260]	; (8001000 <Server_Start+0x658>)
 8000efc:	f000 f99d 	bl	800123a <Look_for>
 8000f00:	4603      	mov	r3, r0
 8000f02:	2b01      	cmp	r3, #1
 8000f04:	d10f      	bne.n	8000f26 <Server_Start+0x57e>
		{
			if(Locker_Move_Flag==0)
 8000f06:	4b2e      	ldr	r3, [pc, #184]	; (8000fc0 <Server_Start+0x618>)
 8000f08:	781b      	ldrb	r3, [r3, #0]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d102      	bne.n	8000f14 <Server_Start+0x56c>
				Locker_Flag[0][3]=4;
 8000f0e:	4b2d      	ldr	r3, [pc, #180]	; (8000fc4 <Server_Start+0x61c>)
 8000f10:	2204      	movs	r2, #4
 8000f12:	70da      	strb	r2, [r3, #3]
			Locker_Move_Flag=4;
 8000f14:	4b2a      	ldr	r3, [pc, #168]	; (8000fc0 <Server_Start+0x618>)
 8000f16:	2204      	movs	r2, #4
 8000f18:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroff",Link_ID);
 8000f1a:	79fb      	ldrb	r3, [r7, #7]
 8000f1c:	4619      	mov	r1, r3
 8000f1e:	482f      	ldr	r0, [pc, #188]	; (8000fdc <Server_Start+0x634>)
 8000f20:	f7ff fca8 	bl	8000874 <Server_Handle>
 8000f24:	e105      	b.n	8001132 <Server_Start+0x78a>
		}

		else if(Look_for("/lockeroffcall5", buftocopyinto) == 1)
 8000f26:	f107 0308 	add.w	r3, r7, #8
 8000f2a:	4619      	mov	r1, r3
 8000f2c:	4835      	ldr	r0, [pc, #212]	; (8001004 <Server_Start+0x65c>)
 8000f2e:	f000 f984 	bl	800123a <Look_for>
 8000f32:	4603      	mov	r3, r0
 8000f34:	2b01      	cmp	r3, #1
 8000f36:	d10f      	bne.n	8000f58 <Server_Start+0x5b0>
		{
			if(Locker_Move_Flag==0)
 8000f38:	4b21      	ldr	r3, [pc, #132]	; (8000fc0 <Server_Start+0x618>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <Server_Start+0x59e>
				Locker_Flag[1][0]=3;
 8000f40:	4b20      	ldr	r3, [pc, #128]	; (8000fc4 <Server_Start+0x61c>)
 8000f42:	2203      	movs	r2, #3
 8000f44:	711a      	strb	r2, [r3, #4]
			Locker_Move_Flag=5;
 8000f46:	4b1e      	ldr	r3, [pc, #120]	; (8000fc0 <Server_Start+0x618>)
 8000f48:	2205      	movs	r2, #5
 8000f4a:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroffcall",Link_ID);
 8000f4c:	79fb      	ldrb	r3, [r7, #7]
 8000f4e:	4619      	mov	r1, r3
 8000f50:	4824      	ldr	r0, [pc, #144]	; (8000fe4 <Server_Start+0x63c>)
 8000f52:	f7ff fc8f 	bl	8000874 <Server_Handle>
 8000f56:	e0ec      	b.n	8001132 <Server_Start+0x78a>
		}
		else if(Look_for("/lockeroff5", buftocopyinto) == 1)
 8000f58:	f107 0308 	add.w	r3, r7, #8
 8000f5c:	4619      	mov	r1, r3
 8000f5e:	482a      	ldr	r0, [pc, #168]	; (8001008 <Server_Start+0x660>)
 8000f60:	f000 f96b 	bl	800123a <Look_for>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b01      	cmp	r3, #1
 8000f68:	d10f      	bne.n	8000f8a <Server_Start+0x5e2>
		{
			if(Locker_Move_Flag==0)
 8000f6a:	4b15      	ldr	r3, [pc, #84]	; (8000fc0 <Server_Start+0x618>)
 8000f6c:	781b      	ldrb	r3, [r3, #0]
 8000f6e:	2b00      	cmp	r3, #0
 8000f70:	d102      	bne.n	8000f78 <Server_Start+0x5d0>
				Locker_Flag[1][0]=4;
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <Server_Start+0x61c>)
 8000f74:	2204      	movs	r2, #4
 8000f76:	711a      	strb	r2, [r3, #4]
			Locker_Move_Flag=5;
 8000f78:	4b11      	ldr	r3, [pc, #68]	; (8000fc0 <Server_Start+0x618>)
 8000f7a:	2205      	movs	r2, #5
 8000f7c:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroff",Link_ID);
 8000f7e:	79fb      	ldrb	r3, [r7, #7]
 8000f80:	4619      	mov	r1, r3
 8000f82:	4816      	ldr	r0, [pc, #88]	; (8000fdc <Server_Start+0x634>)
 8000f84:	f7ff fc76 	bl	8000874 <Server_Handle>
 8000f88:	e0d3      	b.n	8001132 <Server_Start+0x78a>
		}

		else if(Look_for("/lockeroffcall6", buftocopyinto) == 1)
 8000f8a:	f107 0308 	add.w	r3, r7, #8
 8000f8e:	4619      	mov	r1, r3
 8000f90:	481e      	ldr	r0, [pc, #120]	; (800100c <Server_Start+0x664>)
 8000f92:	f000 f952 	bl	800123a <Look_for>
 8000f96:	4603      	mov	r3, r0
 8000f98:	2b01      	cmp	r3, #1
 8000f9a:	d139      	bne.n	8001010 <Server_Start+0x668>
		{
			if(Locker_Move_Flag==0)
 8000f9c:	4b08      	ldr	r3, [pc, #32]	; (8000fc0 <Server_Start+0x618>)
 8000f9e:	781b      	ldrb	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d102      	bne.n	8000faa <Server_Start+0x602>
				Locker_Flag[1][1]=3;
 8000fa4:	4b07      	ldr	r3, [pc, #28]	; (8000fc4 <Server_Start+0x61c>)
 8000fa6:	2203      	movs	r2, #3
 8000fa8:	715a      	strb	r2, [r3, #5]
			Locker_Move_Flag=6;
 8000faa:	4b05      	ldr	r3, [pc, #20]	; (8000fc0 <Server_Start+0x618>)
 8000fac:	2206      	movs	r2, #6
 8000fae:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroffcall",Link_ID);
 8000fb0:	79fb      	ldrb	r3, [r7, #7]
 8000fb2:	4619      	mov	r1, r3
 8000fb4:	480b      	ldr	r0, [pc, #44]	; (8000fe4 <Server_Start+0x63c>)
 8000fb6:	f7ff fc5d 	bl	8000874 <Server_Handle>
 8000fba:	e0ba      	b.n	8001132 <Server_Start+0x78a>
 8000fbc:	08006da8 	.word	0x08006da8
 8000fc0:	200008f0 	.word	0x200008f0
 8000fc4:	200008f4 	.word	0x200008f4
 8000fc8:	08006cb4 	.word	0x08006cb4
 8000fcc:	08006db4 	.word	0x08006db4
 8000fd0:	08006ca4 	.word	0x08006ca4
 8000fd4:	08006dc4 	.word	0x08006dc4
 8000fd8:	08006dd0 	.word	0x08006dd0
 8000fdc:	08006cd0 	.word	0x08006cd0
 8000fe0:	08006dd4 	.word	0x08006dd4
 8000fe4:	08006cc0 	.word	0x08006cc0
 8000fe8:	08006de4 	.word	0x08006de4
 8000fec:	08006df0 	.word	0x08006df0
 8000ff0:	08006e00 	.word	0x08006e00
 8000ff4:	08006e0c 	.word	0x08006e0c
 8000ff8:	08006e1c 	.word	0x08006e1c
 8000ffc:	08006e28 	.word	0x08006e28
 8001000:	08006e38 	.word	0x08006e38
 8001004:	08006e44 	.word	0x08006e44
 8001008:	08006e54 	.word	0x08006e54
 800100c:	08006e60 	.word	0x08006e60
		}
		else if(Look_for("/lockeroff6", buftocopyinto) == 1)
 8001010:	f107 0308 	add.w	r3, r7, #8
 8001014:	4619      	mov	r1, r3
 8001016:	4848      	ldr	r0, [pc, #288]	; (8001138 <Server_Start+0x790>)
 8001018:	f000 f90f 	bl	800123a <Look_for>
 800101c:	4603      	mov	r3, r0
 800101e:	2b01      	cmp	r3, #1
 8001020:	d10f      	bne.n	8001042 <Server_Start+0x69a>
		{
			if(Locker_Move_Flag==0)
 8001022:	4b46      	ldr	r3, [pc, #280]	; (800113c <Server_Start+0x794>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	2b00      	cmp	r3, #0
 8001028:	d102      	bne.n	8001030 <Server_Start+0x688>
				Locker_Flag[1][1]=4;
 800102a:	4b45      	ldr	r3, [pc, #276]	; (8001140 <Server_Start+0x798>)
 800102c:	2204      	movs	r2, #4
 800102e:	715a      	strb	r2, [r3, #5]
			Locker_Move_Flag=6;
 8001030:	4b42      	ldr	r3, [pc, #264]	; (800113c <Server_Start+0x794>)
 8001032:	2206      	movs	r2, #6
 8001034:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroff",Link_ID);
 8001036:	79fb      	ldrb	r3, [r7, #7]
 8001038:	4619      	mov	r1, r3
 800103a:	4842      	ldr	r0, [pc, #264]	; (8001144 <Server_Start+0x79c>)
 800103c:	f7ff fc1a 	bl	8000874 <Server_Handle>
 8001040:	e077      	b.n	8001132 <Server_Start+0x78a>
		}

		else if(Look_for("/lockeroffcall7", buftocopyinto) == 1)
 8001042:	f107 0308 	add.w	r3, r7, #8
 8001046:	4619      	mov	r1, r3
 8001048:	483f      	ldr	r0, [pc, #252]	; (8001148 <Server_Start+0x7a0>)
 800104a:	f000 f8f6 	bl	800123a <Look_for>
 800104e:	4603      	mov	r3, r0
 8001050:	2b01      	cmp	r3, #1
 8001052:	d10f      	bne.n	8001074 <Server_Start+0x6cc>
		{
			if(Locker_Move_Flag==0)
 8001054:	4b39      	ldr	r3, [pc, #228]	; (800113c <Server_Start+0x794>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	2b00      	cmp	r3, #0
 800105a:	d102      	bne.n	8001062 <Server_Start+0x6ba>
				Locker_Flag[1][2]=3;
 800105c:	4b38      	ldr	r3, [pc, #224]	; (8001140 <Server_Start+0x798>)
 800105e:	2203      	movs	r2, #3
 8001060:	719a      	strb	r2, [r3, #6]
			Locker_Move_Flag=7;
 8001062:	4b36      	ldr	r3, [pc, #216]	; (800113c <Server_Start+0x794>)
 8001064:	2207      	movs	r2, #7
 8001066:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroffcall",Link_ID);
 8001068:	79fb      	ldrb	r3, [r7, #7]
 800106a:	4619      	mov	r1, r3
 800106c:	4837      	ldr	r0, [pc, #220]	; (800114c <Server_Start+0x7a4>)
 800106e:	f7ff fc01 	bl	8000874 <Server_Handle>
 8001072:	e05e      	b.n	8001132 <Server_Start+0x78a>
		}
		else if(Look_for("/lockeroff7", buftocopyinto) == 1)
 8001074:	f107 0308 	add.w	r3, r7, #8
 8001078:	4619      	mov	r1, r3
 800107a:	4835      	ldr	r0, [pc, #212]	; (8001150 <Server_Start+0x7a8>)
 800107c:	f000 f8dd 	bl	800123a <Look_for>
 8001080:	4603      	mov	r3, r0
 8001082:	2b01      	cmp	r3, #1
 8001084:	d10f      	bne.n	80010a6 <Server_Start+0x6fe>
		{
			if(Locker_Move_Flag==0)
 8001086:	4b2d      	ldr	r3, [pc, #180]	; (800113c <Server_Start+0x794>)
 8001088:	781b      	ldrb	r3, [r3, #0]
 800108a:	2b00      	cmp	r3, #0
 800108c:	d102      	bne.n	8001094 <Server_Start+0x6ec>
				Locker_Flag[1][2]=4;
 800108e:	4b2c      	ldr	r3, [pc, #176]	; (8001140 <Server_Start+0x798>)
 8001090:	2204      	movs	r2, #4
 8001092:	719a      	strb	r2, [r3, #6]
			Locker_Move_Flag=7;
 8001094:	4b29      	ldr	r3, [pc, #164]	; (800113c <Server_Start+0x794>)
 8001096:	2207      	movs	r2, #7
 8001098:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroff",Link_ID);
 800109a:	79fb      	ldrb	r3, [r7, #7]
 800109c:	4619      	mov	r1, r3
 800109e:	4829      	ldr	r0, [pc, #164]	; (8001144 <Server_Start+0x79c>)
 80010a0:	f7ff fbe8 	bl	8000874 <Server_Handle>
 80010a4:	e045      	b.n	8001132 <Server_Start+0x78a>
		}

		else if(Look_for("/lockeroffcall8", buftocopyinto) == 1)
 80010a6:	f107 0308 	add.w	r3, r7, #8
 80010aa:	4619      	mov	r1, r3
 80010ac:	4829      	ldr	r0, [pc, #164]	; (8001154 <Server_Start+0x7ac>)
 80010ae:	f000 f8c4 	bl	800123a <Look_for>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b01      	cmp	r3, #1
 80010b6:	d10f      	bne.n	80010d8 <Server_Start+0x730>
		{
			if(Locker_Move_Flag==0)
 80010b8:	4b20      	ldr	r3, [pc, #128]	; (800113c <Server_Start+0x794>)
 80010ba:	781b      	ldrb	r3, [r3, #0]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d102      	bne.n	80010c6 <Server_Start+0x71e>
				Locker_Flag[1][3]=3;
 80010c0:	4b1f      	ldr	r3, [pc, #124]	; (8001140 <Server_Start+0x798>)
 80010c2:	2203      	movs	r2, #3
 80010c4:	71da      	strb	r2, [r3, #7]
			Locker_Move_Flag=8;
 80010c6:	4b1d      	ldr	r3, [pc, #116]	; (800113c <Server_Start+0x794>)
 80010c8:	2208      	movs	r2, #8
 80010ca:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroffcall",Link_ID);
 80010cc:	79fb      	ldrb	r3, [r7, #7]
 80010ce:	4619      	mov	r1, r3
 80010d0:	481e      	ldr	r0, [pc, #120]	; (800114c <Server_Start+0x7a4>)
 80010d2:	f7ff fbcf 	bl	8000874 <Server_Handle>
 80010d6:	e02c      	b.n	8001132 <Server_Start+0x78a>
		}
		else if(Look_for("/lockeroff8", buftocopyinto) == 1)
 80010d8:	f107 0308 	add.w	r3, r7, #8
 80010dc:	4619      	mov	r1, r3
 80010de:	481e      	ldr	r0, [pc, #120]	; (8001158 <Server_Start+0x7b0>)
 80010e0:	f000 f8ab 	bl	800123a <Look_for>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b01      	cmp	r3, #1
 80010e8:	d10f      	bne.n	800110a <Server_Start+0x762>
		{
			if(Locker_Move_Flag==0)
 80010ea:	4b14      	ldr	r3, [pc, #80]	; (800113c <Server_Start+0x794>)
 80010ec:	781b      	ldrb	r3, [r3, #0]
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d102      	bne.n	80010f8 <Server_Start+0x750>
				Locker_Flag[1][3]=4;
 80010f2:	4b13      	ldr	r3, [pc, #76]	; (8001140 <Server_Start+0x798>)
 80010f4:	2204      	movs	r2, #4
 80010f6:	71da      	strb	r2, [r3, #7]
			Locker_Move_Flag=8;
 80010f8:	4b10      	ldr	r3, [pc, #64]	; (800113c <Server_Start+0x794>)
 80010fa:	2208      	movs	r2, #8
 80010fc:	701a      	strb	r2, [r3, #0]
			Server_Handle("/lockeroff",Link_ID);
 80010fe:	79fb      	ldrb	r3, [r7, #7]
 8001100:	4619      	mov	r1, r3
 8001102:	4810      	ldr	r0, [pc, #64]	; (8001144 <Server_Start+0x79c>)
 8001104:	f7ff fbb6 	bl	8000874 <Server_Handle>
 8001108:	e013      	b.n	8001132 <Server_Start+0x78a>
		}


		else
		{
			Server_Handle("/ ", Link_ID);
 800110a:	79fb      	ldrb	r3, [r7, #7]
 800110c:	4619      	mov	r1, r3
 800110e:	4813      	ldr	r0, [pc, #76]	; (800115c <Server_Start+0x7b4>)
 8001110:	f7ff fbb0 	bl	8000874 <Server_Handle>
			return;
 8001114:	e00d      	b.n	8001132 <Server_Start+0x78a>
		}


	}
	else if (Look_for("/favicon.ico", buftocopyinto) == 1);
 8001116:	f107 0308 	add.w	r3, r7, #8
 800111a:	4619      	mov	r1, r3
 800111c:	4810      	ldr	r0, [pc, #64]	; (8001160 <Server_Start+0x7b8>)
 800111e:	f000 f88c 	bl	800123a <Look_for>
 8001122:	4603      	mov	r3, r0
 8001124:	2b01      	cmp	r3, #1
 8001126:	d004      	beq.n	8001132 <Server_Start+0x78a>

	else
		Server_Handle("/ ", Link_ID);
 8001128:	79fb      	ldrb	r3, [r7, #7]
 800112a:	4619      	mov	r1, r3
 800112c:	480b      	ldr	r0, [pc, #44]	; (800115c <Server_Start+0x7b4>)
 800112e:	f7ff fba1 	bl	8000874 <Server_Handle>

}
 8001132:	3748      	adds	r7, #72	; 0x48
 8001134:	46bd      	mov	sp, r7
 8001136:	bd80      	pop	{r7, pc}
 8001138:	08006e70 	.word	0x08006e70
 800113c:	200008f0 	.word	0x200008f0
 8001140:	200008f4 	.word	0x200008f4
 8001144:	08006cd0 	.word	0x08006cd0
 8001148:	08006e7c 	.word	0x08006e7c
 800114c:	08006cc0 	.word	0x08006cc0
 8001150:	08006e8c 	.word	0x08006e8c
 8001154:	08006e98 	.word	0x08006e98
 8001158:	08006ea8 	.word	0x08006ea8
 800115c:	08006dd0 	.word	0x08006dd0
 8001160:	08006eb4 	.word	0x08006eb4

08001164 <Ringbuf_init>:

void store_char (unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001164:	b480      	push	{r7}
 8001166:	af00      	add	r7, sp, #0
  _rx_buffer1 = &rx_buffer1;
 8001168:	4b18      	ldr	r3, [pc, #96]	; (80011cc <Ringbuf_init+0x68>)
 800116a:	4a19      	ldr	r2, [pc, #100]	; (80011d0 <Ringbuf_init+0x6c>)
 800116c:	601a      	str	r2, [r3, #0]
  _tx_buffer1 = &tx_buffer1;
 800116e:	4b19      	ldr	r3, [pc, #100]	; (80011d4 <Ringbuf_init+0x70>)
 8001170:	4a19      	ldr	r2, [pc, #100]	; (80011d8 <Ringbuf_init+0x74>)
 8001172:	601a      	str	r2, [r3, #0]
  _rx_buffer2 = &rx_buffer2;
 8001174:	4b19      	ldr	r3, [pc, #100]	; (80011dc <Ringbuf_init+0x78>)
 8001176:	4a1a      	ldr	r2, [pc, #104]	; (80011e0 <Ringbuf_init+0x7c>)
 8001178:	601a      	str	r2, [r3, #0]
  _tx_buffer2 = &tx_buffer2;
 800117a:	4b1a      	ldr	r3, [pc, #104]	; (80011e4 <Ringbuf_init+0x80>)
 800117c:	4a1a      	ldr	r2, [pc, #104]	; (80011e8 <Ringbuf_init+0x84>)
 800117e:	601a      	str	r2, [r3, #0]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_ERR);
 8001180:	4b1a      	ldr	r3, [pc, #104]	; (80011ec <Ringbuf_init+0x88>)
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	695a      	ldr	r2, [r3, #20]
 8001186:	4b19      	ldr	r3, [pc, #100]	; (80011ec <Ringbuf_init+0x88>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	f042 0201 	orr.w	r2, r2, #1
 800118e:	615a      	str	r2, [r3, #20]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_ERR);
 8001190:	4b17      	ldr	r3, [pc, #92]	; (80011f0 <Ringbuf_init+0x8c>)
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	695a      	ldr	r2, [r3, #20]
 8001196:	4b16      	ldr	r3, [pc, #88]	; (80011f0 <Ringbuf_init+0x8c>)
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	f042 0201 	orr.w	r2, r2, #1
 800119e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(device_uart, UART_IT_RXNE);
 80011a0:	4b12      	ldr	r3, [pc, #72]	; (80011ec <Ringbuf_init+0x88>)
 80011a2:	681b      	ldr	r3, [r3, #0]
 80011a4:	68da      	ldr	r2, [r3, #12]
 80011a6:	4b11      	ldr	r3, [pc, #68]	; (80011ec <Ringbuf_init+0x88>)
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	f042 0220 	orr.w	r2, r2, #32
 80011ae:	60da      	str	r2, [r3, #12]
  __HAL_UART_ENABLE_IT(pc_uart, UART_IT_RXNE);
 80011b0:	4b0f      	ldr	r3, [pc, #60]	; (80011f0 <Ringbuf_init+0x8c>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	68da      	ldr	r2, [r3, #12]
 80011b6:	4b0e      	ldr	r3, [pc, #56]	; (80011f0 <Ringbuf_init+0x8c>)
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0220 	orr.w	r2, r2, #32
 80011be:	60da      	str	r2, [r3, #12]
}
 80011c0:	bf00      	nop
 80011c2:	46bd      	mov	sp, r7
 80011c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011c8:	4770      	bx	lr
 80011ca:	bf00      	nop
 80011cc:	2000092c 	.word	0x2000092c
 80011d0:	200000c4 	.word	0x200000c4
 80011d4:	20000930 	.word	0x20000930
 80011d8:	200002cc 	.word	0x200002cc
 80011dc:	20000934 	.word	0x20000934
 80011e0:	200004d4 	.word	0x200004d4
 80011e4:	20000928 	.word	0x20000928
 80011e8:	200006dc 	.word	0x200006dc
 80011ec:	20000a54 	.word	0x20000a54
 80011f0:	20000938 	.word	0x20000938

080011f4 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80011f4:	b480      	push	{r7}
 80011f6:	b085      	sub	sp, #20
 80011f8:	af00      	add	r7, sp, #0
 80011fa:	4603      	mov	r3, r0
 80011fc:	6039      	str	r1, [r7, #0]
 80011fe:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 8001200:	683b      	ldr	r3, [r7, #0]
 8001202:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001206:	3301      	adds	r3, #1
 8001208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800120c:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001214:	68fb      	ldr	r3, [r7, #12]
 8001216:	429a      	cmp	r2, r3
 8001218:	d009      	beq.n	800122e <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 800121a:	683b      	ldr	r3, [r7, #0]
 800121c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001220:	683a      	ldr	r2, [r7, #0]
 8001222:	79f9      	ldrb	r1, [r7, #7]
 8001224:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001226:	68fa      	ldr	r2, [r7, #12]
 8001228:	683b      	ldr	r3, [r7, #0]
 800122a:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
  }
}
 800122e:	bf00      	nop
 8001230:	3714      	adds	r7, #20
 8001232:	46bd      	mov	sp, r7
 8001234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001238:	4770      	bx	lr

0800123a <Look_for>:


int Look_for (char *str, char *buffertolookinto)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b086      	sub	sp, #24
 800123e:	af00      	add	r7, sp, #0
 8001240:	6078      	str	r0, [r7, #4]
 8001242:	6039      	str	r1, [r7, #0]
	int stringlength = strlen (str);
 8001244:	6878      	ldr	r0, [r7, #4]
 8001246:	f7fe ffdd 	bl	8000204 <strlen>
 800124a:	4603      	mov	r3, r0
 800124c:	60fb      	str	r3, [r7, #12]
	int bufferlength = strlen (buffertolookinto);
 800124e:	6838      	ldr	r0, [r7, #0]
 8001250:	f7fe ffd8 	bl	8000204 <strlen>
 8001254:	4603      	mov	r3, r0
 8001256:	60bb      	str	r3, [r7, #8]
	int so_far = 0;
 8001258:	2300      	movs	r3, #0
 800125a:	617b      	str	r3, [r7, #20]
	int indx = 0;
 800125c:	2300      	movs	r3, #0
 800125e:	613b      	str	r3, [r7, #16]
repeat:
	while (str[so_far] != buffertolookinto[indx]) indx++;
 8001260:	e002      	b.n	8001268 <Look_for+0x2e>
 8001262:	693b      	ldr	r3, [r7, #16]
 8001264:	3301      	adds	r3, #1
 8001266:	613b      	str	r3, [r7, #16]
 8001268:	697b      	ldr	r3, [r7, #20]
 800126a:	687a      	ldr	r2, [r7, #4]
 800126c:	4413      	add	r3, r2
 800126e:	781a      	ldrb	r2, [r3, #0]
 8001270:	693b      	ldr	r3, [r7, #16]
 8001272:	6839      	ldr	r1, [r7, #0]
 8001274:	440b      	add	r3, r1
 8001276:	781b      	ldrb	r3, [r3, #0]
 8001278:	429a      	cmp	r2, r3
 800127a:	d1f2      	bne.n	8001262 <Look_for+0x28>
	if (str[so_far] == buffertolookinto[indx]){
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	687a      	ldr	r2, [r7, #4]
 8001280:	4413      	add	r3, r2
 8001282:	781a      	ldrb	r2, [r3, #0]
 8001284:	693b      	ldr	r3, [r7, #16]
 8001286:	6839      	ldr	r1, [r7, #0]
 8001288:	440b      	add	r3, r1
 800128a:	781b      	ldrb	r3, [r3, #0]
 800128c:	429a      	cmp	r2, r3
 800128e:	d111      	bne.n	80012b4 <Look_for+0x7a>
	while (str[so_far] == buffertolookinto[indx])
 8001290:	e005      	b.n	800129e <Look_for+0x64>
	{
		so_far++;
 8001292:	697b      	ldr	r3, [r7, #20]
 8001294:	3301      	adds	r3, #1
 8001296:	617b      	str	r3, [r7, #20]
		indx++;
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	3301      	adds	r3, #1
 800129c:	613b      	str	r3, [r7, #16]
	while (str[so_far] == buffertolookinto[indx])
 800129e:	697b      	ldr	r3, [r7, #20]
 80012a0:	687a      	ldr	r2, [r7, #4]
 80012a2:	4413      	add	r3, r2
 80012a4:	781a      	ldrb	r2, [r3, #0]
 80012a6:	693b      	ldr	r3, [r7, #16]
 80012a8:	6839      	ldr	r1, [r7, #0]
 80012aa:	440b      	add	r3, r1
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	429a      	cmp	r2, r3
 80012b0:	d0ef      	beq.n	8001292 <Look_for+0x58>
 80012b2:	e008      	b.n	80012c6 <Look_for+0x8c>
	}
	}

	else
		{
			so_far =0;
 80012b4:	2300      	movs	r3, #0
 80012b6:	617b      	str	r3, [r7, #20]
			if (indx >= bufferlength) return -1;
 80012b8:	693a      	ldr	r2, [r7, #16]
 80012ba:	68bb      	ldr	r3, [r7, #8]
 80012bc:	429a      	cmp	r2, r3
 80012be:	dbcf      	blt.n	8001260 <Look_for+0x26>
 80012c0:	f04f 33ff 	mov.w	r3, #4294967295
 80012c4:	e007      	b.n	80012d6 <Look_for+0x9c>
			goto repeat;
		}

	if (so_far == stringlength) return 1;
 80012c6:	697a      	ldr	r2, [r7, #20]
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	429a      	cmp	r2, r3
 80012cc:	d101      	bne.n	80012d2 <Look_for+0x98>
 80012ce:	2301      	movs	r3, #1
 80012d0:	e001      	b.n	80012d6 <Look_for+0x9c>
	else return -1;
 80012d2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012d6:	4618      	mov	r0, r3
 80012d8:	3718      	adds	r7, #24
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
	...

080012e0 <Uart_flush>:
	}
}


void Uart_flush (UART_HandleTypeDef *uart)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	b082      	sub	sp, #8
 80012e4:	af00      	add	r7, sp, #0
 80012e6:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 80012e8:	687b      	ldr	r3, [r7, #4]
 80012ea:	4a12      	ldr	r2, [pc, #72]	; (8001334 <Uart_flush+0x54>)
 80012ec:	4293      	cmp	r3, r2
 80012ee:	d10c      	bne.n	800130a <Uart_flush+0x2a>
	{
		memset(_rx_buffer1->buffer,'\0', UART_BUFFER_SIZE);
 80012f0:	4b11      	ldr	r3, [pc, #68]	; (8001338 <Uart_flush+0x58>)
 80012f2:	681b      	ldr	r3, [r3, #0]
 80012f4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80012f8:	2100      	movs	r1, #0
 80012fa:	4618      	mov	r0, r3
 80012fc:	f004 fd76 	bl	8005dec <memset>
		_rx_buffer1->head = 0;
 8001300:	4b0d      	ldr	r3, [pc, #52]	; (8001338 <Uart_flush+0x58>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	2200      	movs	r2, #0
 8001306:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
	if (uart == pc_uart)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a0b      	ldr	r2, [pc, #44]	; (800133c <Uart_flush+0x5c>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d10c      	bne.n	800132c <Uart_flush+0x4c>
	{
		memset(_rx_buffer2->buffer,'\0', UART_BUFFER_SIZE);
 8001312:	4b0b      	ldr	r3, [pc, #44]	; (8001340 <Uart_flush+0x60>)
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f44f 7200 	mov.w	r2, #512	; 0x200
 800131a:	2100      	movs	r1, #0
 800131c:	4618      	mov	r0, r3
 800131e:	f004 fd65 	bl	8005dec <memset>
		_rx_buffer2->head = 0;
 8001322:	4b07      	ldr	r3, [pc, #28]	; (8001340 <Uart_flush+0x60>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	2200      	movs	r2, #0
 8001328:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
	}
}
 800132c:	bf00      	nop
 800132e:	3708      	adds	r7, #8
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	20000a54 	.word	0x20000a54
 8001338:	2000092c 	.word	0x2000092c
 800133c:	20000938 	.word	0x20000938
 8001340:	20000934 	.word	0x20000934

08001344 <Uart_peek>:


int Uart_peek(UART_HandleTypeDef *uart)
{
 8001344:	b480      	push	{r7}
 8001346:	b083      	sub	sp, #12
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	4a1c      	ldr	r2, [pc, #112]	; (80013c0 <Uart_peek+0x7c>)
 8001350:	4293      	cmp	r3, r2
 8001352:	d114      	bne.n	800137e <Uart_peek+0x3a>
	{
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <Uart_peek+0x80>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800135c:	4b19      	ldr	r3, [pc, #100]	; (80013c4 <Uart_peek+0x80>)
 800135e:	681b      	ldr	r3, [r3, #0]
 8001360:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001364:	429a      	cmp	r2, r3
 8001366:	d102      	bne.n	800136e <Uart_peek+0x2a>
		  {
		    return -1;
 8001368:	f04f 33ff 	mov.w	r3, #4294967295
 800136c:	e022      	b.n	80013b4 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer1->buffer[_rx_buffer1->tail];
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <Uart_peek+0x80>)
 8001370:	681a      	ldr	r2, [r3, #0]
 8001372:	4b14      	ldr	r3, [pc, #80]	; (80013c4 <Uart_peek+0x80>)
 8001374:	681b      	ldr	r3, [r3, #0]
 8001376:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800137a:	5cd3      	ldrb	r3, [r2, r3]
 800137c:	e01a      	b.n	80013b4 <Uart_peek+0x70>
		  }
	}

	else if (uart == pc_uart)
 800137e:	687b      	ldr	r3, [r7, #4]
 8001380:	4a11      	ldr	r2, [pc, #68]	; (80013c8 <Uart_peek+0x84>)
 8001382:	4293      	cmp	r3, r2
 8001384:	d114      	bne.n	80013b0 <Uart_peek+0x6c>
	{
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 8001386:	4b11      	ldr	r3, [pc, #68]	; (80013cc <Uart_peek+0x88>)
 8001388:	681b      	ldr	r3, [r3, #0]
 800138a:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800138e:	4b0f      	ldr	r3, [pc, #60]	; (80013cc <Uart_peek+0x88>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001396:	429a      	cmp	r2, r3
 8001398:	d102      	bne.n	80013a0 <Uart_peek+0x5c>
		  {
		    return -1;
 800139a:	f04f 33ff 	mov.w	r3, #4294967295
 800139e:	e009      	b.n	80013b4 <Uart_peek+0x70>
		  }
		  else
		  {
		    return _rx_buffer2->buffer[_rx_buffer2->tail];
 80013a0:	4b0a      	ldr	r3, [pc, #40]	; (80013cc <Uart_peek+0x88>)
 80013a2:	681a      	ldr	r2, [r3, #0]
 80013a4:	4b09      	ldr	r3, [pc, #36]	; (80013cc <Uart_peek+0x88>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80013ac:	5cd3      	ldrb	r3, [r2, r3]
 80013ae:	e001      	b.n	80013b4 <Uart_peek+0x70>
		  }
	}

	return -1;
 80013b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80013b4:	4618      	mov	r0, r3
 80013b6:	370c      	adds	r7, #12
 80013b8:	46bd      	mov	sp, r7
 80013ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013be:	4770      	bx	lr
 80013c0:	20000a54 	.word	0x20000a54
 80013c4:	2000092c 	.word	0x2000092c
 80013c8:	20000938 	.word	0x20000938
 80013cc:	20000934 	.word	0x20000934

080013d0 <Uart_read>:

int Uart_read(UART_HandleTypeDef *uart)
{
 80013d0:	b480      	push	{r7}
 80013d2:	b085      	sub	sp, #20
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
	if (uart == device_uart)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	4a29      	ldr	r2, [pc, #164]	; (8001480 <Uart_read+0xb0>)
 80013dc:	4293      	cmp	r3, r2
 80013de:	d121      	bne.n	8001424 <Uart_read+0x54>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer1->head == _rx_buffer1->tail)
 80013e0:	4b28      	ldr	r3, [pc, #160]	; (8001484 <Uart_read+0xb4>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80013e8:	4b26      	ldr	r3, [pc, #152]	; (8001484 <Uart_read+0xb4>)
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80013f0:	429a      	cmp	r2, r3
 80013f2:	d102      	bne.n	80013fa <Uart_read+0x2a>
		  {
		    return -1;
 80013f4:	f04f 33ff 	mov.w	r3, #4294967295
 80013f8:	e03c      	b.n	8001474 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer1->buffer[_rx_buffer1->tail];
 80013fa:	4b22      	ldr	r3, [pc, #136]	; (8001484 <Uart_read+0xb4>)
 80013fc:	681a      	ldr	r2, [r3, #0]
 80013fe:	4b21      	ldr	r3, [pc, #132]	; (8001484 <Uart_read+0xb4>)
 8001400:	681b      	ldr	r3, [r3, #0]
 8001402:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001406:	5cd3      	ldrb	r3, [r2, r3]
 8001408:	73bb      	strb	r3, [r7, #14]
		    _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 800140a:	4b1e      	ldr	r3, [pc, #120]	; (8001484 <Uart_read+0xb4>)
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001412:	1c5a      	adds	r2, r3, #1
 8001414:	4b1b      	ldr	r3, [pc, #108]	; (8001484 <Uart_read+0xb4>)
 8001416:	681b      	ldr	r3, [r3, #0]
 8001418:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800141c:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 8001420:	7bbb      	ldrb	r3, [r7, #14]
 8001422:	e027      	b.n	8001474 <Uart_read+0xa4>
		  }
	}

	else if (uart == pc_uart)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	4a18      	ldr	r2, [pc, #96]	; (8001488 <Uart_read+0xb8>)
 8001428:	4293      	cmp	r3, r2
 800142a:	d121      	bne.n	8001470 <Uart_read+0xa0>
	{
		  // if the head isn't ahead of the tail, we don't have any characters
		  if(_rx_buffer2->head == _rx_buffer2->tail)
 800142c:	4b17      	ldr	r3, [pc, #92]	; (800148c <Uart_read+0xbc>)
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 8001434:	4b15      	ldr	r3, [pc, #84]	; (800148c <Uart_read+0xbc>)
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800143c:	429a      	cmp	r2, r3
 800143e:	d102      	bne.n	8001446 <Uart_read+0x76>
		  {
		    return -1;
 8001440:	f04f 33ff 	mov.w	r3, #4294967295
 8001444:	e016      	b.n	8001474 <Uart_read+0xa4>
		  }
		  else
		  {
		    unsigned char c = _rx_buffer2->buffer[_rx_buffer2->tail];
 8001446:	4b11      	ldr	r3, [pc, #68]	; (800148c <Uart_read+0xbc>)
 8001448:	681a      	ldr	r2, [r3, #0]
 800144a:	4b10      	ldr	r3, [pc, #64]	; (800148c <Uart_read+0xbc>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001452:	5cd3      	ldrb	r3, [r2, r3]
 8001454:	73fb      	strb	r3, [r7, #15]
		    _rx_buffer2->tail = (unsigned int)(_rx_buffer2->tail + 1) % UART_BUFFER_SIZE;
 8001456:	4b0d      	ldr	r3, [pc, #52]	; (800148c <Uart_read+0xbc>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800145e:	1c5a      	adds	r2, r3, #1
 8001460:	4b0a      	ldr	r3, [pc, #40]	; (800148c <Uart_read+0xbc>)
 8001462:	681b      	ldr	r3, [r3, #0]
 8001464:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001468:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		    return c;
 800146c:	7bfb      	ldrb	r3, [r7, #15]
 800146e:	e001      	b.n	8001474 <Uart_read+0xa4>
		  }
	}

	else return -1;
 8001470:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001474:	4618      	mov	r0, r3
 8001476:	3714      	adds	r7, #20
 8001478:	46bd      	mov	sp, r7
 800147a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147e:	4770      	bx	lr
 8001480:	20000a54 	.word	0x20000a54
 8001484:	2000092c 	.word	0x2000092c
 8001488:	20000938 	.word	0x20000938
 800148c:	20000934 	.word	0x20000934

08001490 <Uart_write>:

void Uart_write(int c, UART_HandleTypeDef *uart)
{
 8001490:	b480      	push	{r7}
 8001492:	b085      	sub	sp, #20
 8001494:	af00      	add	r7, sp, #0
 8001496:	6078      	str	r0, [r7, #4]
 8001498:	6039      	str	r1, [r7, #0]
	if (c>=0)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	2b00      	cmp	r3, #0
 800149e:	db54      	blt.n	800154a <Uart_write+0xba>
	{
		if (uart == device_uart){
 80014a0:	683b      	ldr	r3, [r7, #0]
 80014a2:	4a2d      	ldr	r2, [pc, #180]	; (8001558 <Uart_write+0xc8>)
 80014a4:	4293      	cmp	r3, r2
 80014a6:	d126      	bne.n	80014f6 <Uart_write+0x66>
		int i = (_tx_buffer1->head + 1) % UART_BUFFER_SIZE;
 80014a8:	4b2c      	ldr	r3, [pc, #176]	; (800155c <Uart_write+0xcc>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014b0:	3301      	adds	r3, #1
 80014b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014b6:	60bb      	str	r3, [r7, #8]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer1->tail);
 80014b8:	bf00      	nop
 80014ba:	4b28      	ldr	r3, [pc, #160]	; (800155c <Uart_write+0xcc>)
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80014c2:	68bb      	ldr	r3, [r7, #8]
 80014c4:	429a      	cmp	r2, r3
 80014c6:	d0f8      	beq.n	80014ba <Uart_write+0x2a>

		_tx_buffer1->buffer[_tx_buffer1->head] = (uint8_t)c;
 80014c8:	4b24      	ldr	r3, [pc, #144]	; (800155c <Uart_write+0xcc>)
 80014ca:	681a      	ldr	r2, [r3, #0]
 80014cc:	4b23      	ldr	r3, [pc, #140]	; (800155c <Uart_write+0xcc>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80014d4:	6879      	ldr	r1, [r7, #4]
 80014d6:	b2c9      	uxtb	r1, r1
 80014d8:	54d1      	strb	r1, [r2, r3]
		_tx_buffer1->head = i;
 80014da:	4b20      	ldr	r3, [pc, #128]	; (800155c <Uart_write+0xcc>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	68ba      	ldr	r2, [r7, #8]
 80014e0:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200

		__HAL_UART_ENABLE_IT(device_uart, UART_IT_TXE); // Enable UART transmission interrupt
 80014e4:	4b1c      	ldr	r3, [pc, #112]	; (8001558 <Uart_write+0xc8>)
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	68da      	ldr	r2, [r3, #12]
 80014ea:	4b1b      	ldr	r3, [pc, #108]	; (8001558 <Uart_write+0xc8>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80014f2:	60da      	str	r2, [r3, #12]
			_tx_buffer2->head = i;

			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
			}
	}
}
 80014f4:	e029      	b.n	800154a <Uart_write+0xba>
		else if (uart == pc_uart){
 80014f6:	683b      	ldr	r3, [r7, #0]
 80014f8:	4a19      	ldr	r2, [pc, #100]	; (8001560 <Uart_write+0xd0>)
 80014fa:	4293      	cmp	r3, r2
 80014fc:	d125      	bne.n	800154a <Uart_write+0xba>
			int i = (_tx_buffer2->head + 1) % UART_BUFFER_SIZE;
 80014fe:	4b19      	ldr	r3, [pc, #100]	; (8001564 <Uart_write+0xd4>)
 8001500:	681b      	ldr	r3, [r3, #0]
 8001502:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001506:	3301      	adds	r3, #1
 8001508:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800150c:	60fb      	str	r3, [r7, #12]
			while (i == _tx_buffer2->tail);
 800150e:	bf00      	nop
 8001510:	4b14      	ldr	r3, [pc, #80]	; (8001564 <Uart_write+0xd4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	429a      	cmp	r2, r3
 800151c:	d0f8      	beq.n	8001510 <Uart_write+0x80>
			_tx_buffer2->buffer[_tx_buffer2->head] = (uint8_t)c;
 800151e:	4b11      	ldr	r3, [pc, #68]	; (8001564 <Uart_write+0xd4>)
 8001520:	681a      	ldr	r2, [r3, #0]
 8001522:	4b10      	ldr	r3, [pc, #64]	; (8001564 <Uart_write+0xd4>)
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 800152a:	6879      	ldr	r1, [r7, #4]
 800152c:	b2c9      	uxtb	r1, r1
 800152e:	54d1      	strb	r1, [r2, r3]
			_tx_buffer2->head = i;
 8001530:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <Uart_write+0xd4>)
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	68fa      	ldr	r2, [r7, #12]
 8001536:	f8c3 2200 	str.w	r2, [r3, #512]	; 0x200
			__HAL_UART_ENABLE_IT(pc_uart, UART_IT_TXE); // Enable UART transmission interrupt
 800153a:	4b09      	ldr	r3, [pc, #36]	; (8001560 <Uart_write+0xd0>)
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	68da      	ldr	r2, [r3, #12]
 8001540:	4b07      	ldr	r3, [pc, #28]	; (8001560 <Uart_write+0xd0>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8001548:	60da      	str	r2, [r3, #12]
}
 800154a:	bf00      	nop
 800154c:	3714      	adds	r7, #20
 800154e:	46bd      	mov	sp, r7
 8001550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001554:	4770      	bx	lr
 8001556:	bf00      	nop
 8001558:	20000a54 	.word	0x20000a54
 800155c:	20000930 	.word	0x20000930
 8001560:	20000938 	.word	0x20000938
 8001564:	20000928 	.word	0x20000928

08001568 <IsDataAvailable>:

int IsDataAvailable(UART_HandleTypeDef *uart)
{
 8001568:	b480      	push	{r7}
 800156a:	b083      	sub	sp, #12
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
	if (uart == device_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer1->head - _rx_buffer1->tail) % UART_BUFFER_SIZE;
 8001570:	687b      	ldr	r3, [r7, #4]
 8001572:	4a19      	ldr	r2, [pc, #100]	; (80015d8 <IsDataAvailable+0x70>)
 8001574:	4293      	cmp	r3, r2
 8001576:	d111      	bne.n	800159c <IsDataAvailable+0x34>
 8001578:	4b18      	ldr	r3, [pc, #96]	; (80015dc <IsDataAvailable+0x74>)
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 8001580:	b29a      	uxth	r2, r3
 8001582:	4b16      	ldr	r3, [pc, #88]	; (80015dc <IsDataAvailable+0x74>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800158a:	b29b      	uxth	r3, r3
 800158c:	1ad3      	subs	r3, r2, r3
 800158e:	b29b      	uxth	r3, r3
 8001590:	f503 7300 	add.w	r3, r3, #512	; 0x200
 8001594:	b29b      	uxth	r3, r3
 8001596:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800159a:	e017      	b.n	80015cc <IsDataAvailable+0x64>
	else if (uart == pc_uart) return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer2->head - _rx_buffer2->tail) % UART_BUFFER_SIZE;
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	4a10      	ldr	r2, [pc, #64]	; (80015e0 <IsDataAvailable+0x78>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d111      	bne.n	80015c8 <IsDataAvailable+0x60>
 80015a4:	4b0f      	ldr	r3, [pc, #60]	; (80015e4 <IsDataAvailable+0x7c>)
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	f8d3 3200 	ldr.w	r3, [r3, #512]	; 0x200
 80015ac:	b29a      	uxth	r2, r3
 80015ae:	4b0d      	ldr	r3, [pc, #52]	; (80015e4 <IsDataAvailable+0x7c>)
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80015b6:	b29b      	uxth	r3, r3
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	b29b      	uxth	r3, r3
 80015bc:	f503 7300 	add.w	r3, r3, #512	; 0x200
 80015c0:	b29b      	uxth	r3, r3
 80015c2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80015c6:	e001      	b.n	80015cc <IsDataAvailable+0x64>
	return -1;
 80015c8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015cc:	4618      	mov	r0, r3
 80015ce:	370c      	adds	r7, #12
 80015d0:	46bd      	mov	sp, r7
 80015d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015d6:	4770      	bx	lr
 80015d8:	20000a54 	.word	0x20000a54
 80015dc:	2000092c 	.word	0x2000092c
 80015e0:	20000938 	.word	0x20000938
 80015e4:	20000934 	.word	0x20000934

080015e8 <Get_after>:



int Get_after (char *string, uint8_t numberofchars, char *buffertosave, UART_HandleTypeDef *uart)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b086      	sub	sp, #24
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	60f8      	str	r0, [r7, #12]
 80015f0:	607a      	str	r2, [r7, #4]
 80015f2:	603b      	str	r3, [r7, #0]
 80015f4:	460b      	mov	r3, r1
 80015f6:	72fb      	strb	r3, [r7, #11]

	while (Wait_for(string, uart) != 1);
 80015f8:	bf00      	nop
 80015fa:	6839      	ldr	r1, [r7, #0]
 80015fc:	68f8      	ldr	r0, [r7, #12]
 80015fe:	f000 f8b7 	bl	8001770 <Wait_for>
 8001602:	4603      	mov	r3, r0
 8001604:	2b01      	cmp	r3, #1
 8001606:	d1f8      	bne.n	80015fa <Get_after+0x12>
	for (int indx=0; indx<numberofchars; indx++)
 8001608:	2300      	movs	r3, #0
 800160a:	617b      	str	r3, [r7, #20]
 800160c:	e012      	b.n	8001634 <Get_after+0x4c>
	{
		while (!(IsDataAvailable(uart)));
 800160e:	bf00      	nop
 8001610:	6838      	ldr	r0, [r7, #0]
 8001612:	f7ff ffa9 	bl	8001568 <IsDataAvailable>
 8001616:	4603      	mov	r3, r0
 8001618:	2b00      	cmp	r3, #0
 800161a:	d0f9      	beq.n	8001610 <Get_after+0x28>
		buffertosave[indx] = Uart_read(uart);
 800161c:	6838      	ldr	r0, [r7, #0]
 800161e:	f7ff fed7 	bl	80013d0 <Uart_read>
 8001622:	4601      	mov	r1, r0
 8001624:	697b      	ldr	r3, [r7, #20]
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	4413      	add	r3, r2
 800162a:	b2ca      	uxtb	r2, r1
 800162c:	701a      	strb	r2, [r3, #0]
	for (int indx=0; indx<numberofchars; indx++)
 800162e:	697b      	ldr	r3, [r7, #20]
 8001630:	3301      	adds	r3, #1
 8001632:	617b      	str	r3, [r7, #20]
 8001634:	7afb      	ldrb	r3, [r7, #11]
 8001636:	697a      	ldr	r2, [r7, #20]
 8001638:	429a      	cmp	r2, r3
 800163a:	dbe8      	blt.n	800160e <Get_after+0x26>
	}
	return 1;
 800163c:	2301      	movs	r3, #1
}
 800163e:	4618      	mov	r0, r3
 8001640:	3718      	adds	r7, #24
 8001642:	46bd      	mov	sp, r7
 8001644:	bd80      	pop	{r7, pc}

08001646 <Uart_sendstring>:

void Uart_sendstring (const char *s, UART_HandleTypeDef *uart)
{
 8001646:	b580      	push	{r7, lr}
 8001648:	b082      	sub	sp, #8
 800164a:	af00      	add	r7, sp, #0
 800164c:	6078      	str	r0, [r7, #4]
 800164e:	6039      	str	r1, [r7, #0]
	while(*s!='\0') Uart_write(*s++, uart);
 8001650:	e007      	b.n	8001662 <Uart_sendstring+0x1c>
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	1c5a      	adds	r2, r3, #1
 8001656:	607a      	str	r2, [r7, #4]
 8001658:	781b      	ldrb	r3, [r3, #0]
 800165a:	6839      	ldr	r1, [r7, #0]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff ff17 	bl	8001490 <Uart_write>
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	781b      	ldrb	r3, [r3, #0]
 8001666:	2b00      	cmp	r3, #0
 8001668:	d1f3      	bne.n	8001652 <Uart_sendstring+0xc>
}
 800166a:	bf00      	nop
 800166c:	bf00      	nop
 800166e:	3708      	adds	r7, #8
 8001670:	46bd      	mov	sp, r7
 8001672:	bd80      	pop	{r7, pc}

08001674 <Copy_upto>:
  while(*s) Uart_write(*s++, uart);
}


int Copy_upto (char *string, char *buffertocopyinto, UART_HandleTypeDef *uart)
{
 8001674:	b580      	push	{r7, lr}
 8001676:	b088      	sub	sp, #32
 8001678:	af00      	add	r7, sp, #0
 800167a:	60f8      	str	r0, [r7, #12]
 800167c:	60b9      	str	r1, [r7, #8]
 800167e:	607a      	str	r2, [r7, #4]
	int so_far =0;
 8001680:	2300      	movs	r3, #0
 8001682:	61fb      	str	r3, [r7, #28]
	int len = strlen (string);
 8001684:	68f8      	ldr	r0, [r7, #12]
 8001686:	f7fe fdbd 	bl	8000204 <strlen>
 800168a:	4603      	mov	r3, r0
 800168c:	617b      	str	r3, [r7, #20]
	int indx = 0;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]

again:
	while (!IsDataAvailable(uart));
 8001692:	bf00      	nop
 8001694:	6878      	ldr	r0, [r7, #4]
 8001696:	f7ff ff67 	bl	8001568 <IsDataAvailable>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d0f9      	beq.n	8001694 <Copy_upto+0x20>
	while (Uart_peek(uart) != string[so_far])
 80016a0:	e01f      	b.n	80016e2 <Copy_upto+0x6e>
		{
			buffertocopyinto[indx] = _rx_buffer1->buffer[_rx_buffer1->tail];
 80016a2:	4b32      	ldr	r3, [pc, #200]	; (800176c <Copy_upto+0xf8>)
 80016a4:	6819      	ldr	r1, [r3, #0]
 80016a6:	4b31      	ldr	r3, [pc, #196]	; (800176c <Copy_upto+0xf8>)
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	f8d3 2204 	ldr.w	r2, [r3, #516]	; 0x204
 80016ae:	69bb      	ldr	r3, [r7, #24]
 80016b0:	68b8      	ldr	r0, [r7, #8]
 80016b2:	4403      	add	r3, r0
 80016b4:	5c8a      	ldrb	r2, [r1, r2]
 80016b6:	701a      	strb	r2, [r3, #0]
			_rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE;
 80016b8:	4b2c      	ldr	r3, [pc, #176]	; (800176c <Copy_upto+0xf8>)
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80016c0:	1c5a      	adds	r2, r3, #1
 80016c2:	4b2a      	ldr	r3, [pc, #168]	; (800176c <Copy_upto+0xf8>)
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80016ca:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
			indx++;
 80016ce:	69bb      	ldr	r3, [r7, #24]
 80016d0:	3301      	adds	r3, #1
 80016d2:	61bb      	str	r3, [r7, #24]
			while (!IsDataAvailable(uart));
 80016d4:	bf00      	nop
 80016d6:	6878      	ldr	r0, [r7, #4]
 80016d8:	f7ff ff46 	bl	8001568 <IsDataAvailable>
 80016dc:	4603      	mov	r3, r0
 80016de:	2b00      	cmp	r3, #0
 80016e0:	d0f9      	beq.n	80016d6 <Copy_upto+0x62>
	while (Uart_peek(uart) != string[so_far])
 80016e2:	6878      	ldr	r0, [r7, #4]
 80016e4:	f7ff fe2e 	bl	8001344 <Uart_peek>
 80016e8:	4601      	mov	r1, r0
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	68fa      	ldr	r2, [r7, #12]
 80016ee:	4413      	add	r3, r2
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	4299      	cmp	r1, r3
 80016f4:	d1d5      	bne.n	80016a2 <Copy_upto+0x2e>

		}
	while (Uart_peek(uart) == string [so_far])
 80016f6:	e01b      	b.n	8001730 <Copy_upto+0xbc>
	{
		so_far++;
 80016f8:	69fb      	ldr	r3, [r7, #28]
 80016fa:	3301      	adds	r3, #1
 80016fc:	61fb      	str	r3, [r7, #28]
		buffertocopyinto[indx++] = Uart_read(uart);
 80016fe:	6878      	ldr	r0, [r7, #4]
 8001700:	f7ff fe66 	bl	80013d0 <Uart_read>
 8001704:	4601      	mov	r1, r0
 8001706:	69bb      	ldr	r3, [r7, #24]
 8001708:	1c5a      	adds	r2, r3, #1
 800170a:	61ba      	str	r2, [r7, #24]
 800170c:	461a      	mov	r2, r3
 800170e:	68bb      	ldr	r3, [r7, #8]
 8001710:	4413      	add	r3, r2
 8001712:	b2ca      	uxtb	r2, r1
 8001714:	701a      	strb	r2, [r3, #0]
		if (so_far == len) return 1;
 8001716:	69fa      	ldr	r2, [r7, #28]
 8001718:	697b      	ldr	r3, [r7, #20]
 800171a:	429a      	cmp	r2, r3
 800171c:	d101      	bne.n	8001722 <Copy_upto+0xae>
 800171e:	2301      	movs	r3, #1
 8001720:	e01f      	b.n	8001762 <Copy_upto+0xee>
		while (!IsDataAvailable(uart));
 8001722:	bf00      	nop
 8001724:	6878      	ldr	r0, [r7, #4]
 8001726:	f7ff ff1f 	bl	8001568 <IsDataAvailable>
 800172a:	4603      	mov	r3, r0
 800172c:	2b00      	cmp	r3, #0
 800172e:	d0f9      	beq.n	8001724 <Copy_upto+0xb0>
	while (Uart_peek(uart) == string [so_far])
 8001730:	6878      	ldr	r0, [r7, #4]
 8001732:	f7ff fe07 	bl	8001344 <Uart_peek>
 8001736:	4601      	mov	r1, r0
 8001738:	69fb      	ldr	r3, [r7, #28]
 800173a:	68fa      	ldr	r2, [r7, #12]
 800173c:	4413      	add	r3, r2
 800173e:	781b      	ldrb	r3, [r3, #0]
 8001740:	4299      	cmp	r1, r3
 8001742:	d0d9      	beq.n	80016f8 <Copy_upto+0x84>
	}

	if (so_far != len)
 8001744:	69fa      	ldr	r2, [r7, #28]
 8001746:	697b      	ldr	r3, [r7, #20]
 8001748:	429a      	cmp	r2, r3
 800174a:	d002      	beq.n	8001752 <Copy_upto+0xde>
	{
		so_far = 0;
 800174c:	2300      	movs	r3, #0
 800174e:	61fb      	str	r3, [r7, #28]
		goto again;
 8001750:	e79f      	b.n	8001692 <Copy_upto+0x1e>
	}

	if (so_far == len) return 1;
 8001752:	69fa      	ldr	r2, [r7, #28]
 8001754:	697b      	ldr	r3, [r7, #20]
 8001756:	429a      	cmp	r2, r3
 8001758:	d101      	bne.n	800175e <Copy_upto+0xea>
 800175a:	2301      	movs	r3, #1
 800175c:	e001      	b.n	8001762 <Copy_upto+0xee>
	else return -1;
 800175e:	f04f 33ff 	mov.w	r3, #4294967295

}
 8001762:	4618      	mov	r0, r3
 8001764:	3720      	adds	r7, #32
 8001766:	46bd      	mov	sp, r7
 8001768:	bd80      	pop	{r7, pc}
 800176a:	bf00      	nop
 800176c:	2000092c 	.word	0x2000092c

08001770 <Wait_for>:


int Wait_for (char *string,UART_HandleTypeDef *uart)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b084      	sub	sp, #16
 8001774:	af00      	add	r7, sp, #0
 8001776:	6078      	str	r0, [r7, #4]
 8001778:	6039      	str	r1, [r7, #0]
	int so_far =0;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800177e:	6878      	ldr	r0, [r7, #4]
 8001780:	f7fe fd40 	bl	8000204 <strlen>
 8001784:	4603      	mov	r3, r0
 8001786:	60bb      	str	r3, [r7, #8]

again_device:
	while (!IsDataAvailable(uart));
 8001788:	bf00      	nop
 800178a:	6838      	ldr	r0, [r7, #0]
 800178c:	f7ff feec 	bl	8001568 <IsDataAvailable>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d0f9      	beq.n	800178a <Wait_for+0x1a>
	if (Uart_peek(uart) != string[so_far])
 8001796:	6838      	ldr	r0, [r7, #0]
 8001798:	f7ff fdd4 	bl	8001344 <Uart_peek>
 800179c:	4601      	mov	r1, r0
 800179e:	68fb      	ldr	r3, [r7, #12]
 80017a0:	687a      	ldr	r2, [r7, #4]
 80017a2:	4413      	add	r3, r2
 80017a4:	781b      	ldrb	r3, [r3, #0]
 80017a6:	4299      	cmp	r1, r3
 80017a8:	d01e      	beq.n	80017e8 <Wait_for+0x78>
	{
		 _rx_buffer1->tail = (unsigned int)(_rx_buffer1->tail + 1) % UART_BUFFER_SIZE ;
 80017aa:	4b1e      	ldr	r3, [pc, #120]	; (8001824 <Wait_for+0xb4>)
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80017b2:	1c5a      	adds	r2, r3, #1
 80017b4:	4b1b      	ldr	r3, [pc, #108]	; (8001824 <Wait_for+0xb4>)
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80017bc:	f8c3 2204 	str.w	r2, [r3, #516]	; 0x204
		goto again_device;
 80017c0:	e7e2      	b.n	8001788 <Wait_for+0x18>

	}
	while (Uart_peek(uart) == string [so_far])
	{
		so_far++;
 80017c2:	68fb      	ldr	r3, [r7, #12]
 80017c4:	3301      	adds	r3, #1
 80017c6:	60fb      	str	r3, [r7, #12]
		Uart_read(uart);
 80017c8:	6838      	ldr	r0, [r7, #0]
 80017ca:	f7ff fe01 	bl	80013d0 <Uart_read>
		if (so_far == len) return 1;
 80017ce:	68fa      	ldr	r2, [r7, #12]
 80017d0:	68bb      	ldr	r3, [r7, #8]
 80017d2:	429a      	cmp	r2, r3
 80017d4:	d101      	bne.n	80017da <Wait_for+0x6a>
 80017d6:	2301      	movs	r3, #1
 80017d8:	e01f      	b.n	800181a <Wait_for+0xaa>
		while (!IsDataAvailable(uart));
 80017da:	bf00      	nop
 80017dc:	6838      	ldr	r0, [r7, #0]
 80017de:	f7ff fec3 	bl	8001568 <IsDataAvailable>
 80017e2:	4603      	mov	r3, r0
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	d0f9      	beq.n	80017dc <Wait_for+0x6c>
	while (Uart_peek(uart) == string [so_far])
 80017e8:	6838      	ldr	r0, [r7, #0]
 80017ea:	f7ff fdab 	bl	8001344 <Uart_peek>
 80017ee:	4601      	mov	r1, r0
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	687a      	ldr	r2, [r7, #4]
 80017f4:	4413      	add	r3, r2
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	4299      	cmp	r1, r3
 80017fa:	d0e2      	beq.n	80017c2 <Wait_for+0x52>
	}

	if (so_far != len)
 80017fc:	68fa      	ldr	r2, [r7, #12]
 80017fe:	68bb      	ldr	r3, [r7, #8]
 8001800:	429a      	cmp	r2, r3
 8001802:	d002      	beq.n	800180a <Wait_for+0x9a>
	{
		so_far = 0;
 8001804:	2300      	movs	r3, #0
 8001806:	60fb      	str	r3, [r7, #12]
		goto again_device;
 8001808:	e7be      	b.n	8001788 <Wait_for+0x18>
	}

	if (so_far == len) return 1;
 800180a:	68fa      	ldr	r2, [r7, #12]
 800180c:	68bb      	ldr	r3, [r7, #8]
 800180e:	429a      	cmp	r2, r3
 8001810:	d101      	bne.n	8001816 <Wait_for+0xa6>
 8001812:	2301      	movs	r3, #1
 8001814:	e001      	b.n	800181a <Wait_for+0xaa>
	else return -1;
 8001816:	f04f 33ff 	mov.w	r3, #4294967295
}
 800181a:	4618      	mov	r0, r3
 800181c:	3710      	adds	r7, #16
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	2000092c 	.word	0x2000092c

08001828 <Uart_isr>:

void Uart_isr (UART_HandleTypeDef *huart)
{
 8001828:	b580      	push	{r7, lr}
 800182a:	b086      	sub	sp, #24
 800182c:	af00      	add	r7, sp, #0
 800182e:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	681b      	ldr	r3, [r3, #0]
 800183c:	68db      	ldr	r3, [r3, #12]
 800183e:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001840:	697b      	ldr	r3, [r7, #20]
 8001842:	f003 0320 	and.w	r3, r3, #32
 8001846:	2b00      	cmp	r3, #0
 8001848:	d023      	beq.n	8001892 <Uart_isr+0x6a>
 800184a:	693b      	ldr	r3, [r7, #16]
 800184c:	f003 0320 	and.w	r3, r3, #32
 8001850:	2b00      	cmp	r3, #0
 8001852:	d01e      	beq.n	8001892 <Uart_isr+0x6a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	685b      	ldr	r3, [r3, #4]
 8001860:	73fb      	strb	r3, [r7, #15]
        if (huart == device_uart)
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a3f      	ldr	r2, [pc, #252]	; (8001964 <Uart_isr+0x13c>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d107      	bne.n	800187a <Uart_isr+0x52>
        {
        	store_char (c, _rx_buffer1);  // store data in buffer
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <Uart_isr+0x140>)
 800186c:	681a      	ldr	r2, [r3, #0]
 800186e:	7bfb      	ldrb	r3, [r7, #15]
 8001870:	4611      	mov	r1, r2
 8001872:	4618      	mov	r0, r3
 8001874:	f7ff fcbe 	bl	80011f4 <store_char>
        else if (huart == pc_uart)
        {
           	store_char (c, _rx_buffer2);  // store data in buffer
        }

        return;
 8001878:	e06d      	b.n	8001956 <Uart_isr+0x12e>
        else if (huart == pc_uart)
 800187a:	687b      	ldr	r3, [r7, #4]
 800187c:	4a3b      	ldr	r2, [pc, #236]	; (800196c <Uart_isr+0x144>)
 800187e:	4293      	cmp	r3, r2
 8001880:	d169      	bne.n	8001956 <Uart_isr+0x12e>
           	store_char (c, _rx_buffer2);  // store data in buffer
 8001882:	4b3b      	ldr	r3, [pc, #236]	; (8001970 <Uart_isr+0x148>)
 8001884:	681a      	ldr	r2, [r3, #0]
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	4611      	mov	r1, r2
 800188a:	4618      	mov	r0, r3
 800188c:	f7ff fcb2 	bl	80011f4 <store_char>
        return;
 8001890:	e061      	b.n	8001956 <Uart_isr+0x12e>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001892:	697b      	ldr	r3, [r7, #20]
 8001894:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001898:	2b00      	cmp	r3, #0
 800189a:	d05f      	beq.n	800195c <Uart_isr+0x134>
 800189c:	693b      	ldr	r3, [r7, #16]
 800189e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	d05a      	beq.n	800195c <Uart_isr+0x134>
    {
    	if (huart == device_uart){
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	4a2e      	ldr	r2, [pc, #184]	; (8001964 <Uart_isr+0x13c>)
 80018aa:	4293      	cmp	r3, r2
 80018ac:	d127      	bne.n	80018fe <Uart_isr+0xd6>
    	if(tx_buffer1.head == tx_buffer1.tail)
 80018ae:	4b31      	ldr	r3, [pc, #196]	; (8001974 <Uart_isr+0x14c>)
 80018b0:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 80018b4:	4b2f      	ldr	r3, [pc, #188]	; (8001974 <Uart_isr+0x14c>)
 80018b6:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d108      	bne.n	80018d0 <Uart_isr+0xa8>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80018be:	687b      	ldr	r3, [r7, #4]
 80018c0:	681b      	ldr	r3, [r3, #0]
 80018c2:	68da      	ldr	r2, [r3, #12]
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80018cc:	60da      	str	r2, [r3, #12]
        	      huart->Instance->SR;
        	      huart->Instance->DR = c;

        	    }
        	}
    	return;
 80018ce:	e044      	b.n	800195a <Uart_isr+0x132>
    	      unsigned char c = tx_buffer1.buffer[tx_buffer1.tail];
 80018d0:	4b28      	ldr	r3, [pc, #160]	; (8001974 <Uart_isr+0x14c>)
 80018d2:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80018d6:	4a27      	ldr	r2, [pc, #156]	; (8001974 <Uart_isr+0x14c>)
 80018d8:	5cd3      	ldrb	r3, [r2, r3]
 80018da:	737b      	strb	r3, [r7, #13]
    	      tx_buffer1.tail = (tx_buffer1.tail + 1) % UART_BUFFER_SIZE;
 80018dc:	4b25      	ldr	r3, [pc, #148]	; (8001974 <Uart_isr+0x14c>)
 80018de:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 80018e2:	3301      	adds	r3, #1
 80018e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80018e8:	4a22      	ldr	r2, [pc, #136]	; (8001974 <Uart_isr+0x14c>)
 80018ea:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
    	      huart->Instance->SR;
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	7b7a      	ldrb	r2, [r7, #13]
 80018fa:	605a      	str	r2, [r3, #4]
    	return;
 80018fc:	e02d      	b.n	800195a <Uart_isr+0x132>
    	else if (huart == pc_uart){
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	4a1a      	ldr	r2, [pc, #104]	; (800196c <Uart_isr+0x144>)
 8001902:	4293      	cmp	r3, r2
 8001904:	d129      	bne.n	800195a <Uart_isr+0x132>
        	if(tx_buffer2.head == tx_buffer2.tail)
 8001906:	4b1c      	ldr	r3, [pc, #112]	; (8001978 <Uart_isr+0x150>)
 8001908:	f8d3 2200 	ldr.w	r2, [r3, #512]	; 0x200
 800190c:	4b1a      	ldr	r3, [pc, #104]	; (8001978 <Uart_isr+0x150>)
 800190e:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 8001912:	429a      	cmp	r2, r3
 8001914:	d108      	bne.n	8001928 <Uart_isr+0x100>
        	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8001916:	687b      	ldr	r3, [r7, #4]
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	68da      	ldr	r2, [r3, #12]
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001924:	60da      	str	r2, [r3, #12]
    	return;
 8001926:	e018      	b.n	800195a <Uart_isr+0x132>
        	      unsigned char c = tx_buffer2.buffer[tx_buffer2.tail];
 8001928:	4b13      	ldr	r3, [pc, #76]	; (8001978 <Uart_isr+0x150>)
 800192a:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800192e:	4a12      	ldr	r2, [pc, #72]	; (8001978 <Uart_isr+0x150>)
 8001930:	5cd3      	ldrb	r3, [r2, r3]
 8001932:	73bb      	strb	r3, [r7, #14]
        	      tx_buffer2.tail = (tx_buffer2.tail + 1) % UART_BUFFER_SIZE;
 8001934:	4b10      	ldr	r3, [pc, #64]	; (8001978 <Uart_isr+0x150>)
 8001936:	f8d3 3204 	ldr.w	r3, [r3, #516]	; 0x204
 800193a:	3301      	adds	r3, #1
 800193c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001940:	4a0d      	ldr	r2, [pc, #52]	; (8001978 <Uart_isr+0x150>)
 8001942:	f8c2 3204 	str.w	r3, [r2, #516]	; 0x204
        	      huart->Instance->SR;
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	681b      	ldr	r3, [r3, #0]
        	      huart->Instance->DR = c;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	7bba      	ldrb	r2, [r7, #14]
 8001952:	605a      	str	r2, [r3, #4]
    	return;
 8001954:	e001      	b.n	800195a <Uart_isr+0x132>
        return;
 8001956:	bf00      	nop
 8001958:	e000      	b.n	800195c <Uart_isr+0x134>
    	return;
 800195a:	bf00      	nop
    }
}
 800195c:	3718      	adds	r7, #24
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	20000a54 	.word	0x20000a54
 8001968:	2000092c 	.word	0x2000092c
 800196c:	20000938 	.word	0x20000938
 8001970:	20000934 	.word	0x20000934
 8001974:	200002cc 	.word	0x200002cc
 8001978:	200006dc 	.word	0x200006dc

0800197c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 800197c:	b580      	push	{r7, lr}
 800197e:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001980:	f001 fd3c 	bl	80033fc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001984:	f000 fdf0 	bl	8002568 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001988:	f000 ffce 	bl	8002928 <MX_GPIO_Init>
	MX_TIM2_Init();
 800198c:	f000 fe56 	bl	800263c <MX_TIM2_Init>
	MX_TIM3_Init();
 8001990:	f000 feca 	bl	8002728 <MX_TIM3_Init>
	MX_USART3_UART_Init();
 8001994:	f000 ff9e 	bl	80028d4 <MX_USART3_UART_Init>
	MX_TIM6_Init();
 8001998:	f000 ff3c 	bl	8002814 <MX_TIM6_Init>
	MX_USART2_UART_Init();
 800199c:	f000 ff70 	bl	8002880 <MX_USART2_UART_Init>
	/* USER CODE BEGIN 2 */
	HAL_TIM_Base_Start_IT(&htim6);
 80019a0:	486c      	ldr	r0, [pc, #432]	; (8001b54 <main+0x1d8>)
 80019a2:	f002 fd8f 	bl	80044c4 <HAL_TIM_Base_Start_IT>

	ESP_Init("CIR_Wireless","cir123456!");
 80019a6:	496c      	ldr	r1, [pc, #432]	; (8001b58 <main+0x1dc>)
 80019a8:	486c      	ldr	r0, [pc, #432]	; (8001b5c <main+0x1e0>)
 80019aa:	f7fe fe05 	bl	80005b8 <ESP_Init>
	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 0);
 80019ae:	2200      	movs	r2, #0
 80019b0:	2110      	movs	r1, #16
 80019b2:	486b      	ldr	r0, [pc, #428]	; (8001b60 <main+0x1e4>)
 80019b4:	f002 f876 	bl	8003aa4 <HAL_GPIO_WritePin>



	while (1)
	{
		Server_Start();
 80019b8:	f7fe fff6 	bl	80009a8 <Server_Start>
		if(Locker_Move_Flag >4)
 80019bc:	4b69      	ldr	r3, [pc, #420]	; (8001b64 <main+0x1e8>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b04      	cmp	r3, #4
 80019c2:	d903      	bls.n	80019cc <main+0x50>
		{
			Locker_Floor = 1;
 80019c4:	4b68      	ldr	r3, [pc, #416]	; (8001b68 <main+0x1ec>)
 80019c6:	2201      	movs	r2, #1
 80019c8:	701a      	strb	r2, [r3, #0]
 80019ca:	e002      	b.n	80019d2 <main+0x56>
		}
		else
		{
			Locker_Floor = 0;
 80019cc:	4b66      	ldr	r3, [pc, #408]	; (8001b68 <main+0x1ec>)
 80019ce:	2200      	movs	r2, #0
 80019d0:	701a      	strb	r2, [r3, #0]
		}



		if(Locker_Move_Flag>=1)
 80019d2:	4b64      	ldr	r3, [pc, #400]	; (8001b64 <main+0x1e8>)
 80019d4:	781b      	ldrb	r3, [r3, #0]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d0ee      	beq.n	80019b8 <main+0x3c>
		{
			if( Locker_Move_Flag == 1 || Locker_Move_Flag == 2 || Locker_Move_Flag == 5  || Locker_Move_Flag == 6 )//
 80019da:	4b62      	ldr	r3, [pc, #392]	; (8001b64 <main+0x1e8>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	2b01      	cmp	r3, #1
 80019e0:	d00c      	beq.n	80019fc <main+0x80>
 80019e2:	4b60      	ldr	r3, [pc, #384]	; (8001b64 <main+0x1e8>)
 80019e4:	781b      	ldrb	r3, [r3, #0]
 80019e6:	2b02      	cmp	r3, #2
 80019e8:	d008      	beq.n	80019fc <main+0x80>
 80019ea:	4b5e      	ldr	r3, [pc, #376]	; (8001b64 <main+0x1e8>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	2b05      	cmp	r3, #5
 80019f0:	d004      	beq.n	80019fc <main+0x80>
 80019f2:	4b5c      	ldr	r3, [pc, #368]	; (8001b64 <main+0x1e8>)
 80019f4:	781b      	ldrb	r3, [r3, #0]
 80019f6:	2b06      	cmp	r3, #6
 80019f8:	f040 82ca 	bne.w	8001f90 <main+0x614>
			{

				if(Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]==Lockeroncall)
 80019fc:	4b5a      	ldr	r3, [pc, #360]	; (8001b68 <main+0x1ec>)
 80019fe:	781b      	ldrb	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	4b58      	ldr	r3, [pc, #352]	; (8001b64 <main+0x1e8>)
 8001a04:	781b      	ldrb	r3, [r3, #0]
 8001a06:	3b01      	subs	r3, #1
 8001a08:	425a      	negs	r2, r3
 8001a0a:	f003 0303 	and.w	r3, r3, #3
 8001a0e:	f002 0203 	and.w	r2, r2, #3
 8001a12:	bf58      	it	pl
 8001a14:	4253      	negpl	r3, r2
 8001a16:	4955      	ldr	r1, [pc, #340]	; (8001b6c <main+0x1f0>)
 8001a18:	0082      	lsls	r2, r0, #2
 8001a1a:	440a      	add	r2, r1
 8001a1c:	4413      	add	r3, r2
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	f040 80ab 	bne.w	8001b7c <main+0x200>
				{
					if(Locker[Locker_Floor][(Locker_Move_Flag-1)%4]==0)
 8001a26:	4b50      	ldr	r3, [pc, #320]	; (8001b68 <main+0x1ec>)
 8001a28:	781b      	ldrb	r3, [r3, #0]
 8001a2a:	4618      	mov	r0, r3
 8001a2c:	4b4d      	ldr	r3, [pc, #308]	; (8001b64 <main+0x1e8>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	3b01      	subs	r3, #1
 8001a32:	425a      	negs	r2, r3
 8001a34:	f003 0303 	and.w	r3, r3, #3
 8001a38:	f002 0203 	and.w	r2, r2, #3
 8001a3c:	bf58      	it	pl
 8001a3e:	4253      	negpl	r3, r2
 8001a40:	494b      	ldr	r1, [pc, #300]	; (8001b70 <main+0x1f4>)
 8001a42:	0082      	lsls	r2, r0, #2
 8001a44:	440a      	add	r2, r1
 8001a46:	4413      	add	r3, r2
 8001a48:	781b      	ldrb	r3, [r3, #0]
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d163      	bne.n	8001b16 <main+0x19a>
					{
						if(Locker_Floor==1 && Elevator_Floor==0)
 8001a4e:	4b46      	ldr	r3, [pc, #280]	; (8001b68 <main+0x1ec>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	d109      	bne.n	8001a6a <main+0xee>
 8001a56:	4b47      	ldr	r3, [pc, #284]	; (8001b74 <main+0x1f8>)
 8001a58:	781b      	ldrb	r3, [r3, #0]
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d105      	bne.n	8001a6a <main+0xee>
						{
							Elevator(2);
 8001a5e:	2002      	movs	r0, #2
 8001a60:	f001 f9d4 	bl	8002e0c <Elevator>
							Elevator_Floor=1;
 8001a64:	4b43      	ldr	r3, [pc, #268]	; (8001b74 <main+0x1f8>)
 8001a66:	2201      	movs	r2, #1
 8001a68:	701a      	strb	r2, [r3, #0]
						}
						LM_Guide_Move(LM_extra,0);
 8001a6a:	2100      	movs	r1, #0
 8001a6c:	2014      	movs	r0, #20
 8001a6e:	f001 f879 	bl	8002b64 <LM_Guide_Move>
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Go,3800);
 8001a72:	4b3d      	ldr	r3, [pc, #244]	; (8001b68 <main+0x1ec>)
 8001a74:	781b      	ldrb	r3, [r3, #0]
 8001a76:	4618      	mov	r0, r3
 8001a78:	4b3a      	ldr	r3, [pc, #232]	; (8001b64 <main+0x1e8>)
 8001a7a:	781b      	ldrb	r3, [r3, #0]
 8001a7c:	3b01      	subs	r3, #1
 8001a7e:	425a      	negs	r2, r3
 8001a80:	f003 0303 	and.w	r3, r3, #3
 8001a84:	f002 0203 	and.w	r2, r2, #3
 8001a88:	bf58      	it	pl
 8001a8a:	4253      	negpl	r3, r2
 8001a8c:	493a      	ldr	r1, [pc, #232]	; (8001b78 <main+0x1fc>)
 8001a8e:	0082      	lsls	r2, r0, #2
 8001a90:	4413      	add	r3, r2
 8001a92:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001a96:	f640 63d8 	movw	r3, #3800	; 0xed8
 8001a9a:	2201      	movs	r2, #1
 8001a9c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001aa0:	f001 f906 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>
						LM_Guide_Move(320,Relay_ON);
 8001aa4:	2101      	movs	r1, #1
 8001aa6:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001aaa:	f001 f85b 	bl	8002b64 <LM_Guide_Move>
						HAL_Delay(500);
 8001aae:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001ab2:	f001 fd15 	bl	80034e0 <HAL_Delay>
						LM_Guide_Move(LM_extra,0);
 8001ab6:	2100      	movs	r1, #0
 8001ab8:	2014      	movs	r0, #20
 8001aba:	f001 f853 	bl	8002b64 <LM_Guide_Move>
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Back,3800);
 8001abe:	4b2a      	ldr	r3, [pc, #168]	; (8001b68 <main+0x1ec>)
 8001ac0:	781b      	ldrb	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	4b27      	ldr	r3, [pc, #156]	; (8001b64 <main+0x1e8>)
 8001ac6:	781b      	ldrb	r3, [r3, #0]
 8001ac8:	3b01      	subs	r3, #1
 8001aca:	425a      	negs	r2, r3
 8001acc:	f003 0303 	and.w	r3, r3, #3
 8001ad0:	f002 0203 	and.w	r2, r2, #3
 8001ad4:	bf58      	it	pl
 8001ad6:	4253      	negpl	r3, r2
 8001ad8:	4927      	ldr	r1, [pc, #156]	; (8001b78 <main+0x1fc>)
 8001ada:	0082      	lsls	r2, r0, #2
 8001adc:	4413      	add	r3, r2
 8001ade:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001ae2:	f640 63d8 	movw	r3, #3800	; 0xed8
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001aec:	f001 f8e0 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>

						Locker[Locker_Floor][(Locker_Move_Flag-1)%4]=1;
 8001af0:	4b1d      	ldr	r3, [pc, #116]	; (8001b68 <main+0x1ec>)
 8001af2:	781b      	ldrb	r3, [r3, #0]
 8001af4:	4618      	mov	r0, r3
 8001af6:	4b1b      	ldr	r3, [pc, #108]	; (8001b64 <main+0x1e8>)
 8001af8:	781b      	ldrb	r3, [r3, #0]
 8001afa:	3b01      	subs	r3, #1
 8001afc:	425a      	negs	r2, r3
 8001afe:	f003 0303 	and.w	r3, r3, #3
 8001b02:	f002 0203 	and.w	r2, r2, #3
 8001b06:	bf58      	it	pl
 8001b08:	4253      	negpl	r3, r2
 8001b0a:	4919      	ldr	r1, [pc, #100]	; (8001b70 <main+0x1f4>)
 8001b0c:	0082      	lsls	r2, r0, #2
 8001b0e:	440a      	add	r2, r1
 8001b10:	4413      	add	r3, r2
 8001b12:	2201      	movs	r2, #1
 8001b14:	701a      	strb	r2, [r3, #0]
					}
					Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]=0;
 8001b16:	4b14      	ldr	r3, [pc, #80]	; (8001b68 <main+0x1ec>)
 8001b18:	781b      	ldrb	r3, [r3, #0]
 8001b1a:	4618      	mov	r0, r3
 8001b1c:	4b11      	ldr	r3, [pc, #68]	; (8001b64 <main+0x1e8>)
 8001b1e:	781b      	ldrb	r3, [r3, #0]
 8001b20:	3b01      	subs	r3, #1
 8001b22:	425a      	negs	r2, r3
 8001b24:	f003 0303 	and.w	r3, r3, #3
 8001b28:	f002 0203 	and.w	r2, r2, #3
 8001b2c:	bf58      	it	pl
 8001b2e:	4253      	negpl	r3, r2
 8001b30:	490e      	ldr	r1, [pc, #56]	; (8001b6c <main+0x1f0>)
 8001b32:	0082      	lsls	r2, r0, #2
 8001b34:	440a      	add	r2, r1
 8001b36:	4413      	add	r3, r2
 8001b38:	2200      	movs	r2, #0
 8001b3a:	701a      	strb	r2, [r3, #0]

					if(Elevator_Floor==1)
 8001b3c:	4b0d      	ldr	r3, [pc, #52]	; (8001b74 <main+0x1f8>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b01      	cmp	r3, #1
 8001b42:	f040 8221 	bne.w	8001f88 <main+0x60c>
					{
						Elevator(1);
 8001b46:	2001      	movs	r0, #1
 8001b48:	f001 f960 	bl	8002e0c <Elevator>
						Elevator_Floor=0;
 8001b4c:	4b09      	ldr	r3, [pc, #36]	; (8001b74 <main+0x1f8>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	701a      	strb	r2, [r3, #0]
 8001b52:	e219      	b.n	8001f88 <main+0x60c>
 8001b54:	200009c4 	.word	0x200009c4
 8001b58:	08006ec4 	.word	0x08006ec4
 8001b5c:	08006ed0 	.word	0x08006ed0
 8001b60:	40020000 	.word	0x40020000
 8001b64:	200008f0 	.word	0x200008f0
 8001b68:	20000904 	.word	0x20000904
 8001b6c:	200008f4 	.word	0x200008f4
 8001b70:	200008fc 	.word	0x200008fc
 8001b74:	20000905 	.word	0x20000905
 8001b78:	20000018 	.word	0x20000018
					}
				}
				else if(Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]==Lockeron)
 8001b7c:	4ba9      	ldr	r3, [pc, #676]	; (8001e24 <main+0x4a8>)
 8001b7e:	781b      	ldrb	r3, [r3, #0]
 8001b80:	4618      	mov	r0, r3
 8001b82:	4ba9      	ldr	r3, [pc, #676]	; (8001e28 <main+0x4ac>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	3b01      	subs	r3, #1
 8001b88:	425a      	negs	r2, r3
 8001b8a:	f003 0303 	and.w	r3, r3, #3
 8001b8e:	f002 0203 	and.w	r2, r2, #3
 8001b92:	bf58      	it	pl
 8001b94:	4253      	negpl	r3, r2
 8001b96:	49a5      	ldr	r1, [pc, #660]	; (8001e2c <main+0x4b0>)
 8001b98:	0082      	lsls	r2, r0, #2
 8001b9a:	440a      	add	r2, r1
 8001b9c:	4413      	add	r3, r2
 8001b9e:	781b      	ldrb	r3, [r3, #0]
 8001ba0:	2b02      	cmp	r3, #2
 8001ba2:	f040 8093 	bne.w	8001ccc <main+0x350>
				{
					if(Locker[Locker_Floor][(Locker_Move_Flag-1)%4]==1)
 8001ba6:	4b9f      	ldr	r3, [pc, #636]	; (8001e24 <main+0x4a8>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	4618      	mov	r0, r3
 8001bac:	4b9e      	ldr	r3, [pc, #632]	; (8001e28 <main+0x4ac>)
 8001bae:	781b      	ldrb	r3, [r3, #0]
 8001bb0:	3b01      	subs	r3, #1
 8001bb2:	425a      	negs	r2, r3
 8001bb4:	f003 0303 	and.w	r3, r3, #3
 8001bb8:	f002 0203 	and.w	r2, r2, #3
 8001bbc:	bf58      	it	pl
 8001bbe:	4253      	negpl	r3, r2
 8001bc0:	499b      	ldr	r1, [pc, #620]	; (8001e30 <main+0x4b4>)
 8001bc2:	0082      	lsls	r2, r0, #2
 8001bc4:	440a      	add	r2, r1
 8001bc6:	4413      	add	r3, r2
 8001bc8:	781b      	ldrb	r3, [r3, #0]
 8001bca:	2b01      	cmp	r3, #1
 8001bcc:	d15f      	bne.n	8001c8e <main+0x312>
					{
						if(Locker_Floor==1 && Elevator_Floor==0)
 8001bce:	4b95      	ldr	r3, [pc, #596]	; (8001e24 <main+0x4a8>)
 8001bd0:	781b      	ldrb	r3, [r3, #0]
 8001bd2:	2b01      	cmp	r3, #1
 8001bd4:	d109      	bne.n	8001bea <main+0x26e>
 8001bd6:	4b97      	ldr	r3, [pc, #604]	; (8001e34 <main+0x4b8>)
 8001bd8:	781b      	ldrb	r3, [r3, #0]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d105      	bne.n	8001bea <main+0x26e>
						{
							Elevator(2);
 8001bde:	2002      	movs	r0, #2
 8001be0:	f001 f914 	bl	8002e0c <Elevator>
							Elevator_Floor=1;
 8001be4:	4b93      	ldr	r3, [pc, #588]	; (8001e34 <main+0x4b8>)
 8001be6:	2201      	movs	r2, #1
 8001be8:	701a      	strb	r2, [r3, #0]
						}
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Go,3800);
 8001bea:	4b8e      	ldr	r3, [pc, #568]	; (8001e24 <main+0x4a8>)
 8001bec:	781b      	ldrb	r3, [r3, #0]
 8001bee:	4618      	mov	r0, r3
 8001bf0:	4b8d      	ldr	r3, [pc, #564]	; (8001e28 <main+0x4ac>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	3b01      	subs	r3, #1
 8001bf6:	425a      	negs	r2, r3
 8001bf8:	f003 0303 	and.w	r3, r3, #3
 8001bfc:	f002 0203 	and.w	r2, r2, #3
 8001c00:	bf58      	it	pl
 8001c02:	4253      	negpl	r3, r2
 8001c04:	498c      	ldr	r1, [pc, #560]	; (8001e38 <main+0x4bc>)
 8001c06:	0082      	lsls	r2, r0, #2
 8001c08:	4413      	add	r3, r2
 8001c0a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001c0e:	f640 63d8 	movw	r3, #3800	; 0xed8
 8001c12:	2201      	movs	r2, #1
 8001c14:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001c18:	f001 f84a 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>
						LM_Guide_Move(320-LM_extra2,Relay_OFF);
 8001c1c:	2102      	movs	r1, #2
 8001c1e:	f44f 709b 	mov.w	r0, #310	; 0x136
 8001c22:	f000 ff9f 	bl	8002b64 <LM_Guide_Move>
						LM_Guide_Move(LM_extra,0);
 8001c26:	2100      	movs	r1, #0
 8001c28:	2014      	movs	r0, #20
 8001c2a:	f000 ff9b 	bl	8002b64 <LM_Guide_Move>
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Back,3800);
 8001c2e:	4b7d      	ldr	r3, [pc, #500]	; (8001e24 <main+0x4a8>)
 8001c30:	781b      	ldrb	r3, [r3, #0]
 8001c32:	4618      	mov	r0, r3
 8001c34:	4b7c      	ldr	r3, [pc, #496]	; (8001e28 <main+0x4ac>)
 8001c36:	781b      	ldrb	r3, [r3, #0]
 8001c38:	3b01      	subs	r3, #1
 8001c3a:	425a      	negs	r2, r3
 8001c3c:	f003 0303 	and.w	r3, r3, #3
 8001c40:	f002 0203 	and.w	r2, r2, #3
 8001c44:	bf58      	it	pl
 8001c46:	4253      	negpl	r3, r2
 8001c48:	497b      	ldr	r1, [pc, #492]	; (8001e38 <main+0x4bc>)
 8001c4a:	0082      	lsls	r2, r0, #2
 8001c4c:	4413      	add	r3, r2
 8001c4e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001c52:	f640 63d8 	movw	r3, #3800	; 0xed8
 8001c56:	2200      	movs	r2, #0
 8001c58:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001c5c:	f001 f828 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>
						LM_Guide_Move(0,0);
 8001c60:	2100      	movs	r1, #0
 8001c62:	2000      	movs	r0, #0
 8001c64:	f000 ff7e 	bl	8002b64 <LM_Guide_Move>

						Locker[Locker_Floor][(Locker_Move_Flag-1)%4]=2;
 8001c68:	4b6e      	ldr	r3, [pc, #440]	; (8001e24 <main+0x4a8>)
 8001c6a:	781b      	ldrb	r3, [r3, #0]
 8001c6c:	4618      	mov	r0, r3
 8001c6e:	4b6e      	ldr	r3, [pc, #440]	; (8001e28 <main+0x4ac>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	3b01      	subs	r3, #1
 8001c74:	425a      	negs	r2, r3
 8001c76:	f003 0303 	and.w	r3, r3, #3
 8001c7a:	f002 0203 	and.w	r2, r2, #3
 8001c7e:	bf58      	it	pl
 8001c80:	4253      	negpl	r3, r2
 8001c82:	496b      	ldr	r1, [pc, #428]	; (8001e30 <main+0x4b4>)
 8001c84:	0082      	lsls	r2, r0, #2
 8001c86:	440a      	add	r2, r1
 8001c88:	4413      	add	r3, r2
 8001c8a:	2202      	movs	r2, #2
 8001c8c:	701a      	strb	r2, [r3, #0]
					}
					Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]=0;
 8001c8e:	4b65      	ldr	r3, [pc, #404]	; (8001e24 <main+0x4a8>)
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	4b64      	ldr	r3, [pc, #400]	; (8001e28 <main+0x4ac>)
 8001c96:	781b      	ldrb	r3, [r3, #0]
 8001c98:	3b01      	subs	r3, #1
 8001c9a:	425a      	negs	r2, r3
 8001c9c:	f003 0303 	and.w	r3, r3, #3
 8001ca0:	f002 0203 	and.w	r2, r2, #3
 8001ca4:	bf58      	it	pl
 8001ca6:	4253      	negpl	r3, r2
 8001ca8:	4960      	ldr	r1, [pc, #384]	; (8001e2c <main+0x4b0>)
 8001caa:	0082      	lsls	r2, r0, #2
 8001cac:	440a      	add	r2, r1
 8001cae:	4413      	add	r3, r2
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	701a      	strb	r2, [r3, #0]


					if(Elevator_Floor==1)
 8001cb4:	4b5f      	ldr	r3, [pc, #380]	; (8001e34 <main+0x4b8>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	2b01      	cmp	r3, #1
 8001cba:	f040 8165 	bne.w	8001f88 <main+0x60c>
					{
						Elevator(1);
 8001cbe:	2001      	movs	r0, #1
 8001cc0:	f001 f8a4 	bl	8002e0c <Elevator>
						Elevator_Floor=0;
 8001cc4:	4b5b      	ldr	r3, [pc, #364]	; (8001e34 <main+0x4b8>)
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	701a      	strb	r2, [r3, #0]
 8001cca:	e15d      	b.n	8001f88 <main+0x60c>
					}


				}
				else if(Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]==Lockeroffcall)
 8001ccc:	4b55      	ldr	r3, [pc, #340]	; (8001e24 <main+0x4a8>)
 8001cce:	781b      	ldrb	r3, [r3, #0]
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	4b55      	ldr	r3, [pc, #340]	; (8001e28 <main+0x4ac>)
 8001cd4:	781b      	ldrb	r3, [r3, #0]
 8001cd6:	3b01      	subs	r3, #1
 8001cd8:	425a      	negs	r2, r3
 8001cda:	f003 0303 	and.w	r3, r3, #3
 8001cde:	f002 0203 	and.w	r2, r2, #3
 8001ce2:	bf58      	it	pl
 8001ce4:	4253      	negpl	r3, r2
 8001ce6:	4951      	ldr	r1, [pc, #324]	; (8001e2c <main+0x4b0>)
 8001ce8:	0082      	lsls	r2, r0, #2
 8001cea:	440a      	add	r2, r1
 8001cec:	4413      	add	r3, r2
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	2b03      	cmp	r3, #3
 8001cf2:	f040 80a3 	bne.w	8001e3c <main+0x4c0>
				{
					if(Locker[Locker_Floor][(Locker_Move_Flag-1)%4]==2)
 8001cf6:	4b4b      	ldr	r3, [pc, #300]	; (8001e24 <main+0x4a8>)
 8001cf8:	781b      	ldrb	r3, [r3, #0]
 8001cfa:	4618      	mov	r0, r3
 8001cfc:	4b4a      	ldr	r3, [pc, #296]	; (8001e28 <main+0x4ac>)
 8001cfe:	781b      	ldrb	r3, [r3, #0]
 8001d00:	3b01      	subs	r3, #1
 8001d02:	425a      	negs	r2, r3
 8001d04:	f003 0303 	and.w	r3, r3, #3
 8001d08:	f002 0203 	and.w	r2, r2, #3
 8001d0c:	bf58      	it	pl
 8001d0e:	4253      	negpl	r3, r2
 8001d10:	4947      	ldr	r1, [pc, #284]	; (8001e30 <main+0x4b4>)
 8001d12:	0082      	lsls	r2, r0, #2
 8001d14:	440a      	add	r2, r1
 8001d16:	4413      	add	r3, r2
 8001d18:	781b      	ldrb	r3, [r3, #0]
 8001d1a:	2b02      	cmp	r3, #2
 8001d1c:	d163      	bne.n	8001de6 <main+0x46a>
					{
						if(Locker_Floor==1 && Elevator_Floor==0)
 8001d1e:	4b41      	ldr	r3, [pc, #260]	; (8001e24 <main+0x4a8>)
 8001d20:	781b      	ldrb	r3, [r3, #0]
 8001d22:	2b01      	cmp	r3, #1
 8001d24:	d109      	bne.n	8001d3a <main+0x3be>
 8001d26:	4b43      	ldr	r3, [pc, #268]	; (8001e34 <main+0x4b8>)
 8001d28:	781b      	ldrb	r3, [r3, #0]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d105      	bne.n	8001d3a <main+0x3be>
						{
							Elevator(2);
 8001d2e:	2002      	movs	r0, #2
 8001d30:	f001 f86c 	bl	8002e0c <Elevator>
							Elevator_Floor=1;
 8001d34:	4b3f      	ldr	r3, [pc, #252]	; (8001e34 <main+0x4b8>)
 8001d36:	2201      	movs	r2, #1
 8001d38:	701a      	strb	r2, [r3, #0]
						}
						LM_Guide_Move(LM_extra,0);
 8001d3a:	2100      	movs	r1, #0
 8001d3c:	2014      	movs	r0, #20
 8001d3e:	f000 ff11 	bl	8002b64 <LM_Guide_Move>
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Go,3800);
 8001d42:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <main+0x4a8>)
 8001d44:	781b      	ldrb	r3, [r3, #0]
 8001d46:	4618      	mov	r0, r3
 8001d48:	4b37      	ldr	r3, [pc, #220]	; (8001e28 <main+0x4ac>)
 8001d4a:	781b      	ldrb	r3, [r3, #0]
 8001d4c:	3b01      	subs	r3, #1
 8001d4e:	425a      	negs	r2, r3
 8001d50:	f003 0303 	and.w	r3, r3, #3
 8001d54:	f002 0203 	and.w	r2, r2, #3
 8001d58:	bf58      	it	pl
 8001d5a:	4253      	negpl	r3, r2
 8001d5c:	4936      	ldr	r1, [pc, #216]	; (8001e38 <main+0x4bc>)
 8001d5e:	0082      	lsls	r2, r0, #2
 8001d60:	4413      	add	r3, r2
 8001d62:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001d66:	f640 63d8 	movw	r3, #3800	; 0xed8
 8001d6a:	2201      	movs	r2, #1
 8001d6c:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001d70:	f000 ff9e 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>
						LM_Guide_Move(320,Relay_ON);
 8001d74:	2101      	movs	r1, #1
 8001d76:	f44f 70a0 	mov.w	r0, #320	; 0x140
 8001d7a:	f000 fef3 	bl	8002b64 <LM_Guide_Move>
						HAL_Delay(500);
 8001d7e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001d82:	f001 fbad 	bl	80034e0 <HAL_Delay>
						LM_Guide_Move(LM_extra,0);
 8001d86:	2100      	movs	r1, #0
 8001d88:	2014      	movs	r0, #20
 8001d8a:	f000 feeb 	bl	8002b64 <LM_Guide_Move>
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Back,3800);
 8001d8e:	4b25      	ldr	r3, [pc, #148]	; (8001e24 <main+0x4a8>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	4b24      	ldr	r3, [pc, #144]	; (8001e28 <main+0x4ac>)
 8001d96:	781b      	ldrb	r3, [r3, #0]
 8001d98:	3b01      	subs	r3, #1
 8001d9a:	425a      	negs	r2, r3
 8001d9c:	f003 0303 	and.w	r3, r3, #3
 8001da0:	f002 0203 	and.w	r2, r2, #3
 8001da4:	bf58      	it	pl
 8001da6:	4253      	negpl	r3, r2
 8001da8:	4923      	ldr	r1, [pc, #140]	; (8001e38 <main+0x4bc>)
 8001daa:	0082      	lsls	r2, r0, #2
 8001dac:	4413      	add	r3, r2
 8001dae:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001db2:	f640 63d8 	movw	r3, #3800	; 0xed8
 8001db6:	2200      	movs	r2, #0
 8001db8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001dbc:	f000 ff78 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>

						Locker[Locker_Floor][(Locker_Move_Flag-1)%4]=3;
 8001dc0:	4b18      	ldr	r3, [pc, #96]	; (8001e24 <main+0x4a8>)
 8001dc2:	781b      	ldrb	r3, [r3, #0]
 8001dc4:	4618      	mov	r0, r3
 8001dc6:	4b18      	ldr	r3, [pc, #96]	; (8001e28 <main+0x4ac>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	3b01      	subs	r3, #1
 8001dcc:	425a      	negs	r2, r3
 8001dce:	f003 0303 	and.w	r3, r3, #3
 8001dd2:	f002 0203 	and.w	r2, r2, #3
 8001dd6:	bf58      	it	pl
 8001dd8:	4253      	negpl	r3, r2
 8001dda:	4915      	ldr	r1, [pc, #84]	; (8001e30 <main+0x4b4>)
 8001ddc:	0082      	lsls	r2, r0, #2
 8001dde:	440a      	add	r2, r1
 8001de0:	4413      	add	r3, r2
 8001de2:	2203      	movs	r2, #3
 8001de4:	701a      	strb	r2, [r3, #0]
					}
					Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]=0;
 8001de6:	4b0f      	ldr	r3, [pc, #60]	; (8001e24 <main+0x4a8>)
 8001de8:	781b      	ldrb	r3, [r3, #0]
 8001dea:	4618      	mov	r0, r3
 8001dec:	4b0e      	ldr	r3, [pc, #56]	; (8001e28 <main+0x4ac>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	3b01      	subs	r3, #1
 8001df2:	425a      	negs	r2, r3
 8001df4:	f003 0303 	and.w	r3, r3, #3
 8001df8:	f002 0203 	and.w	r2, r2, #3
 8001dfc:	bf58      	it	pl
 8001dfe:	4253      	negpl	r3, r2
 8001e00:	490a      	ldr	r1, [pc, #40]	; (8001e2c <main+0x4b0>)
 8001e02:	0082      	lsls	r2, r0, #2
 8001e04:	440a      	add	r2, r1
 8001e06:	4413      	add	r3, r2
 8001e08:	2200      	movs	r2, #0
 8001e0a:	701a      	strb	r2, [r3, #0]

					if(Elevator_Floor==1)
 8001e0c:	4b09      	ldr	r3, [pc, #36]	; (8001e34 <main+0x4b8>)
 8001e0e:	781b      	ldrb	r3, [r3, #0]
 8001e10:	2b01      	cmp	r3, #1
 8001e12:	f040 80b9 	bne.w	8001f88 <main+0x60c>
					{
						Elevator(1);
 8001e16:	2001      	movs	r0, #1
 8001e18:	f000 fff8 	bl	8002e0c <Elevator>
						Elevator_Floor=0;
 8001e1c:	4b05      	ldr	r3, [pc, #20]	; (8001e34 <main+0x4b8>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e0b1      	b.n	8001f88 <main+0x60c>
 8001e24:	20000904 	.word	0x20000904
 8001e28:	200008f0 	.word	0x200008f0
 8001e2c:	200008f4 	.word	0x200008f4
 8001e30:	200008fc 	.word	0x200008fc
 8001e34:	20000905 	.word	0x20000905
 8001e38:	20000018 	.word	0x20000018
					}
				}
				else if(Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]==Lockeroff)
 8001e3c:	4bb5      	ldr	r3, [pc, #724]	; (8002114 <main+0x798>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	4618      	mov	r0, r3
 8001e42:	4bb5      	ldr	r3, [pc, #724]	; (8002118 <main+0x79c>)
 8001e44:	781b      	ldrb	r3, [r3, #0]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	425a      	negs	r2, r3
 8001e4a:	f003 0303 	and.w	r3, r3, #3
 8001e4e:	f002 0203 	and.w	r2, r2, #3
 8001e52:	bf58      	it	pl
 8001e54:	4253      	negpl	r3, r2
 8001e56:	49b1      	ldr	r1, [pc, #708]	; (800211c <main+0x7a0>)
 8001e58:	0082      	lsls	r2, r0, #2
 8001e5a:	440a      	add	r2, r1
 8001e5c:	4413      	add	r3, r2
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	2b04      	cmp	r3, #4
 8001e62:	f040 8091 	bne.w	8001f88 <main+0x60c>
				{
					if(Locker[Locker_Floor][(Locker_Move_Flag-1)%4]==3)
 8001e66:	4bab      	ldr	r3, [pc, #684]	; (8002114 <main+0x798>)
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	4618      	mov	r0, r3
 8001e6c:	4baa      	ldr	r3, [pc, #680]	; (8002118 <main+0x79c>)
 8001e6e:	781b      	ldrb	r3, [r3, #0]
 8001e70:	3b01      	subs	r3, #1
 8001e72:	425a      	negs	r2, r3
 8001e74:	f003 0303 	and.w	r3, r3, #3
 8001e78:	f002 0203 	and.w	r2, r2, #3
 8001e7c:	bf58      	it	pl
 8001e7e:	4253      	negpl	r3, r2
 8001e80:	49a7      	ldr	r1, [pc, #668]	; (8002120 <main+0x7a4>)
 8001e82:	0082      	lsls	r2, r0, #2
 8001e84:	440a      	add	r2, r1
 8001e86:	4413      	add	r3, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	2b03      	cmp	r3, #3
 8001e8c:	d15f      	bne.n	8001f4e <main+0x5d2>
					{
						if(Locker_Floor==1 && Elevator_Floor==0)
 8001e8e:	4ba1      	ldr	r3, [pc, #644]	; (8002114 <main+0x798>)
 8001e90:	781b      	ldrb	r3, [r3, #0]
 8001e92:	2b01      	cmp	r3, #1
 8001e94:	d109      	bne.n	8001eaa <main+0x52e>
 8001e96:	4ba3      	ldr	r3, [pc, #652]	; (8002124 <main+0x7a8>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	2b00      	cmp	r3, #0
 8001e9c:	d105      	bne.n	8001eaa <main+0x52e>
						{
							Elevator(2);
 8001e9e:	2002      	movs	r0, #2
 8001ea0:	f000 ffb4 	bl	8002e0c <Elevator>
							Elevator_Floor=1;
 8001ea4:	4b9f      	ldr	r3, [pc, #636]	; (8002124 <main+0x7a8>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
						}
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Go,3800);
 8001eaa:	4b9a      	ldr	r3, [pc, #616]	; (8002114 <main+0x798>)
 8001eac:	781b      	ldrb	r3, [r3, #0]
 8001eae:	4618      	mov	r0, r3
 8001eb0:	4b99      	ldr	r3, [pc, #612]	; (8002118 <main+0x79c>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	3b01      	subs	r3, #1
 8001eb6:	425a      	negs	r2, r3
 8001eb8:	f003 0303 	and.w	r3, r3, #3
 8001ebc:	f002 0203 	and.w	r2, r2, #3
 8001ec0:	bf58      	it	pl
 8001ec2:	4253      	negpl	r3, r2
 8001ec4:	4998      	ldr	r1, [pc, #608]	; (8002128 <main+0x7ac>)
 8001ec6:	0082      	lsls	r2, r0, #2
 8001ec8:	4413      	add	r3, r2
 8001eca:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001ece:	f640 63d8 	movw	r3, #3800	; 0xed8
 8001ed2:	2201      	movs	r2, #1
 8001ed4:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001ed8:	f000 feea 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>
						LM_Guide_Move(320-LM_extra2,Relay_OFF);
 8001edc:	2102      	movs	r1, #2
 8001ede:	f44f 709b 	mov.w	r0, #310	; 0x136
 8001ee2:	f000 fe3f 	bl	8002b64 <LM_Guide_Move>
						LM_Guide_Move(LM_extra,0);
 8001ee6:	2100      	movs	r1, #0
 8001ee8:	2014      	movs	r0, #20
 8001eea:	f000 fe3b 	bl	8002b64 <LM_Guide_Move>
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Back,3800);
 8001eee:	4b89      	ldr	r3, [pc, #548]	; (8002114 <main+0x798>)
 8001ef0:	781b      	ldrb	r3, [r3, #0]
 8001ef2:	4618      	mov	r0, r3
 8001ef4:	4b88      	ldr	r3, [pc, #544]	; (8002118 <main+0x79c>)
 8001ef6:	781b      	ldrb	r3, [r3, #0]
 8001ef8:	3b01      	subs	r3, #1
 8001efa:	425a      	negs	r2, r3
 8001efc:	f003 0303 	and.w	r3, r3, #3
 8001f00:	f002 0203 	and.w	r2, r2, #3
 8001f04:	bf58      	it	pl
 8001f06:	4253      	negpl	r3, r2
 8001f08:	4987      	ldr	r1, [pc, #540]	; (8002128 <main+0x7ac>)
 8001f0a:	0082      	lsls	r2, r0, #2
 8001f0c:	4413      	add	r3, r2
 8001f0e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8001f12:	f640 63d8 	movw	r3, #3800	; 0xed8
 8001f16:	2200      	movs	r2, #0
 8001f18:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8001f1c:	f000 fec8 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>
						LM_Guide_Move(0,0);
 8001f20:	2100      	movs	r1, #0
 8001f22:	2000      	movs	r0, #0
 8001f24:	f000 fe1e 	bl	8002b64 <LM_Guide_Move>

						Locker[Locker_Floor][(Locker_Move_Flag-1)%4]=0;
 8001f28:	4b7a      	ldr	r3, [pc, #488]	; (8002114 <main+0x798>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	4b7a      	ldr	r3, [pc, #488]	; (8002118 <main+0x79c>)
 8001f30:	781b      	ldrb	r3, [r3, #0]
 8001f32:	3b01      	subs	r3, #1
 8001f34:	425a      	negs	r2, r3
 8001f36:	f003 0303 	and.w	r3, r3, #3
 8001f3a:	f002 0203 	and.w	r2, r2, #3
 8001f3e:	bf58      	it	pl
 8001f40:	4253      	negpl	r3, r2
 8001f42:	4977      	ldr	r1, [pc, #476]	; (8002120 <main+0x7a4>)
 8001f44:	0082      	lsls	r2, r0, #2
 8001f46:	440a      	add	r2, r1
 8001f48:	4413      	add	r3, r2
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	701a      	strb	r2, [r3, #0]
					}
					Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]=0;
 8001f4e:	4b71      	ldr	r3, [pc, #452]	; (8002114 <main+0x798>)
 8001f50:	781b      	ldrb	r3, [r3, #0]
 8001f52:	4618      	mov	r0, r3
 8001f54:	4b70      	ldr	r3, [pc, #448]	; (8002118 <main+0x79c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
 8001f58:	3b01      	subs	r3, #1
 8001f5a:	425a      	negs	r2, r3
 8001f5c:	f003 0303 	and.w	r3, r3, #3
 8001f60:	f002 0203 	and.w	r2, r2, #3
 8001f64:	bf58      	it	pl
 8001f66:	4253      	negpl	r3, r2
 8001f68:	496c      	ldr	r1, [pc, #432]	; (800211c <main+0x7a0>)
 8001f6a:	0082      	lsls	r2, r0, #2
 8001f6c:	440a      	add	r2, r1
 8001f6e:	4413      	add	r3, r2
 8001f70:	2200      	movs	r2, #0
 8001f72:	701a      	strb	r2, [r3, #0]

					if(Elevator_Floor==1)
 8001f74:	4b6b      	ldr	r3, [pc, #428]	; (8002124 <main+0x7a8>)
 8001f76:	781b      	ldrb	r3, [r3, #0]
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d105      	bne.n	8001f88 <main+0x60c>
					{
						Elevator(1);
 8001f7c:	2001      	movs	r0, #1
 8001f7e:	f000 ff45 	bl	8002e0c <Elevator>
						Elevator_Floor=0;
 8001f82:	4b68      	ldr	r3, [pc, #416]	; (8002124 <main+0x7a8>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	701a      	strb	r2, [r3, #0]

				}



				Locker_Move_Flag=0;
 8001f88:	4b63      	ldr	r3, [pc, #396]	; (8002118 <main+0x79c>)
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	701a      	strb	r2, [r3, #0]
 8001f8e:	e2dd      	b.n	800254c <main+0xbd0>
			}
			else if( Locker_Move_Flag == 3 || Locker_Move_Flag == 4 || Locker_Move_Flag == 7  || Locker_Move_Flag == 8)//
 8001f90:	4b61      	ldr	r3, [pc, #388]	; (8002118 <main+0x79c>)
 8001f92:	781b      	ldrb	r3, [r3, #0]
 8001f94:	2b03      	cmp	r3, #3
 8001f96:	d00c      	beq.n	8001fb2 <main+0x636>
 8001f98:	4b5f      	ldr	r3, [pc, #380]	; (8002118 <main+0x79c>)
 8001f9a:	781b      	ldrb	r3, [r3, #0]
 8001f9c:	2b04      	cmp	r3, #4
 8001f9e:	d008      	beq.n	8001fb2 <main+0x636>
 8001fa0:	4b5d      	ldr	r3, [pc, #372]	; (8002118 <main+0x79c>)
 8001fa2:	781b      	ldrb	r3, [r3, #0]
 8001fa4:	2b07      	cmp	r3, #7
 8001fa6:	d004      	beq.n	8001fb2 <main+0x636>
 8001fa8:	4b5b      	ldr	r3, [pc, #364]	; (8002118 <main+0x79c>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	2b08      	cmp	r3, #8
 8001fae:	f47f ad03 	bne.w	80019b8 <main+0x3c>
			{

				if(Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]==Lockeroncall)
 8001fb2:	4b58      	ldr	r3, [pc, #352]	; (8002114 <main+0x798>)
 8001fb4:	781b      	ldrb	r3, [r3, #0]
 8001fb6:	4618      	mov	r0, r3
 8001fb8:	4b57      	ldr	r3, [pc, #348]	; (8002118 <main+0x79c>)
 8001fba:	781b      	ldrb	r3, [r3, #0]
 8001fbc:	3b01      	subs	r3, #1
 8001fbe:	425a      	negs	r2, r3
 8001fc0:	f003 0303 	and.w	r3, r3, #3
 8001fc4:	f002 0203 	and.w	r2, r2, #3
 8001fc8:	bf58      	it	pl
 8001fca:	4253      	negpl	r3, r2
 8001fcc:	4953      	ldr	r1, [pc, #332]	; (800211c <main+0x7a0>)
 8001fce:	0082      	lsls	r2, r0, #2
 8001fd0:	440a      	add	r2, r1
 8001fd2:	4413      	add	r3, r2
 8001fd4:	781b      	ldrb	r3, [r3, #0]
 8001fd6:	2b01      	cmp	r3, #1
 8001fd8:	f040 80aa 	bne.w	8002130 <main+0x7b4>
				{
					if(Locker[Locker_Floor][(Locker_Move_Flag-1)%4]==0)
 8001fdc:	4b4d      	ldr	r3, [pc, #308]	; (8002114 <main+0x798>)
 8001fde:	781b      	ldrb	r3, [r3, #0]
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	4b4d      	ldr	r3, [pc, #308]	; (8002118 <main+0x79c>)
 8001fe4:	781b      	ldrb	r3, [r3, #0]
 8001fe6:	3b01      	subs	r3, #1
 8001fe8:	425a      	negs	r2, r3
 8001fea:	f003 0303 	and.w	r3, r3, #3
 8001fee:	f002 0203 	and.w	r2, r2, #3
 8001ff2:	bf58      	it	pl
 8001ff4:	4253      	negpl	r3, r2
 8001ff6:	494a      	ldr	r1, [pc, #296]	; (8002120 <main+0x7a4>)
 8001ff8:	0082      	lsls	r2, r0, #2
 8001ffa:	440a      	add	r2, r1
 8001ffc:	4413      	add	r3, r2
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d168      	bne.n	80020d6 <main+0x75a>
					{
						if(Locker_Floor==1 && Elevator_Floor==0)
 8002004:	4b43      	ldr	r3, [pc, #268]	; (8002114 <main+0x798>)
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b01      	cmp	r3, #1
 800200a:	d109      	bne.n	8002020 <main+0x6a4>
 800200c:	4b45      	ldr	r3, [pc, #276]	; (8002124 <main+0x7a8>)
 800200e:	781b      	ldrb	r3, [r3, #0]
 8002010:	2b00      	cmp	r3, #0
 8002012:	d105      	bne.n	8002020 <main+0x6a4>
						{
							Elevator(2);
 8002014:	2002      	movs	r0, #2
 8002016:	f000 fef9 	bl	8002e0c <Elevator>
							Elevator_Floor=1;
 800201a:	4b42      	ldr	r3, [pc, #264]	; (8002124 <main+0x7a8>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
						}
						LM_Guide_Move(LM_extra,0);
 8002020:	2100      	movs	r1, #0
 8002022:	2014      	movs	r0, #20
 8002024:	f000 fd9e 	bl	8002b64 <LM_Guide_Move>
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Go,3800);
 8002028:	4b3a      	ldr	r3, [pc, #232]	; (8002114 <main+0x798>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	4618      	mov	r0, r3
 800202e:	4b3a      	ldr	r3, [pc, #232]	; (8002118 <main+0x79c>)
 8002030:	781b      	ldrb	r3, [r3, #0]
 8002032:	3b01      	subs	r3, #1
 8002034:	425a      	negs	r2, r3
 8002036:	f003 0303 	and.w	r3, r3, #3
 800203a:	f002 0203 	and.w	r2, r2, #3
 800203e:	bf58      	it	pl
 8002040:	4253      	negpl	r3, r2
 8002042:	4939      	ldr	r1, [pc, #228]	; (8002128 <main+0x7ac>)
 8002044:	0082      	lsls	r2, r0, #2
 8002046:	4413      	add	r3, r2
 8002048:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800204c:	f640 63d8 	movw	r3, #3800	; 0xed8
 8002050:	2201      	movs	r2, #1
 8002052:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002056:	f000 fe2b 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>
						HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 1);
 800205a:	2201      	movs	r2, #1
 800205c:	2110      	movs	r1, #16
 800205e:	4833      	ldr	r0, [pc, #204]	; (800212c <main+0x7b0>)
 8002060:	f001 fd20 	bl	8003aa4 <HAL_GPIO_WritePin>
						LM_Guide_Move(0,0);
 8002064:	2100      	movs	r1, #0
 8002066:	2000      	movs	r0, #0
 8002068:	f000 fd7c 	bl	8002b64 <LM_Guide_Move>
						HAL_Delay(500);
 800206c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002070:	f001 fa36 	bl	80034e0 <HAL_Delay>
						LM_Guide_Move(320-LM_extra,0);
 8002074:	2100      	movs	r1, #0
 8002076:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800207a:	f000 fd73 	bl	8002b64 <LM_Guide_Move>
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Back,3800);
 800207e:	4b25      	ldr	r3, [pc, #148]	; (8002114 <main+0x798>)
 8002080:	781b      	ldrb	r3, [r3, #0]
 8002082:	4618      	mov	r0, r3
 8002084:	4b24      	ldr	r3, [pc, #144]	; (8002118 <main+0x79c>)
 8002086:	781b      	ldrb	r3, [r3, #0]
 8002088:	3b01      	subs	r3, #1
 800208a:	425a      	negs	r2, r3
 800208c:	f003 0303 	and.w	r3, r3, #3
 8002090:	f002 0203 	and.w	r2, r2, #3
 8002094:	bf58      	it	pl
 8002096:	4253      	negpl	r3, r2
 8002098:	4923      	ldr	r1, [pc, #140]	; (8002128 <main+0x7ac>)
 800209a:	0082      	lsls	r2, r0, #2
 800209c:	4413      	add	r3, r2
 800209e:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80020a2:	f640 63d8 	movw	r3, #3800	; 0xed8
 80020a6:	2200      	movs	r2, #0
 80020a8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80020ac:	f000 fe00 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>

						Locker[Locker_Floor][(Locker_Move_Flag-1)%4]=1;
 80020b0:	4b18      	ldr	r3, [pc, #96]	; (8002114 <main+0x798>)
 80020b2:	781b      	ldrb	r3, [r3, #0]
 80020b4:	4618      	mov	r0, r3
 80020b6:	4b18      	ldr	r3, [pc, #96]	; (8002118 <main+0x79c>)
 80020b8:	781b      	ldrb	r3, [r3, #0]
 80020ba:	3b01      	subs	r3, #1
 80020bc:	425a      	negs	r2, r3
 80020be:	f003 0303 	and.w	r3, r3, #3
 80020c2:	f002 0203 	and.w	r2, r2, #3
 80020c6:	bf58      	it	pl
 80020c8:	4253      	negpl	r3, r2
 80020ca:	4915      	ldr	r1, [pc, #84]	; (8002120 <main+0x7a4>)
 80020cc:	0082      	lsls	r2, r0, #2
 80020ce:	440a      	add	r2, r1
 80020d0:	4413      	add	r3, r2
 80020d2:	2201      	movs	r2, #1
 80020d4:	701a      	strb	r2, [r3, #0]
					}
					Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]=0;
 80020d6:	4b0f      	ldr	r3, [pc, #60]	; (8002114 <main+0x798>)
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	4b0e      	ldr	r3, [pc, #56]	; (8002118 <main+0x79c>)
 80020de:	781b      	ldrb	r3, [r3, #0]
 80020e0:	3b01      	subs	r3, #1
 80020e2:	425a      	negs	r2, r3
 80020e4:	f003 0303 	and.w	r3, r3, #3
 80020e8:	f002 0203 	and.w	r2, r2, #3
 80020ec:	bf58      	it	pl
 80020ee:	4253      	negpl	r3, r2
 80020f0:	490a      	ldr	r1, [pc, #40]	; (800211c <main+0x7a0>)
 80020f2:	0082      	lsls	r2, r0, #2
 80020f4:	440a      	add	r2, r1
 80020f6:	4413      	add	r3, r2
 80020f8:	2200      	movs	r2, #0
 80020fa:	701a      	strb	r2, [r3, #0]

					if(Elevator_Floor==1)
 80020fc:	4b09      	ldr	r3, [pc, #36]	; (8002124 <main+0x7a8>)
 80020fe:	781b      	ldrb	r3, [r3, #0]
 8002100:	2b01      	cmp	r3, #1
 8002102:	f040 8220 	bne.w	8002546 <main+0xbca>
					{
						Elevator(1);
 8002106:	2001      	movs	r0, #1
 8002108:	f000 fe80 	bl	8002e0c <Elevator>
						Elevator_Floor=0;
 800210c:	4b05      	ldr	r3, [pc, #20]	; (8002124 <main+0x7a8>)
 800210e:	2200      	movs	r2, #0
 8002110:	701a      	strb	r2, [r3, #0]
 8002112:	e218      	b.n	8002546 <main+0xbca>
 8002114:	20000904 	.word	0x20000904
 8002118:	200008f0 	.word	0x200008f0
 800211c:	200008f4 	.word	0x200008f4
 8002120:	200008fc 	.word	0x200008fc
 8002124:	20000905 	.word	0x20000905
 8002128:	20000018 	.word	0x20000018
 800212c:	40020000 	.word	0x40020000
					}
				}
				else if(Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]==Lockeron)
 8002130:	4bab      	ldr	r3, [pc, #684]	; (80023e0 <main+0xa64>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4618      	mov	r0, r3
 8002136:	4bab      	ldr	r3, [pc, #684]	; (80023e4 <main+0xa68>)
 8002138:	781b      	ldrb	r3, [r3, #0]
 800213a:	3b01      	subs	r3, #1
 800213c:	425a      	negs	r2, r3
 800213e:	f003 0303 	and.w	r3, r3, #3
 8002142:	f002 0203 	and.w	r2, r2, #3
 8002146:	bf58      	it	pl
 8002148:	4253      	negpl	r3, r2
 800214a:	49a7      	ldr	r1, [pc, #668]	; (80023e8 <main+0xa6c>)
 800214c:	0082      	lsls	r2, r0, #2
 800214e:	440a      	add	r2, r1
 8002150:	4413      	add	r3, r2
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b02      	cmp	r3, #2
 8002156:	f040 8092 	bne.w	800227e <main+0x902>
				{
					if(Locker[Locker_Floor][(Locker_Move_Flag-1)%4]==1)
 800215a:	4ba1      	ldr	r3, [pc, #644]	; (80023e0 <main+0xa64>)
 800215c:	781b      	ldrb	r3, [r3, #0]
 800215e:	4618      	mov	r0, r3
 8002160:	4ba0      	ldr	r3, [pc, #640]	; (80023e4 <main+0xa68>)
 8002162:	781b      	ldrb	r3, [r3, #0]
 8002164:	3b01      	subs	r3, #1
 8002166:	425a      	negs	r2, r3
 8002168:	f003 0303 	and.w	r3, r3, #3
 800216c:	f002 0203 	and.w	r2, r2, #3
 8002170:	bf58      	it	pl
 8002172:	4253      	negpl	r3, r2
 8002174:	499d      	ldr	r1, [pc, #628]	; (80023ec <main+0xa70>)
 8002176:	0082      	lsls	r2, r0, #2
 8002178:	440a      	add	r2, r1
 800217a:	4413      	add	r3, r2
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	2b01      	cmp	r3, #1
 8002180:	d15e      	bne.n	8002240 <main+0x8c4>
					{
						if(Locker_Floor==1 && Elevator_Floor==0)
 8002182:	4b97      	ldr	r3, [pc, #604]	; (80023e0 <main+0xa64>)
 8002184:	781b      	ldrb	r3, [r3, #0]
 8002186:	2b01      	cmp	r3, #1
 8002188:	d109      	bne.n	800219e <main+0x822>
 800218a:	4b99      	ldr	r3, [pc, #612]	; (80023f0 <main+0xa74>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	2b00      	cmp	r3, #0
 8002190:	d105      	bne.n	800219e <main+0x822>
						{
							Elevator(2);
 8002192:	2002      	movs	r0, #2
 8002194:	f000 fe3a 	bl	8002e0c <Elevator>
							Elevator_Floor=1;
 8002198:	4b95      	ldr	r3, [pc, #596]	; (80023f0 <main+0xa74>)
 800219a:	2201      	movs	r2, #1
 800219c:	701a      	strb	r2, [r3, #0]
						}
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Go,3800);
 800219e:	4b90      	ldr	r3, [pc, #576]	; (80023e0 <main+0xa64>)
 80021a0:	781b      	ldrb	r3, [r3, #0]
 80021a2:	4618      	mov	r0, r3
 80021a4:	4b8f      	ldr	r3, [pc, #572]	; (80023e4 <main+0xa68>)
 80021a6:	781b      	ldrb	r3, [r3, #0]
 80021a8:	3b01      	subs	r3, #1
 80021aa:	425a      	negs	r2, r3
 80021ac:	f003 0303 	and.w	r3, r3, #3
 80021b0:	f002 0203 	and.w	r2, r2, #3
 80021b4:	bf58      	it	pl
 80021b6:	4253      	negpl	r3, r2
 80021b8:	498e      	ldr	r1, [pc, #568]	; (80023f4 <main+0xa78>)
 80021ba:	0082      	lsls	r2, r0, #2
 80021bc:	4413      	add	r3, r2
 80021be:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80021c2:	f640 63d8 	movw	r3, #3800	; 0xed8
 80021c6:	2201      	movs	r2, #1
 80021c8:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80021cc:	f000 fd70 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>
						LM_Guide_Move(LM_extra2,Relay_OFF);
 80021d0:	2102      	movs	r1, #2
 80021d2:	200a      	movs	r0, #10
 80021d4:	f000 fcc6 	bl	8002b64 <LM_Guide_Move>
						LM_Guide_Move(LM_extra,0);
 80021d8:	2100      	movs	r1, #0
 80021da:	2014      	movs	r0, #20
 80021dc:	f000 fcc2 	bl	8002b64 <LM_Guide_Move>
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Back,3800);
 80021e0:	4b7f      	ldr	r3, [pc, #508]	; (80023e0 <main+0xa64>)
 80021e2:	781b      	ldrb	r3, [r3, #0]
 80021e4:	4618      	mov	r0, r3
 80021e6:	4b7f      	ldr	r3, [pc, #508]	; (80023e4 <main+0xa68>)
 80021e8:	781b      	ldrb	r3, [r3, #0]
 80021ea:	3b01      	subs	r3, #1
 80021ec:	425a      	negs	r2, r3
 80021ee:	f003 0303 	and.w	r3, r3, #3
 80021f2:	f002 0203 	and.w	r2, r2, #3
 80021f6:	bf58      	it	pl
 80021f8:	4253      	negpl	r3, r2
 80021fa:	497e      	ldr	r1, [pc, #504]	; (80023f4 <main+0xa78>)
 80021fc:	0082      	lsls	r2, r0, #2
 80021fe:	4413      	add	r3, r2
 8002200:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8002204:	f640 63d8 	movw	r3, #3800	; 0xed8
 8002208:	2200      	movs	r2, #0
 800220a:	f640 31b8 	movw	r1, #3000	; 0xbb8
 800220e:	f000 fd4f 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>
						LM_Guide_Move(0,0);
 8002212:	2100      	movs	r1, #0
 8002214:	2000      	movs	r0, #0
 8002216:	f000 fca5 	bl	8002b64 <LM_Guide_Move>

						Locker[Locker_Floor][(Locker_Move_Flag-1)%4]=2;
 800221a:	4b71      	ldr	r3, [pc, #452]	; (80023e0 <main+0xa64>)
 800221c:	781b      	ldrb	r3, [r3, #0]
 800221e:	4618      	mov	r0, r3
 8002220:	4b70      	ldr	r3, [pc, #448]	; (80023e4 <main+0xa68>)
 8002222:	781b      	ldrb	r3, [r3, #0]
 8002224:	3b01      	subs	r3, #1
 8002226:	425a      	negs	r2, r3
 8002228:	f003 0303 	and.w	r3, r3, #3
 800222c:	f002 0203 	and.w	r2, r2, #3
 8002230:	bf58      	it	pl
 8002232:	4253      	negpl	r3, r2
 8002234:	496d      	ldr	r1, [pc, #436]	; (80023ec <main+0xa70>)
 8002236:	0082      	lsls	r2, r0, #2
 8002238:	440a      	add	r2, r1
 800223a:	4413      	add	r3, r2
 800223c:	2202      	movs	r2, #2
 800223e:	701a      	strb	r2, [r3, #0]
					}
					Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]=0;
 8002240:	4b67      	ldr	r3, [pc, #412]	; (80023e0 <main+0xa64>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	4618      	mov	r0, r3
 8002246:	4b67      	ldr	r3, [pc, #412]	; (80023e4 <main+0xa68>)
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	3b01      	subs	r3, #1
 800224c:	425a      	negs	r2, r3
 800224e:	f003 0303 	and.w	r3, r3, #3
 8002252:	f002 0203 	and.w	r2, r2, #3
 8002256:	bf58      	it	pl
 8002258:	4253      	negpl	r3, r2
 800225a:	4963      	ldr	r1, [pc, #396]	; (80023e8 <main+0xa6c>)
 800225c:	0082      	lsls	r2, r0, #2
 800225e:	440a      	add	r2, r1
 8002260:	4413      	add	r3, r2
 8002262:	2200      	movs	r2, #0
 8002264:	701a      	strb	r2, [r3, #0]

					if(Elevator_Floor==1)
 8002266:	4b62      	ldr	r3, [pc, #392]	; (80023f0 <main+0xa74>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b01      	cmp	r3, #1
 800226c:	f040 816b 	bne.w	8002546 <main+0xbca>
					{
						Elevator(1);
 8002270:	2001      	movs	r0, #1
 8002272:	f000 fdcb 	bl	8002e0c <Elevator>
						Elevator_Floor=0;
 8002276:	4b5e      	ldr	r3, [pc, #376]	; (80023f0 <main+0xa74>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
 800227c:	e163      	b.n	8002546 <main+0xbca>
					}


				}
				else if(Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]==Lockeroffcall)
 800227e:	4b58      	ldr	r3, [pc, #352]	; (80023e0 <main+0xa64>)
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	4618      	mov	r0, r3
 8002284:	4b57      	ldr	r3, [pc, #348]	; (80023e4 <main+0xa68>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	3b01      	subs	r3, #1
 800228a:	425a      	negs	r2, r3
 800228c:	f003 0303 	and.w	r3, r3, #3
 8002290:	f002 0203 	and.w	r2, r2, #3
 8002294:	bf58      	it	pl
 8002296:	4253      	negpl	r3, r2
 8002298:	4953      	ldr	r1, [pc, #332]	; (80023e8 <main+0xa6c>)
 800229a:	0082      	lsls	r2, r0, #2
 800229c:	440a      	add	r2, r1
 800229e:	4413      	add	r3, r2
 80022a0:	781b      	ldrb	r3, [r3, #0]
 80022a2:	2b03      	cmp	r3, #3
 80022a4:	f040 80aa 	bne.w	80023fc <main+0xa80>
				{
					if(Locker[Locker_Floor][(Locker_Move_Flag-1)%4]==2)
 80022a8:	4b4d      	ldr	r3, [pc, #308]	; (80023e0 <main+0xa64>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	4b4d      	ldr	r3, [pc, #308]	; (80023e4 <main+0xa68>)
 80022b0:	781b      	ldrb	r3, [r3, #0]
 80022b2:	3b01      	subs	r3, #1
 80022b4:	425a      	negs	r2, r3
 80022b6:	f003 0303 	and.w	r3, r3, #3
 80022ba:	f002 0203 	and.w	r2, r2, #3
 80022be:	bf58      	it	pl
 80022c0:	4253      	negpl	r3, r2
 80022c2:	494a      	ldr	r1, [pc, #296]	; (80023ec <main+0xa70>)
 80022c4:	0082      	lsls	r2, r0, #2
 80022c6:	440a      	add	r2, r1
 80022c8:	4413      	add	r3, r2
 80022ca:	781b      	ldrb	r3, [r3, #0]
 80022cc:	2b02      	cmp	r3, #2
 80022ce:	d168      	bne.n	80023a2 <main+0xa26>
					{
						if(Locker_Floor==1 && Elevator_Floor==0)
 80022d0:	4b43      	ldr	r3, [pc, #268]	; (80023e0 <main+0xa64>)
 80022d2:	781b      	ldrb	r3, [r3, #0]
 80022d4:	2b01      	cmp	r3, #1
 80022d6:	d109      	bne.n	80022ec <main+0x970>
 80022d8:	4b45      	ldr	r3, [pc, #276]	; (80023f0 <main+0xa74>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d105      	bne.n	80022ec <main+0x970>
						{
							Elevator(2);
 80022e0:	2002      	movs	r0, #2
 80022e2:	f000 fd93 	bl	8002e0c <Elevator>
							Elevator_Floor=1;
 80022e6:	4b42      	ldr	r3, [pc, #264]	; (80023f0 <main+0xa74>)
 80022e8:	2201      	movs	r2, #1
 80022ea:	701a      	strb	r2, [r3, #0]
						}
						LM_Guide_Move(LM_extra,0);
 80022ec:	2100      	movs	r1, #0
 80022ee:	2014      	movs	r0, #20
 80022f0:	f000 fc38 	bl	8002b64 <LM_Guide_Move>
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Go,3800);
 80022f4:	4b3a      	ldr	r3, [pc, #232]	; (80023e0 <main+0xa64>)
 80022f6:	781b      	ldrb	r3, [r3, #0]
 80022f8:	4618      	mov	r0, r3
 80022fa:	4b3a      	ldr	r3, [pc, #232]	; (80023e4 <main+0xa68>)
 80022fc:	781b      	ldrb	r3, [r3, #0]
 80022fe:	3b01      	subs	r3, #1
 8002300:	425a      	negs	r2, r3
 8002302:	f003 0303 	and.w	r3, r3, #3
 8002306:	f002 0203 	and.w	r2, r2, #3
 800230a:	bf58      	it	pl
 800230c:	4253      	negpl	r3, r2
 800230e:	4939      	ldr	r1, [pc, #228]	; (80023f4 <main+0xa78>)
 8002310:	0082      	lsls	r2, r0, #2
 8002312:	4413      	add	r3, r2
 8002314:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 8002318:	f640 63d8 	movw	r3, #3800	; 0xed8
 800231c:	2201      	movs	r2, #1
 800231e:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002322:	f000 fcc5 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>
						HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 1);
 8002326:	2201      	movs	r2, #1
 8002328:	2110      	movs	r1, #16
 800232a:	4833      	ldr	r0, [pc, #204]	; (80023f8 <main+0xa7c>)
 800232c:	f001 fbba 	bl	8003aa4 <HAL_GPIO_WritePin>
						LM_Guide_Move(0,0);
 8002330:	2100      	movs	r1, #0
 8002332:	2000      	movs	r0, #0
 8002334:	f000 fc16 	bl	8002b64 <LM_Guide_Move>
						HAL_Delay(500);
 8002338:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800233c:	f001 f8d0 	bl	80034e0 <HAL_Delay>
						LM_Guide_Move(320-LM_extra,0);
 8002340:	2100      	movs	r1, #0
 8002342:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002346:	f000 fc0d 	bl	8002b64 <LM_Guide_Move>
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Back,3800);
 800234a:	4b25      	ldr	r3, [pc, #148]	; (80023e0 <main+0xa64>)
 800234c:	781b      	ldrb	r3, [r3, #0]
 800234e:	4618      	mov	r0, r3
 8002350:	4b24      	ldr	r3, [pc, #144]	; (80023e4 <main+0xa68>)
 8002352:	781b      	ldrb	r3, [r3, #0]
 8002354:	3b01      	subs	r3, #1
 8002356:	425a      	negs	r2, r3
 8002358:	f003 0303 	and.w	r3, r3, #3
 800235c:	f002 0203 	and.w	r2, r2, #3
 8002360:	bf58      	it	pl
 8002362:	4253      	negpl	r3, r2
 8002364:	4923      	ldr	r1, [pc, #140]	; (80023f4 <main+0xa78>)
 8002366:	0082      	lsls	r2, r0, #2
 8002368:	4413      	add	r3, r2
 800236a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800236e:	f640 63d8 	movw	r3, #3800	; 0xed8
 8002372:	2200      	movs	r2, #0
 8002374:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002378:	f000 fc9a 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>

						Locker[Locker_Floor][(Locker_Move_Flag-1)%4]=3;
 800237c:	4b18      	ldr	r3, [pc, #96]	; (80023e0 <main+0xa64>)
 800237e:	781b      	ldrb	r3, [r3, #0]
 8002380:	4618      	mov	r0, r3
 8002382:	4b18      	ldr	r3, [pc, #96]	; (80023e4 <main+0xa68>)
 8002384:	781b      	ldrb	r3, [r3, #0]
 8002386:	3b01      	subs	r3, #1
 8002388:	425a      	negs	r2, r3
 800238a:	f003 0303 	and.w	r3, r3, #3
 800238e:	f002 0203 	and.w	r2, r2, #3
 8002392:	bf58      	it	pl
 8002394:	4253      	negpl	r3, r2
 8002396:	4915      	ldr	r1, [pc, #84]	; (80023ec <main+0xa70>)
 8002398:	0082      	lsls	r2, r0, #2
 800239a:	440a      	add	r2, r1
 800239c:	4413      	add	r3, r2
 800239e:	2203      	movs	r2, #3
 80023a0:	701a      	strb	r2, [r3, #0]
					}
					Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]=0;
 80023a2:	4b0f      	ldr	r3, [pc, #60]	; (80023e0 <main+0xa64>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	4b0e      	ldr	r3, [pc, #56]	; (80023e4 <main+0xa68>)
 80023aa:	781b      	ldrb	r3, [r3, #0]
 80023ac:	3b01      	subs	r3, #1
 80023ae:	425a      	negs	r2, r3
 80023b0:	f003 0303 	and.w	r3, r3, #3
 80023b4:	f002 0203 	and.w	r2, r2, #3
 80023b8:	bf58      	it	pl
 80023ba:	4253      	negpl	r3, r2
 80023bc:	490a      	ldr	r1, [pc, #40]	; (80023e8 <main+0xa6c>)
 80023be:	0082      	lsls	r2, r0, #2
 80023c0:	440a      	add	r2, r1
 80023c2:	4413      	add	r3, r2
 80023c4:	2200      	movs	r2, #0
 80023c6:	701a      	strb	r2, [r3, #0]

					if(Elevator_Floor==1)
 80023c8:	4b09      	ldr	r3, [pc, #36]	; (80023f0 <main+0xa74>)
 80023ca:	781b      	ldrb	r3, [r3, #0]
 80023cc:	2b01      	cmp	r3, #1
 80023ce:	f040 80ba 	bne.w	8002546 <main+0xbca>
					{
						Elevator(1);
 80023d2:	2001      	movs	r0, #1
 80023d4:	f000 fd1a 	bl	8002e0c <Elevator>
						Elevator_Floor=0;
 80023d8:	4b05      	ldr	r3, [pc, #20]	; (80023f0 <main+0xa74>)
 80023da:	2200      	movs	r2, #0
 80023dc:	701a      	strb	r2, [r3, #0]
 80023de:	e0b2      	b.n	8002546 <main+0xbca>
 80023e0:	20000904 	.word	0x20000904
 80023e4:	200008f0 	.word	0x200008f0
 80023e8:	200008f4 	.word	0x200008f4
 80023ec:	200008fc 	.word	0x200008fc
 80023f0:	20000905 	.word	0x20000905
 80023f4:	20000018 	.word	0x20000018
 80023f8:	40020000 	.word	0x40020000
					}
				}
				else if(Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]==Lockeroff)
 80023fc:	4b54      	ldr	r3, [pc, #336]	; (8002550 <main+0xbd4>)
 80023fe:	781b      	ldrb	r3, [r3, #0]
 8002400:	4618      	mov	r0, r3
 8002402:	4b54      	ldr	r3, [pc, #336]	; (8002554 <main+0xbd8>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	3b01      	subs	r3, #1
 8002408:	425a      	negs	r2, r3
 800240a:	f003 0303 	and.w	r3, r3, #3
 800240e:	f002 0203 	and.w	r2, r2, #3
 8002412:	bf58      	it	pl
 8002414:	4253      	negpl	r3, r2
 8002416:	4950      	ldr	r1, [pc, #320]	; (8002558 <main+0xbdc>)
 8002418:	0082      	lsls	r2, r0, #2
 800241a:	440a      	add	r2, r1
 800241c:	4413      	add	r3, r2
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	2b04      	cmp	r3, #4
 8002422:	f040 8090 	bne.w	8002546 <main+0xbca>
				{
					if(Locker[Locker_Floor][(Locker_Move_Flag-1)%4]==3)
 8002426:	4b4a      	ldr	r3, [pc, #296]	; (8002550 <main+0xbd4>)
 8002428:	781b      	ldrb	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	4b49      	ldr	r3, [pc, #292]	; (8002554 <main+0xbd8>)
 800242e:	781b      	ldrb	r3, [r3, #0]
 8002430:	3b01      	subs	r3, #1
 8002432:	425a      	negs	r2, r3
 8002434:	f003 0303 	and.w	r3, r3, #3
 8002438:	f002 0203 	and.w	r2, r2, #3
 800243c:	bf58      	it	pl
 800243e:	4253      	negpl	r3, r2
 8002440:	4946      	ldr	r1, [pc, #280]	; (800255c <main+0xbe0>)
 8002442:	0082      	lsls	r2, r0, #2
 8002444:	440a      	add	r2, r1
 8002446:	4413      	add	r3, r2
 8002448:	781b      	ldrb	r3, [r3, #0]
 800244a:	2b03      	cmp	r3, #3
 800244c:	d15e      	bne.n	800250c <main+0xb90>
					{
						if(Locker_Floor==1 && Elevator_Floor==0)
 800244e:	4b40      	ldr	r3, [pc, #256]	; (8002550 <main+0xbd4>)
 8002450:	781b      	ldrb	r3, [r3, #0]
 8002452:	2b01      	cmp	r3, #1
 8002454:	d109      	bne.n	800246a <main+0xaee>
 8002456:	4b42      	ldr	r3, [pc, #264]	; (8002560 <main+0xbe4>)
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b00      	cmp	r3, #0
 800245c:	d105      	bne.n	800246a <main+0xaee>
						{
							Elevator(2);
 800245e:	2002      	movs	r0, #2
 8002460:	f000 fcd4 	bl	8002e0c <Elevator>
							Elevator_Floor=1;
 8002464:	4b3e      	ldr	r3, [pc, #248]	; (8002560 <main+0xbe4>)
 8002466:	2201      	movs	r2, #1
 8002468:	701a      	strb	r2, [r3, #0]
						}
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Go,3800);
 800246a:	4b39      	ldr	r3, [pc, #228]	; (8002550 <main+0xbd4>)
 800246c:	781b      	ldrb	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	4b38      	ldr	r3, [pc, #224]	; (8002554 <main+0xbd8>)
 8002472:	781b      	ldrb	r3, [r3, #0]
 8002474:	3b01      	subs	r3, #1
 8002476:	425a      	negs	r2, r3
 8002478:	f003 0303 	and.w	r3, r3, #3
 800247c:	f002 0203 	and.w	r2, r2, #3
 8002480:	bf58      	it	pl
 8002482:	4253      	negpl	r3, r2
 8002484:	4937      	ldr	r1, [pc, #220]	; (8002564 <main+0xbe8>)
 8002486:	0082      	lsls	r2, r0, #2
 8002488:	4413      	add	r3, r2
 800248a:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800248e:	f640 63d8 	movw	r3, #3800	; 0xed8
 8002492:	2201      	movs	r2, #1
 8002494:	f640 31b8 	movw	r1, #3000	; 0xbb8
 8002498:	f000 fc0a 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>
						LM_Guide_Move(LM_extra2,Relay_OFF);
 800249c:	2102      	movs	r1, #2
 800249e:	200a      	movs	r0, #10
 80024a0:	f000 fb60 	bl	8002b64 <LM_Guide_Move>
						LM_Guide_Move(LM_extra,0);
 80024a4:	2100      	movs	r1, #0
 80024a6:	2014      	movs	r0, #20
 80024a8:	f000 fb5c 	bl	8002b64 <LM_Guide_Move>
						TUK_Locker_Car_Move_Delay(Locker_Distance[Locker_Floor][(Locker_Move_Flag-1)%4],duty,Car_Back,3800);
 80024ac:	4b28      	ldr	r3, [pc, #160]	; (8002550 <main+0xbd4>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	4618      	mov	r0, r3
 80024b2:	4b28      	ldr	r3, [pc, #160]	; (8002554 <main+0xbd8>)
 80024b4:	781b      	ldrb	r3, [r3, #0]
 80024b6:	3b01      	subs	r3, #1
 80024b8:	425a      	negs	r2, r3
 80024ba:	f003 0303 	and.w	r3, r3, #3
 80024be:	f002 0203 	and.w	r2, r2, #3
 80024c2:	bf58      	it	pl
 80024c4:	4253      	negpl	r3, r2
 80024c6:	4927      	ldr	r1, [pc, #156]	; (8002564 <main+0xbe8>)
 80024c8:	0082      	lsls	r2, r0, #2
 80024ca:	4413      	add	r3, r2
 80024cc:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 80024d0:	f640 63d8 	movw	r3, #3800	; 0xed8
 80024d4:	2200      	movs	r2, #0
 80024d6:	f640 31b8 	movw	r1, #3000	; 0xbb8
 80024da:	f000 fbe9 	bl	8002cb0 <TUK_Locker_Car_Move_Delay>
						LM_Guide_Move(0,0);
 80024de:	2100      	movs	r1, #0
 80024e0:	2000      	movs	r0, #0
 80024e2:	f000 fb3f 	bl	8002b64 <LM_Guide_Move>

						Locker[Locker_Floor][(Locker_Move_Flag-1)%4]=0;
 80024e6:	4b1a      	ldr	r3, [pc, #104]	; (8002550 <main+0xbd4>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	4618      	mov	r0, r3
 80024ec:	4b19      	ldr	r3, [pc, #100]	; (8002554 <main+0xbd8>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	3b01      	subs	r3, #1
 80024f2:	425a      	negs	r2, r3
 80024f4:	f003 0303 	and.w	r3, r3, #3
 80024f8:	f002 0203 	and.w	r2, r2, #3
 80024fc:	bf58      	it	pl
 80024fe:	4253      	negpl	r3, r2
 8002500:	4916      	ldr	r1, [pc, #88]	; (800255c <main+0xbe0>)
 8002502:	0082      	lsls	r2, r0, #2
 8002504:	440a      	add	r2, r1
 8002506:	4413      	add	r3, r2
 8002508:	2200      	movs	r2, #0
 800250a:	701a      	strb	r2, [r3, #0]
					}
					Locker_Flag[Locker_Floor][(Locker_Move_Flag-1)%4]=0;
 800250c:	4b10      	ldr	r3, [pc, #64]	; (8002550 <main+0xbd4>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	4b10      	ldr	r3, [pc, #64]	; (8002554 <main+0xbd8>)
 8002514:	781b      	ldrb	r3, [r3, #0]
 8002516:	3b01      	subs	r3, #1
 8002518:	425a      	negs	r2, r3
 800251a:	f003 0303 	and.w	r3, r3, #3
 800251e:	f002 0203 	and.w	r2, r2, #3
 8002522:	bf58      	it	pl
 8002524:	4253      	negpl	r3, r2
 8002526:	490c      	ldr	r1, [pc, #48]	; (8002558 <main+0xbdc>)
 8002528:	0082      	lsls	r2, r0, #2
 800252a:	440a      	add	r2, r1
 800252c:	4413      	add	r3, r2
 800252e:	2200      	movs	r2, #0
 8002530:	701a      	strb	r2, [r3, #0]

					if(Elevator_Floor==1)
 8002532:	4b0b      	ldr	r3, [pc, #44]	; (8002560 <main+0xbe4>)
 8002534:	781b      	ldrb	r3, [r3, #0]
 8002536:	2b01      	cmp	r3, #1
 8002538:	d105      	bne.n	8002546 <main+0xbca>
					{
						Elevator(1);
 800253a:	2001      	movs	r0, #1
 800253c:	f000 fc66 	bl	8002e0c <Elevator>
						Elevator_Floor=0;
 8002540:	4b07      	ldr	r3, [pc, #28]	; (8002560 <main+0xbe4>)
 8002542:	2200      	movs	r2, #0
 8002544:	701a      	strb	r2, [r3, #0]
					}
				}


				Locker_Move_Flag=0;
 8002546:	4b03      	ldr	r3, [pc, #12]	; (8002554 <main+0xbd8>)
 8002548:	2200      	movs	r2, #0
 800254a:	701a      	strb	r2, [r3, #0]
		Server_Start();
 800254c:	f7ff ba34 	b.w	80019b8 <main+0x3c>
 8002550:	20000904 	.word	0x20000904
 8002554:	200008f0 	.word	0x200008f0
 8002558:	200008f4 	.word	0x200008f4
 800255c:	200008fc 	.word	0x200008fc
 8002560:	20000905 	.word	0x20000905
 8002564:	20000018 	.word	0x20000018

08002568 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8002568:	b580      	push	{r7, lr}
 800256a:	b094      	sub	sp, #80	; 0x50
 800256c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800256e:	f107 0320 	add.w	r3, r7, #32
 8002572:	2230      	movs	r2, #48	; 0x30
 8002574:	2100      	movs	r1, #0
 8002576:	4618      	mov	r0, r3
 8002578:	f003 fc38 	bl	8005dec <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800257c:	f107 030c 	add.w	r3, r7, #12
 8002580:	2200      	movs	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
 8002584:	605a      	str	r2, [r3, #4]
 8002586:	609a      	str	r2, [r3, #8]
 8002588:	60da      	str	r2, [r3, #12]
 800258a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800258c:	2300      	movs	r3, #0
 800258e:	60bb      	str	r3, [r7, #8]
 8002590:	4b28      	ldr	r3, [pc, #160]	; (8002634 <SystemClock_Config+0xcc>)
 8002592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002594:	4a27      	ldr	r2, [pc, #156]	; (8002634 <SystemClock_Config+0xcc>)
 8002596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800259a:	6413      	str	r3, [r2, #64]	; 0x40
 800259c:	4b25      	ldr	r3, [pc, #148]	; (8002634 <SystemClock_Config+0xcc>)
 800259e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80025a4:	60bb      	str	r3, [r7, #8]
 80025a6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80025a8:	2300      	movs	r3, #0
 80025aa:	607b      	str	r3, [r7, #4]
 80025ac:	4b22      	ldr	r3, [pc, #136]	; (8002638 <SystemClock_Config+0xd0>)
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a21      	ldr	r2, [pc, #132]	; (8002638 <SystemClock_Config+0xd0>)
 80025b2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80025b6:	6013      	str	r3, [r2, #0]
 80025b8:	4b1f      	ldr	r3, [pc, #124]	; (8002638 <SystemClock_Config+0xd0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80025c0:	607b      	str	r3, [r7, #4]
 80025c2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80025c4:	2301      	movs	r3, #1
 80025c6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80025c8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80025cc:	627b      	str	r3, [r7, #36]	; 0x24
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80025ce:	2302      	movs	r3, #2
 80025d0:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80025d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025d6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 4;
 80025d8:	2304      	movs	r3, #4
 80025da:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 168;
 80025dc:	23a8      	movs	r3, #168	; 0xa8
 80025de:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80025e0:	2302      	movs	r3, #2
 80025e2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80025e4:	2304      	movs	r3, #4
 80025e6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80025e8:	f107 0320 	add.w	r3, r7, #32
 80025ec:	4618      	mov	r0, r3
 80025ee:	f001 faa5 	bl	8003b3c <HAL_RCC_OscConfig>
 80025f2:	4603      	mov	r3, r0
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d001      	beq.n	80025fc <SystemClock_Config+0x94>
	{
		Error_Handler();
 80025f8:	f000 fcc0 	bl	8002f7c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80025fc:	230f      	movs	r3, #15
 80025fe:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8002600:	2302      	movs	r3, #2
 8002602:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8002604:	2300      	movs	r3, #0
 8002606:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8002608:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800260c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800260e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002612:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8002614:	f107 030c 	add.w	r3, r7, #12
 8002618:	2105      	movs	r1, #5
 800261a:	4618      	mov	r0, r3
 800261c:	f001 fd06 	bl	800402c <HAL_RCC_ClockConfig>
 8002620:	4603      	mov	r3, r0
 8002622:	2b00      	cmp	r3, #0
 8002624:	d001      	beq.n	800262a <SystemClock_Config+0xc2>
	{
		Error_Handler();
 8002626:	f000 fca9 	bl	8002f7c <Error_Handler>
	}
}
 800262a:	bf00      	nop
 800262c:	3750      	adds	r7, #80	; 0x50
 800262e:	46bd      	mov	sp, r7
 8002630:	bd80      	pop	{r7, pc}
 8002632:	bf00      	nop
 8002634:	40023800 	.word	0x40023800
 8002638:	40007000 	.word	0x40007000

0800263c <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b08e      	sub	sp, #56	; 0x38
 8002640:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8002642:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002646:	2200      	movs	r2, #0
 8002648:	601a      	str	r2, [r3, #0]
 800264a:	605a      	str	r2, [r3, #4]
 800264c:	609a      	str	r2, [r3, #8]
 800264e:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8002650:	f107 0320 	add.w	r3, r7, #32
 8002654:	2200      	movs	r2, #0
 8002656:	601a      	str	r2, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800265a:	1d3b      	adds	r3, r7, #4
 800265c:	2200      	movs	r2, #0
 800265e:	601a      	str	r2, [r3, #0]
 8002660:	605a      	str	r2, [r3, #4]
 8002662:	609a      	str	r2, [r3, #8]
 8002664:	60da      	str	r2, [r3, #12]
 8002666:	611a      	str	r2, [r3, #16]
 8002668:	615a      	str	r2, [r3, #20]
 800266a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800266c:	4b2d      	ldr	r3, [pc, #180]	; (8002724 <MX_TIM2_Init+0xe8>)
 800266e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002672:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 84-1;
 8002674:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <MX_TIM2_Init+0xe8>)
 8002676:	2253      	movs	r2, #83	; 0x53
 8002678:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800267a:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <MX_TIM2_Init+0xe8>)
 800267c:	2200      	movs	r2, #0
 800267e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 10000-1;
 8002680:	4b28      	ldr	r3, [pc, #160]	; (8002724 <MX_TIM2_Init+0xe8>)
 8002682:	f242 720f 	movw	r2, #9999	; 0x270f
 8002686:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002688:	4b26      	ldr	r3, [pc, #152]	; (8002724 <MX_TIM2_Init+0xe8>)
 800268a:	2200      	movs	r2, #0
 800268c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800268e:	4b25      	ldr	r3, [pc, #148]	; (8002724 <MX_TIM2_Init+0xe8>)
 8002690:	2200      	movs	r2, #0
 8002692:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8002694:	4823      	ldr	r0, [pc, #140]	; (8002724 <MX_TIM2_Init+0xe8>)
 8002696:	f001 fec5 	bl	8004424 <HAL_TIM_Base_Init>
 800269a:	4603      	mov	r3, r0
 800269c:	2b00      	cmp	r3, #0
 800269e:	d001      	beq.n	80026a4 <MX_TIM2_Init+0x68>
	{
		Error_Handler();
 80026a0:	f000 fc6c 	bl	8002f7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80026a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80026a8:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80026aa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80026ae:	4619      	mov	r1, r3
 80026b0:	481c      	ldr	r0, [pc, #112]	; (8002724 <MX_TIM2_Init+0xe8>)
 80026b2:	f002 fcd5 	bl	8005060 <HAL_TIM_ConfigClockSource>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <MX_TIM2_Init+0x84>
	{
		Error_Handler();
 80026bc:	f000 fc5e 	bl	8002f7c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80026c0:	4818      	ldr	r0, [pc, #96]	; (8002724 <MX_TIM2_Init+0xe8>)
 80026c2:	f001 ff9e 	bl	8004602 <HAL_TIM_PWM_Init>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d001      	beq.n	80026d0 <MX_TIM2_Init+0x94>
	{
		Error_Handler();
 80026cc:	f000 fc56 	bl	8002f7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80026d0:	2300      	movs	r3, #0
 80026d2:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80026d4:	2300      	movs	r3, #0
 80026d6:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80026d8:	f107 0320 	add.w	r3, r7, #32
 80026dc:	4619      	mov	r1, r3
 80026de:	4811      	ldr	r0, [pc, #68]	; (8002724 <MX_TIM2_Init+0xe8>)
 80026e0:	f003 f8b4 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 80026e4:	4603      	mov	r3, r0
 80026e6:	2b00      	cmp	r3, #0
 80026e8:	d001      	beq.n	80026ee <MX_TIM2_Init+0xb2>
	{
		Error_Handler();
 80026ea:	f000 fc47 	bl	8002f7c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80026ee:	2360      	movs	r3, #96	; 0x60
 80026f0:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 5000;
 80026f2:	f241 3388 	movw	r3, #5000	; 0x1388
 80026f6:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80026f8:	2300      	movs	r3, #0
 80026fa:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80026fc:	2300      	movs	r3, #0
 80026fe:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8002700:	1d3b      	adds	r3, r7, #4
 8002702:	2200      	movs	r2, #0
 8002704:	4619      	mov	r1, r3
 8002706:	4807      	ldr	r0, [pc, #28]	; (8002724 <MX_TIM2_Init+0xe8>)
 8002708:	f002 fbe8 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d001      	beq.n	8002716 <MX_TIM2_Init+0xda>
	{
		Error_Handler();
 8002712:	f000 fc33 	bl	8002f7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */
	HAL_TIM_MspPostInit(&htim2);
 8002716:	4803      	ldr	r0, [pc, #12]	; (8002724 <MX_TIM2_Init+0xe8>)
 8002718:	f000 fcb8 	bl	800308c <HAL_TIM_MspPostInit>

}
 800271c:	bf00      	nop
 800271e:	3738      	adds	r7, #56	; 0x38
 8002720:	46bd      	mov	sp, r7
 8002722:	bd80      	pop	{r7, pc}
 8002724:	20000a0c 	.word	0x20000a0c

08002728 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8002728:	b580      	push	{r7, lr}
 800272a:	b08e      	sub	sp, #56	; 0x38
 800272c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800272e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002732:	2200      	movs	r2, #0
 8002734:	601a      	str	r2, [r3, #0]
 8002736:	605a      	str	r2, [r3, #4]
 8002738:	609a      	str	r2, [r3, #8]
 800273a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800273c:	f107 0320 	add.w	r3, r7, #32
 8002740:	2200      	movs	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
 8002744:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8002746:	1d3b      	adds	r3, r7, #4
 8002748:	2200      	movs	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
 800274c:	605a      	str	r2, [r3, #4]
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	60da      	str	r2, [r3, #12]
 8002752:	611a      	str	r2, [r3, #16]
 8002754:	615a      	str	r2, [r3, #20]
 8002756:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8002758:	4b2c      	ldr	r3, [pc, #176]	; (800280c <MX_TIM3_Init+0xe4>)
 800275a:	4a2d      	ldr	r2, [pc, #180]	; (8002810 <MX_TIM3_Init+0xe8>)
 800275c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 84-1;
 800275e:	4b2b      	ldr	r3, [pc, #172]	; (800280c <MX_TIM3_Init+0xe4>)
 8002760:	2253      	movs	r2, #83	; 0x53
 8002762:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002764:	4b29      	ldr	r3, [pc, #164]	; (800280c <MX_TIM3_Init+0xe4>)
 8002766:	2200      	movs	r2, #0
 8002768:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 250-1;
 800276a:	4b28      	ldr	r3, [pc, #160]	; (800280c <MX_TIM3_Init+0xe4>)
 800276c:	22f9      	movs	r2, #249	; 0xf9
 800276e:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8002770:	4b26      	ldr	r3, [pc, #152]	; (800280c <MX_TIM3_Init+0xe4>)
 8002772:	2200      	movs	r2, #0
 8002774:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002776:	4b25      	ldr	r3, [pc, #148]	; (800280c <MX_TIM3_Init+0xe4>)
 8002778:	2200      	movs	r2, #0
 800277a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800277c:	4823      	ldr	r0, [pc, #140]	; (800280c <MX_TIM3_Init+0xe4>)
 800277e:	f001 fe51 	bl	8004424 <HAL_TIM_Base_Init>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d001      	beq.n	800278c <MX_TIM3_Init+0x64>
	{
		Error_Handler();
 8002788:	f000 fbf8 	bl	8002f7c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800278c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002790:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8002792:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002796:	4619      	mov	r1, r3
 8002798:	481c      	ldr	r0, [pc, #112]	; (800280c <MX_TIM3_Init+0xe4>)
 800279a:	f002 fc61 	bl	8005060 <HAL_TIM_ConfigClockSource>
 800279e:	4603      	mov	r3, r0
 80027a0:	2b00      	cmp	r3, #0
 80027a2:	d001      	beq.n	80027a8 <MX_TIM3_Init+0x80>
	{
		Error_Handler();
 80027a4:	f000 fbea 	bl	8002f7c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80027a8:	4818      	ldr	r0, [pc, #96]	; (800280c <MX_TIM3_Init+0xe4>)
 80027aa:	f001 ff2a 	bl	8004602 <HAL_TIM_PWM_Init>
 80027ae:	4603      	mov	r3, r0
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d001      	beq.n	80027b8 <MX_TIM3_Init+0x90>
	{
		Error_Handler();
 80027b4:	f000 fbe2 	bl	8002f7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80027b8:	2300      	movs	r3, #0
 80027ba:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80027bc:	2300      	movs	r3, #0
 80027be:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80027c0:	f107 0320 	add.w	r3, r7, #32
 80027c4:	4619      	mov	r1, r3
 80027c6:	4811      	ldr	r0, [pc, #68]	; (800280c <MX_TIM3_Init+0xe4>)
 80027c8:	f003 f840 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 80027cc:	4603      	mov	r3, r0
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d001      	beq.n	80027d6 <MX_TIM3_Init+0xae>
	{
		Error_Handler();
 80027d2:	f000 fbd3 	bl	8002f7c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80027d6:	2360      	movs	r3, #96	; 0x60
 80027d8:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 125-1;
 80027da:	237c      	movs	r3, #124	; 0x7c
 80027dc:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80027de:	2300      	movs	r3, #0
 80027e0:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80027e2:	2300      	movs	r3, #0
 80027e4:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80027e6:	1d3b      	adds	r3, r7, #4
 80027e8:	2200      	movs	r2, #0
 80027ea:	4619      	mov	r1, r3
 80027ec:	4807      	ldr	r0, [pc, #28]	; (800280c <MX_TIM3_Init+0xe4>)
 80027ee:	f002 fb75 	bl	8004edc <HAL_TIM_PWM_ConfigChannel>
 80027f2:	4603      	mov	r3, r0
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d001      	beq.n	80027fc <MX_TIM3_Init+0xd4>
	{
		Error_Handler();
 80027f8:	f000 fbc0 	bl	8002f7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80027fc:	4803      	ldr	r0, [pc, #12]	; (800280c <MX_TIM3_Init+0xe4>)
 80027fe:	f000 fc45 	bl	800308c <HAL_TIM_MspPostInit>

}
 8002802:	bf00      	nop
 8002804:	3738      	adds	r7, #56	; 0x38
 8002806:	46bd      	mov	sp, r7
 8002808:	bd80      	pop	{r7, pc}
 800280a:	bf00      	nop
 800280c:	2000097c 	.word	0x2000097c
 8002810:	40000400 	.word	0x40000400

08002814 <MX_TIM6_Init>:
 * @brief TIM6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM6_Init(void)
{
 8002814:	b580      	push	{r7, lr}
 8002816:	b082      	sub	sp, #8
 8002818:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM6_Init 0 */

	/* USER CODE END TIM6_Init 0 */

	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800281a:	463b      	mov	r3, r7
 800281c:	2200      	movs	r2, #0
 800281e:	601a      	str	r2, [r3, #0]
 8002820:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM6_Init 1 */

	/* USER CODE END TIM6_Init 1 */
	htim6.Instance = TIM6;
 8002822:	4b15      	ldr	r3, [pc, #84]	; (8002878 <MX_TIM6_Init+0x64>)
 8002824:	4a15      	ldr	r2, [pc, #84]	; (800287c <MX_TIM6_Init+0x68>)
 8002826:	601a      	str	r2, [r3, #0]
	htim6.Init.Prescaler = 8400-1;
 8002828:	4b13      	ldr	r3, [pc, #76]	; (8002878 <MX_TIM6_Init+0x64>)
 800282a:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800282e:	605a      	str	r2, [r3, #4]
	htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002830:	4b11      	ldr	r3, [pc, #68]	; (8002878 <MX_TIM6_Init+0x64>)
 8002832:	2200      	movs	r2, #0
 8002834:	609a      	str	r2, [r3, #8]
	htim6.Init.Period = 10-1;
 8002836:	4b10      	ldr	r3, [pc, #64]	; (8002878 <MX_TIM6_Init+0x64>)
 8002838:	2209      	movs	r2, #9
 800283a:	60da      	str	r2, [r3, #12]
	htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800283c:	4b0e      	ldr	r3, [pc, #56]	; (8002878 <MX_TIM6_Init+0x64>)
 800283e:	2200      	movs	r2, #0
 8002840:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8002842:	480d      	ldr	r0, [pc, #52]	; (8002878 <MX_TIM6_Init+0x64>)
 8002844:	f001 fdee 	bl	8004424 <HAL_TIM_Base_Init>
 8002848:	4603      	mov	r3, r0
 800284a:	2b00      	cmp	r3, #0
 800284c:	d001      	beq.n	8002852 <MX_TIM6_Init+0x3e>
	{
		Error_Handler();
 800284e:	f000 fb95 	bl	8002f7c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002852:	2300      	movs	r3, #0
 8002854:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002856:	2300      	movs	r3, #0
 8002858:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800285a:	463b      	mov	r3, r7
 800285c:	4619      	mov	r1, r3
 800285e:	4806      	ldr	r0, [pc, #24]	; (8002878 <MX_TIM6_Init+0x64>)
 8002860:	f002 fff4 	bl	800584c <HAL_TIMEx_MasterConfigSynchronization>
 8002864:	4603      	mov	r3, r0
 8002866:	2b00      	cmp	r3, #0
 8002868:	d001      	beq.n	800286e <MX_TIM6_Init+0x5a>
	{
		Error_Handler();
 800286a:	f000 fb87 	bl	8002f7c <Error_Handler>
	}
	/* USER CODE BEGIN TIM6_Init 2 */

	/* USER CODE END TIM6_Init 2 */

}
 800286e:	bf00      	nop
 8002870:	3708      	adds	r7, #8
 8002872:	46bd      	mov	sp, r7
 8002874:	bd80      	pop	{r7, pc}
 8002876:	bf00      	nop
 8002878:	200009c4 	.word	0x200009c4
 800287c:	40001000 	.word	0x40001000

08002880 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8002884:	4b11      	ldr	r3, [pc, #68]	; (80028cc <MX_USART2_UART_Init+0x4c>)
 8002886:	4a12      	ldr	r2, [pc, #72]	; (80028d0 <MX_USART2_UART_Init+0x50>)
 8002888:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800288a:	4b10      	ldr	r3, [pc, #64]	; (80028cc <MX_USART2_UART_Init+0x4c>)
 800288c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002890:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002892:	4b0e      	ldr	r3, [pc, #56]	; (80028cc <MX_USART2_UART_Init+0x4c>)
 8002894:	2200      	movs	r2, #0
 8002896:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 8002898:	4b0c      	ldr	r3, [pc, #48]	; (80028cc <MX_USART2_UART_Init+0x4c>)
 800289a:	2200      	movs	r2, #0
 800289c:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 800289e:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <MX_USART2_UART_Init+0x4c>)
 80028a0:	2200      	movs	r2, #0
 80028a2:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80028a4:	4b09      	ldr	r3, [pc, #36]	; (80028cc <MX_USART2_UART_Init+0x4c>)
 80028a6:	220c      	movs	r2, #12
 80028a8:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028aa:	4b08      	ldr	r3, [pc, #32]	; (80028cc <MX_USART2_UART_Init+0x4c>)
 80028ac:	2200      	movs	r2, #0
 80028ae:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80028b0:	4b06      	ldr	r3, [pc, #24]	; (80028cc <MX_USART2_UART_Init+0x4c>)
 80028b2:	2200      	movs	r2, #0
 80028b4:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80028b6:	4805      	ldr	r0, [pc, #20]	; (80028cc <MX_USART2_UART_Init+0x4c>)
 80028b8:	f003 f858 	bl	800596c <HAL_UART_Init>
 80028bc:	4603      	mov	r3, r0
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d001      	beq.n	80028c6 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80028c2:	f000 fb5b 	bl	8002f7c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80028c6:	bf00      	nop
 80028c8:	bd80      	pop	{r7, pc}
 80028ca:	bf00      	nop
 80028cc:	20000a54 	.word	0x20000a54
 80028d0:	40004400 	.word	0x40004400

080028d4 <MX_USART3_UART_Init>:
 * @brief USART3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART3_UART_Init(void)
{
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART3_Init 0 */

	/* USER CODE BEGIN USART3_Init 1 */

	/* USER CODE END USART3_Init 1 */
	huart3.Instance = USART3;
 80028d8:	4b11      	ldr	r3, [pc, #68]	; (8002920 <MX_USART3_UART_Init+0x4c>)
 80028da:	4a12      	ldr	r2, [pc, #72]	; (8002924 <MX_USART3_UART_Init+0x50>)
 80028dc:	601a      	str	r2, [r3, #0]
	huart3.Init.BaudRate = 115200;
 80028de:	4b10      	ldr	r3, [pc, #64]	; (8002920 <MX_USART3_UART_Init+0x4c>)
 80028e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80028e4:	605a      	str	r2, [r3, #4]
	huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80028e6:	4b0e      	ldr	r3, [pc, #56]	; (8002920 <MX_USART3_UART_Init+0x4c>)
 80028e8:	2200      	movs	r2, #0
 80028ea:	609a      	str	r2, [r3, #8]
	huart3.Init.StopBits = UART_STOPBITS_1;
 80028ec:	4b0c      	ldr	r3, [pc, #48]	; (8002920 <MX_USART3_UART_Init+0x4c>)
 80028ee:	2200      	movs	r2, #0
 80028f0:	60da      	str	r2, [r3, #12]
	huart3.Init.Parity = UART_PARITY_NONE;
 80028f2:	4b0b      	ldr	r3, [pc, #44]	; (8002920 <MX_USART3_UART_Init+0x4c>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	611a      	str	r2, [r3, #16]
	huart3.Init.Mode = UART_MODE_TX_RX;
 80028f8:	4b09      	ldr	r3, [pc, #36]	; (8002920 <MX_USART3_UART_Init+0x4c>)
 80028fa:	220c      	movs	r2, #12
 80028fc:	615a      	str	r2, [r3, #20]
	huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80028fe:	4b08      	ldr	r3, [pc, #32]	; (8002920 <MX_USART3_UART_Init+0x4c>)
 8002900:	2200      	movs	r2, #0
 8002902:	619a      	str	r2, [r3, #24]
	huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002904:	4b06      	ldr	r3, [pc, #24]	; (8002920 <MX_USART3_UART_Init+0x4c>)
 8002906:	2200      	movs	r2, #0
 8002908:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart3) != HAL_OK)
 800290a:	4805      	ldr	r0, [pc, #20]	; (8002920 <MX_USART3_UART_Init+0x4c>)
 800290c:	f003 f82e 	bl	800596c <HAL_UART_Init>
 8002910:	4603      	mov	r3, r0
 8002912:	2b00      	cmp	r3, #0
 8002914:	d001      	beq.n	800291a <MX_USART3_UART_Init+0x46>
	{
		Error_Handler();
 8002916:	f000 fb31 	bl	8002f7c <Error_Handler>
	}
	/* USER CODE BEGIN USART3_Init 2 */

	/* USER CODE END USART3_Init 2 */

}
 800291a:	bf00      	nop
 800291c:	bd80      	pop	{r7, pc}
 800291e:	bf00      	nop
 8002920:	20000938 	.word	0x20000938
 8002924:	40004800 	.word	0x40004800

08002928 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	; 0x28
 800292c:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 800292e:	f107 0314 	add.w	r3, r7, #20
 8002932:	2200      	movs	r2, #0
 8002934:	601a      	str	r2, [r3, #0]
 8002936:	605a      	str	r2, [r3, #4]
 8002938:	609a      	str	r2, [r3, #8]
 800293a:	60da      	str	r2, [r3, #12]
 800293c:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	613b      	str	r3, [r7, #16]
 8002942:	4b58      	ldr	r3, [pc, #352]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a57      	ldr	r2, [pc, #348]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 8002948:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b55      	ldr	r3, [pc, #340]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002956:	613b      	str	r3, [r7, #16]
 8002958:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOC_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60fb      	str	r3, [r7, #12]
 800295e:	4b51      	ldr	r3, [pc, #324]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a50      	ldr	r2, [pc, #320]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 8002964:	f043 0304 	orr.w	r3, r3, #4
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b4e      	ldr	r3, [pc, #312]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0304 	and.w	r3, r3, #4
 8002972:	60fb      	str	r3, [r7, #12]
 8002974:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8002976:	2300      	movs	r3, #0
 8002978:	60bb      	str	r3, [r7, #8]
 800297a:	4b4a      	ldr	r3, [pc, #296]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 800297c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800297e:	4a49      	ldr	r2, [pc, #292]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 8002980:	f043 0301 	orr.w	r3, r3, #1
 8002984:	6313      	str	r3, [r2, #48]	; 0x30
 8002986:	4b47      	ldr	r3, [pc, #284]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 8002988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	60bb      	str	r3, [r7, #8]
 8002990:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	607b      	str	r3, [r7, #4]
 8002996:	4b43      	ldr	r3, [pc, #268]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 8002998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800299a:	4a42      	ldr	r2, [pc, #264]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 800299c:	f043 0302 	orr.w	r3, r3, #2
 80029a0:	6313      	str	r3, [r2, #48]	; 0x30
 80029a2:	4b40      	ldr	r3, [pc, #256]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 80029a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029a6:	f003 0302 	and.w	r3, r3, #2
 80029aa:	607b      	str	r3, [r7, #4]
 80029ac:	687b      	ldr	r3, [r7, #4]
	__HAL_RCC_GPIOD_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	603b      	str	r3, [r7, #0]
 80029b2:	4b3c      	ldr	r3, [pc, #240]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a3b      	ldr	r2, [pc, #236]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 80029b8:	f043 0308 	orr.w	r3, r3, #8
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b39      	ldr	r3, [pc, #228]	; (8002aa4 <MX_GPIO_Init+0x17c>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f003 0308 	and.w	r3, r3, #8
 80029c6:	603b      	str	r3, [r7, #0]
 80029c8:	683b      	ldr	r3, [r7, #0]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOC, Wheel_Right_DIR_Pin|Wheel_Left_DIR_Pin, GPIO_PIN_RESET);
 80029ca:	2200      	movs	r2, #0
 80029cc:	2109      	movs	r1, #9
 80029ce:	4836      	ldr	r0, [pc, #216]	; (8002aa8 <MX_GPIO_Init+0x180>)
 80029d0:	f001 f868 	bl	8003aa4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, GPIO_PIN_SET);
 80029d4:	2201      	movs	r2, #1
 80029d6:	2110      	movs	r1, #16
 80029d8:	4834      	ldr	r0, [pc, #208]	; (8002aac <MX_GPIO_Init+0x184>)
 80029da:	f001 f863 	bl	8003aa4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_0|LM_ENR_Pin|LM_DIR_Pin|GPIO_PIN_7, GPIO_PIN_RESET);
 80029de:	2200      	movs	r2, #0
 80029e0:	2199      	movs	r1, #153	; 0x99
 80029e2:	4833      	ldr	r0, [pc, #204]	; (8002ab0 <MX_GPIO_Init+0x188>)
 80029e4:	f001 f85e 	bl	8003aa4 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : Wheel_Right_DIR_Pin Wheel_Left_DIR_Pin */
	GPIO_InitStruct.Pin = Wheel_Right_DIR_Pin|Wheel_Left_DIR_Pin;
 80029e8:	2309      	movs	r3, #9
 80029ea:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80029ec:	2301      	movs	r3, #1
 80029ee:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029f0:	2300      	movs	r3, #0
 80029f2:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029f4:	2300      	movs	r3, #0
 80029f6:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80029f8:	f107 0314 	add.w	r3, r7, #20
 80029fc:	4619      	mov	r1, r3
 80029fe:	482a      	ldr	r0, [pc, #168]	; (8002aa8 <MX_GPIO_Init+0x180>)
 8002a00:	f000 fea4 	bl	800374c <HAL_GPIO_Init>

	/*Configure GPIO pin : RELAY_Pin */
	GPIO_InitStruct.Pin = RELAY_Pin;
 8002a04:	2310      	movs	r3, #16
 8002a06:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a08:	2301      	movs	r3, #1
 8002a0a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a0c:	2300      	movs	r3, #0
 8002a0e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a10:	2303      	movs	r3, #3
 8002a12:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(RELAY_GPIO_Port, &GPIO_InitStruct);
 8002a14:	f107 0314 	add.w	r3, r7, #20
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4824      	ldr	r0, [pc, #144]	; (8002aac <MX_GPIO_Init+0x184>)
 8002a1c:	f000 fe96 	bl	800374c <HAL_GPIO_Init>

	/*Configure GPIO pins : PB0 LM_ENR_Pin LM_DIR_Pin */
	GPIO_InitStruct.Pin = GPIO_PIN_0|LM_ENR_Pin|LM_DIR_Pin;
 8002a20:	2319      	movs	r3, #25
 8002a22:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a24:	2301      	movs	r3, #1
 8002a26:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a28:	2300      	movs	r3, #0
 8002a2a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2c:	2303      	movs	r3, #3
 8002a2e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a30:	f107 0314 	add.w	r3, r7, #20
 8002a34:	4619      	mov	r1, r3
 8002a36:	481e      	ldr	r0, [pc, #120]	; (8002ab0 <MX_GPIO_Init+0x188>)
 8002a38:	f000 fe88 	bl	800374c <HAL_GPIO_Init>

	/*Configure GPIO pin : BOOT1_Pin */
	GPIO_InitStruct.Pin = BOOT1_Pin;
 8002a3c:	2304      	movs	r3, #4
 8002a3e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002a40:	2300      	movs	r3, #0
 8002a42:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a44:	2300      	movs	r3, #0
 8002a46:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8002a48:	f107 0314 	add.w	r3, r7, #20
 8002a4c:	4619      	mov	r1, r3
 8002a4e:	4818      	ldr	r0, [pc, #96]	; (8002ab0 <MX_GPIO_Init+0x188>)
 8002a50:	f000 fe7c 	bl	800374c <HAL_GPIO_Init>

	/*Configure GPIO pin : limit_Pin */
	GPIO_InitStruct.Pin = limit_Pin;
 8002a54:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002a58:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002a5a:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8002a5e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a60:	2300      	movs	r3, #0
 8002a62:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(limit_GPIO_Port, &GPIO_InitStruct);
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4811      	ldr	r0, [pc, #68]	; (8002ab0 <MX_GPIO_Init+0x188>)
 8002a6c:	f000 fe6e 	bl	800374c <HAL_GPIO_Init>

	/*Configure GPIO pin : PB7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002a70:	2380      	movs	r3, #128	; 0x80
 8002a72:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8002a74:	2301      	movs	r3, #1
 8002a76:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a80:	f107 0314 	add.w	r3, r7, #20
 8002a84:	4619      	mov	r1, r3
 8002a86:	480a      	ldr	r0, [pc, #40]	; (8002ab0 <MX_GPIO_Init+0x188>)
 8002a88:	f000 fe60 	bl	800374c <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8002a8c:	2200      	movs	r2, #0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	2028      	movs	r0, #40	; 0x28
 8002a92:	f000 fe24 	bl	80036de <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8002a96:	2028      	movs	r0, #40	; 0x28
 8002a98:	f000 fe3d 	bl	8003716 <HAL_NVIC_EnableIRQ>

}
 8002a9c:	bf00      	nop
 8002a9e:	3728      	adds	r7, #40	; 0x28
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	bd80      	pop	{r7, pc}
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	40020800 	.word	0x40020800
 8002aac:	40020000 	.word	0x40020000
 8002ab0:	40020400 	.word	0x40020400

08002ab4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	b082      	sub	sp, #8
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin==limit_Pin)
 8002abe:	88fb      	ldrh	r3, [r7, #6]
 8002ac0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002ac4:	d10b      	bne.n	8002ade <HAL_GPIO_EXTI_Callback+0x2a>
	{
		if(Limit_Cnt==0)
 8002ac6:	4b08      	ldr	r3, [pc, #32]	; (8002ae8 <HAL_GPIO_EXTI_Callback+0x34>)
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d103      	bne.n	8002ad6 <HAL_GPIO_EXTI_Callback+0x22>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002ace:	2100      	movs	r1, #0
 8002ad0:	4806      	ldr	r0, [pc, #24]	; (8002aec <HAL_GPIO_EXTI_Callback+0x38>)
 8002ad2:	f001 feb7 	bl	8004844 <HAL_TIM_PWM_Stop>
		HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7);
 8002ad6:	2181      	movs	r1, #129	; 0x81
 8002ad8:	4805      	ldr	r0, [pc, #20]	; (8002af0 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002ada:	f000 fffc 	bl	8003ad6 <HAL_GPIO_TogglePin>
	}
}
 8002ade:	bf00      	nop
 8002ae0:	3708      	adds	r7, #8
 8002ae2:	46bd      	mov	sp, r7
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200008e8 	.word	0x200008e8
 8002aec:	20000a0c 	.word	0x20000a0c
 8002af0:	40020400 	.word	0x40020400

08002af4 <LM_Guide_ENA>:
void LM_Guide_ENA(int ena)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
	if(ena)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d005      	beq.n	8002b0e <LM_Guide_ENA+0x1a>
		HAL_GPIO_WritePin(LM_ENR_GPIO_Port, LM_ENR_Pin, LM_ENA_Yes);
 8002b02:	2200      	movs	r2, #0
 8002b04:	2108      	movs	r1, #8
 8002b06:	4808      	ldr	r0, [pc, #32]	; (8002b28 <LM_Guide_ENA+0x34>)
 8002b08:	f000 ffcc 	bl	8003aa4 <HAL_GPIO_WritePin>
	else if(ena==0)
		HAL_GPIO_WritePin(LM_ENR_GPIO_Port, LM_ENR_Pin, LM_ENA_No);
}
 8002b0c:	e007      	b.n	8002b1e <LM_Guide_ENA+0x2a>
	else if(ena==0)
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d104      	bne.n	8002b1e <LM_Guide_ENA+0x2a>
		HAL_GPIO_WritePin(LM_ENR_GPIO_Port, LM_ENR_Pin, LM_ENA_No);
 8002b14:	2201      	movs	r2, #1
 8002b16:	2108      	movs	r1, #8
 8002b18:	4803      	ldr	r0, [pc, #12]	; (8002b28 <LM_Guide_ENA+0x34>)
 8002b1a:	f000 ffc3 	bl	8003aa4 <HAL_GPIO_WritePin>
}
 8002b1e:	bf00      	nop
 8002b20:	3708      	adds	r7, #8
 8002b22:	46bd      	mov	sp, r7
 8002b24:	bd80      	pop	{r7, pc}
 8002b26:	bf00      	nop
 8002b28:	40020400 	.word	0x40020400

08002b2c <LM_Guide_DIR>:

void LM_Guide_DIR(int dir)
{
 8002b2c:	b580      	push	{r7, lr}
 8002b2e:	b082      	sub	sp, #8
 8002b30:	af00      	add	r7, sp, #0
 8002b32:	6078      	str	r0, [r7, #4]
	if(dir)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d005      	beq.n	8002b46 <LM_Guide_DIR+0x1a>
		HAL_GPIO_WritePin(LM_DIR_GPIO_Port, LM_DIR_Pin, GPIO_PIN_SET);
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	2110      	movs	r1, #16
 8002b3e:	4808      	ldr	r0, [pc, #32]	; (8002b60 <LM_Guide_DIR+0x34>)
 8002b40:	f000 ffb0 	bl	8003aa4 <HAL_GPIO_WritePin>
	else if(dir == 0)
		HAL_GPIO_WritePin(LM_DIR_GPIO_Port, LM_DIR_Pin, GPIO_PIN_RESET);
}
 8002b44:	e007      	b.n	8002b56 <LM_Guide_DIR+0x2a>
	else if(dir == 0)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d104      	bne.n	8002b56 <LM_Guide_DIR+0x2a>
		HAL_GPIO_WritePin(LM_DIR_GPIO_Port, LM_DIR_Pin, GPIO_PIN_RESET);
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	2110      	movs	r1, #16
 8002b50:	4803      	ldr	r0, [pc, #12]	; (8002b60 <LM_Guide_DIR+0x34>)
 8002b52:	f000 ffa7 	bl	8003aa4 <HAL_GPIO_WritePin>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}
 8002b5e:	bf00      	nop
 8002b60:	40020400 	.word	0x40020400

08002b64 <LM_Guide_Move>:

void LM_Guide_Move(int LM_Position_Goal,int Magnet)
{
 8002b64:	b580      	push	{r7, lr}
 8002b66:	b084      	sub	sp, #16
 8002b68:	af00      	add	r7, sp, #0
 8002b6a:	6078      	str	r0, [r7, #4]
 8002b6c:	6039      	str	r1, [r7, #0]
	int dir;
	int distance_to_move;

	distance_to_move = LM_Position_Goal - LM_Position;
 8002b6e:	687a      	ldr	r2, [r7, #4]
 8002b70:	4b36      	ldr	r3, [pc, #216]	; (8002c4c <LM_Guide_Move+0xe8>)
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	1ad3      	subs	r3, r2, r3
 8002b76:	60bb      	str	r3, [r7, #8]
	if(LM_Position_Goal >= 320)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8002b7e:	db02      	blt.n	8002b86 <LM_Guide_Move+0x22>
		LM_Position_Goal = 320;
 8002b80:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8002b84:	607b      	str	r3, [r7, #4]
	if(LM_Position_Goal <= 0)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	dc01      	bgt.n	8002b90 <LM_Guide_Move+0x2c>
		LM_Position_Goal = 0;
 8002b8c:	2300      	movs	r3, #0
 8002b8e:	607b      	str	r3, [r7, #4]


	LM_Position += distance_to_move;
 8002b90:	4b2e      	ldr	r3, [pc, #184]	; (8002c4c <LM_Guide_Move+0xe8>)
 8002b92:	681a      	ldr	r2, [r3, #0]
 8002b94:	68bb      	ldr	r3, [r7, #8]
 8002b96:	4413      	add	r3, r2
 8002b98:	4a2c      	ldr	r2, [pc, #176]	; (8002c4c <LM_Guide_Move+0xe8>)
 8002b9a:	6013      	str	r3, [r2, #0]
	if(distance_to_move>0)
 8002b9c:	68bb      	ldr	r3, [r7, #8]
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	dd02      	ble.n	8002ba8 <LM_Guide_Move+0x44>
		dir=1;
 8002ba2:	2301      	movs	r3, #1
 8002ba4:	60fb      	str	r3, [r7, #12]
 8002ba6:	e004      	b.n	8002bb2 <LM_Guide_Move+0x4e>
	else
	{
		dir=0;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	60fb      	str	r3, [r7, #12]
		distance_to_move *= -1;
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	425b      	negs	r3, r3
 8002bb0:	60bb      	str	r3, [r7, #8]
	}


	LM_Guide_ENA(1);
 8002bb2:	2001      	movs	r0, #1
 8002bb4:	f7ff ff9e 	bl	8002af4 <LM_Guide_ENA>
	LM_Guide_DIR(dir);
 8002bb8:	68f8      	ldr	r0, [r7, #12]
 8002bba:	f7ff ffb7 	bl	8002b2c <LM_Guide_DIR>
	TIM3->CCR1 = 125;
 8002bbe:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <LM_Guide_Move+0xec>)
 8002bc0:	227d      	movs	r2, #125	; 0x7d
 8002bc2:	635a      	str	r2, [r3, #52]	; 0x34
	LM_Guide_Step = 8500 * distance_to_move / 320;
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f242 1234 	movw	r2, #8500	; 0x2134
 8002bca:	fb02 f303 	mul.w	r3, r2, r3
 8002bce:	4a21      	ldr	r2, [pc, #132]	; (8002c54 <LM_Guide_Move+0xf0>)
 8002bd0:	fb82 1203 	smull	r1, r2, r2, r3
 8002bd4:	11d2      	asrs	r2, r2, #7
 8002bd6:	17db      	asrs	r3, r3, #31
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	461a      	mov	r2, r3
 8002bdc:	4b1e      	ldr	r3, [pc, #120]	; (8002c58 <LM_Guide_Move+0xf4>)
 8002bde:	601a      	str	r2, [r3, #0]


	HAL_TIM_PWM_Start_IT(&htim3, TIM_CHANNEL_1);
 8002be0:	2100      	movs	r1, #0
 8002be2:	481e      	ldr	r0, [pc, #120]	; (8002c5c <LM_Guide_Move+0xf8>)
 8002be4:	f001 fe9e 	bl	8004924 <HAL_TIM_PWM_Start_IT>



	if(Magnet==Relay_ON)
 8002be8:	683b      	ldr	r3, [r7, #0]
 8002bea:	2b01      	cmp	r3, #1
 8002bec:	d111      	bne.n	8002c12 <LM_Guide_Move+0xae>
	{
		HAL_Delay( (LM_Guide_Step/4) - 500 );
 8002bee:	4b1a      	ldr	r3, [pc, #104]	; (8002c58 <LM_Guide_Move+0xf4>)
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	089b      	lsrs	r3, r3, #2
 8002bf4:	f5a3 73fa 	sub.w	r3, r3, #500	; 0x1f4
 8002bf8:	4618      	mov	r0, r3
 8002bfa:	f000 fc71 	bl	80034e0 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 1);
 8002bfe:	2201      	movs	r2, #1
 8002c00:	2110      	movs	r1, #16
 8002c02:	4817      	ldr	r0, [pc, #92]	; (8002c60 <LM_Guide_Move+0xfc>)
 8002c04:	f000 ff4e 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_Delay(1500);
 8002c08:	f240 50dc 	movw	r0, #1500	; 0x5dc
 8002c0c:	f000 fc68 	bl	80034e0 <HAL_Delay>
	}
	else
	{
		HAL_Delay( (LM_Guide_Step/4) );
	}
}
 8002c10:	e018      	b.n	8002c44 <LM_Guide_Move+0xe0>
	else if(Magnet==Relay_OFF)
 8002c12:	683b      	ldr	r3, [r7, #0]
 8002c14:	2b02      	cmp	r3, #2
 8002c16:	d10f      	bne.n	8002c38 <LM_Guide_Move+0xd4>
		HAL_Delay( (LM_Guide_Step/4) );
 8002c18:	4b0f      	ldr	r3, [pc, #60]	; (8002c58 <LM_Guide_Move+0xf4>)
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	089b      	lsrs	r3, r3, #2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f000 fc5e 	bl	80034e0 <HAL_Delay>
		HAL_GPIO_WritePin(RELAY_GPIO_Port, RELAY_Pin, 0);
 8002c24:	2200      	movs	r2, #0
 8002c26:	2110      	movs	r1, #16
 8002c28:	480d      	ldr	r0, [pc, #52]	; (8002c60 <LM_Guide_Move+0xfc>)
 8002c2a:	f000 ff3b 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_Delay(2000);
 8002c2e:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8002c32:	f000 fc55 	bl	80034e0 <HAL_Delay>
}
 8002c36:	e005      	b.n	8002c44 <LM_Guide_Move+0xe0>
		HAL_Delay( (LM_Guide_Step/4) );
 8002c38:	4b07      	ldr	r3, [pc, #28]	; (8002c58 <LM_Guide_Move+0xf4>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	089b      	lsrs	r3, r3, #2
 8002c3e:	4618      	mov	r0, r3
 8002c40:	f000 fc4e 	bl	80034e0 <HAL_Delay>
}
 8002c44:	bf00      	nop
 8002c46:	3710      	adds	r7, #16
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}
 8002c4c:	200008ec 	.word	0x200008ec
 8002c50:	40000400 	.word	0x40000400
 8002c54:	66666667 	.word	0x66666667
 8002c58:	200008e4 	.word	0x200008e4
 8002c5c:	2000097c 	.word	0x2000097c
 8002c60:	40020000 	.word	0x40020000

08002c64 <Wheel_DIR>:

void Wheel_DIR(int dir)
{
 8002c64:	b580      	push	{r7, lr}
 8002c66:	b082      	sub	sp, #8
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
	if(dir)
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	d00a      	beq.n	8002c88 <Wheel_DIR+0x24>
	{
		HAL_GPIO_WritePin(Wheel_Right_DIR_GPIO_Port, Wheel_Right_DIR_Pin, Wheel_Right_Go);
 8002c72:	2201      	movs	r2, #1
 8002c74:	2101      	movs	r1, #1
 8002c76:	480d      	ldr	r0, [pc, #52]	; (8002cac <Wheel_DIR+0x48>)
 8002c78:	f000 ff14 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Wheel_Left_DIR_GPIO_Port, Wheel_Left_DIR_Pin, Wheel_Left_Go);
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	2108      	movs	r1, #8
 8002c80:	480a      	ldr	r0, [pc, #40]	; (8002cac <Wheel_DIR+0x48>)
 8002c82:	f000 ff0f 	bl	8003aa4 <HAL_GPIO_WritePin>
	else if(dir==0)
	{
		HAL_GPIO_WritePin(Wheel_Right_DIR_GPIO_Port, Wheel_Right_DIR_Pin, Wheel_Right_Back);
		HAL_GPIO_WritePin(Wheel_Left_DIR_GPIO_Port, Wheel_Left_DIR_Pin, Wheel_Left_Back);
	}
}
 8002c86:	e00c      	b.n	8002ca2 <Wheel_DIR+0x3e>
	else if(dir==0)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d109      	bne.n	8002ca2 <Wheel_DIR+0x3e>
		HAL_GPIO_WritePin(Wheel_Right_DIR_GPIO_Port, Wheel_Right_DIR_Pin, Wheel_Right_Back);
 8002c8e:	2200      	movs	r2, #0
 8002c90:	2101      	movs	r1, #1
 8002c92:	4806      	ldr	r0, [pc, #24]	; (8002cac <Wheel_DIR+0x48>)
 8002c94:	f000 ff06 	bl	8003aa4 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Wheel_Left_DIR_GPIO_Port, Wheel_Left_DIR_Pin, Wheel_Left_Back);
 8002c98:	2200      	movs	r2, #0
 8002c9a:	2108      	movs	r1, #8
 8002c9c:	4803      	ldr	r0, [pc, #12]	; (8002cac <Wheel_DIR+0x48>)
 8002c9e:	f000 ff01 	bl	8003aa4 <HAL_GPIO_WritePin>
}
 8002ca2:	bf00      	nop
 8002ca4:	3708      	adds	r7, #8
 8002ca6:	46bd      	mov	sp, r7
 8002ca8:	bd80      	pop	{r7, pc}
 8002caa:	bf00      	nop
 8002cac:	40020800 	.word	0x40020800

08002cb0 <TUK_Locker_Car_Move_Delay>:
	Car_Time=Car_Move_Delay;
	HAL_TIM_Base_Start_IT(&htim6);

}
void TUK_Locker_Car_Move_Delay(int Car_Move_Delay,int Speed, int Car_DIR,int Car_Stop)
{
 8002cb0:	b580      	push	{r7, lr}
 8002cb2:	b084      	sub	sp, #16
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	60f8      	str	r0, [r7, #12]
 8002cb8:	60b9      	str	r1, [r7, #8]
 8002cba:	607a      	str	r2, [r7, #4]
 8002cbc:	603b      	str	r3, [r7, #0]
	Wheel_DIR(Car_DIR);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ffd0 	bl	8002c64 <Wheel_DIR>

	if(Speed<0)
 8002cc4:	68bb      	ldr	r3, [r7, #8]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	da01      	bge.n	8002cce <TUK_Locker_Car_Move_Delay+0x1e>
		Speed=0;
 8002cca:	2300      	movs	r3, #0
 8002ccc:	60bb      	str	r3, [r7, #8]
	if(Speed>9999)
 8002cce:	68bb      	ldr	r3, [r7, #8]
 8002cd0:	f242 720f 	movw	r2, #9999	; 0x270f
 8002cd4:	4293      	cmp	r3, r2
 8002cd6:	dd02      	ble.n	8002cde <TUK_Locker_Car_Move_Delay+0x2e>
		Speed=9999;
 8002cd8:	f242 730f 	movw	r3, #9999	; 0x270f
 8002cdc:	60bb      	str	r3, [r7, #8]
	TIM2->CCR1 = Speed;
 8002cde:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002ce2:	68bb      	ldr	r3, [r7, #8]
 8002ce4:	6353      	str	r3, [r2, #52]	; 0x34


	HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8002ce6:	2100      	movs	r1, #0
 8002ce8:	4814      	ldr	r0, [pc, #80]	; (8002d3c <TUK_Locker_Car_Move_Delay+0x8c>)
 8002cea:	f001 fce3 	bl	80046b4 <HAL_TIM_PWM_Start>
	Limit_Cnt=1000;
 8002cee:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <TUK_Locker_Car_Move_Delay+0x90>)
 8002cf0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8002cf4:	601a      	str	r2, [r3, #0]
	if( Locker_Move_Flag == 2 || Locker_Move_Flag == 4  || Locker_Move_Flag == 6  || Locker_Move_Flag == 8 )
 8002cf6:	4b13      	ldr	r3, [pc, #76]	; (8002d44 <TUK_Locker_Car_Move_Delay+0x94>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b02      	cmp	r3, #2
 8002cfc:	d00b      	beq.n	8002d16 <TUK_Locker_Car_Move_Delay+0x66>
 8002cfe:	4b11      	ldr	r3, [pc, #68]	; (8002d44 <TUK_Locker_Car_Move_Delay+0x94>)
 8002d00:	781b      	ldrb	r3, [r3, #0]
 8002d02:	2b04      	cmp	r3, #4
 8002d04:	d007      	beq.n	8002d16 <TUK_Locker_Car_Move_Delay+0x66>
 8002d06:	4b0f      	ldr	r3, [pc, #60]	; (8002d44 <TUK_Locker_Car_Move_Delay+0x94>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b06      	cmp	r3, #6
 8002d0c:	d003      	beq.n	8002d16 <TUK_Locker_Car_Move_Delay+0x66>
 8002d0e:	4b0d      	ldr	r3, [pc, #52]	; (8002d44 <TUK_Locker_Car_Move_Delay+0x94>)
 8002d10:	781b      	ldrb	r3, [r3, #0]
 8002d12:	2b08      	cmp	r3, #8
 8002d14:	d103      	bne.n	8002d1e <TUK_Locker_Car_Move_Delay+0x6e>
	{
		Limit_Cnt=2500;
 8002d16:	4b0a      	ldr	r3, [pc, #40]	; (8002d40 <TUK_Locker_Car_Move_Delay+0x90>)
 8002d18:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002d1c:	601a      	str	r2, [r3, #0]

	}
	Car_Time=Car_Move_Delay;
 8002d1e:	4a0a      	ldr	r2, [pc, #40]	; (8002d48 <TUK_Locker_Car_Move_Delay+0x98>)
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	6013      	str	r3, [r2, #0]
	HAL_TIM_Base_Start_IT(&htim6);
 8002d24:	4809      	ldr	r0, [pc, #36]	; (8002d4c <TUK_Locker_Car_Move_Delay+0x9c>)
 8002d26:	f001 fbcd 	bl	80044c4 <HAL_TIM_Base_Start_IT>
	HAL_Delay(Car_Stop);
 8002d2a:	683b      	ldr	r3, [r7, #0]
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	f000 fbd7 	bl	80034e0 <HAL_Delay>
}
 8002d32:	bf00      	nop
 8002d34:	3710      	adds	r7, #16
 8002d36:	46bd      	mov	sp, r7
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	20000a0c 	.word	0x20000a0c
 8002d40:	200008e8 	.word	0x200008e8
 8002d44:	200008f0 	.word	0x200008f0
 8002d48:	20000014 	.word	0x20000014
 8002d4c:	200009c4 	.word	0x200009c4

08002d50 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002d50:	b580      	push	{r7, lr}
 8002d52:	b082      	sub	sp, #8
 8002d54:	af00      	add	r7, sp, #0
 8002d56:	6078      	str	r0, [r7, #4]

	if(htim->Instance==TIM6)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4a13      	ldr	r2, [pc, #76]	; (8002dac <HAL_TIM_PeriodElapsedCallback+0x5c>)
 8002d5e:	4293      	cmp	r3, r2
 8002d60:	d120      	bne.n	8002da4 <HAL_TIM_PeriodElapsedCallback+0x54>
	{
		if(Car_Time>0)
 8002d62:	4b13      	ldr	r3, [pc, #76]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002d64:	681b      	ldr	r3, [r3, #0]
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	dd0e      	ble.n	8002d88 <HAL_TIM_PeriodElapsedCallback+0x38>
		{
			Car_Time--;
 8002d6a:	4b11      	ldr	r3, [pc, #68]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	4a0f      	ldr	r2, [pc, #60]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002d72:	6013      	str	r3, [r2, #0]
			if(Limit_Cnt>0)
 8002d74:	4b0f      	ldr	r3, [pc, #60]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d013      	beq.n	8002da4 <HAL_TIM_PeriodElapsedCallback+0x54>
				Limit_Cnt--;
 8002d7c:	4b0d      	ldr	r3, [pc, #52]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	3b01      	subs	r3, #1
 8002d82:	4a0c      	ldr	r2, [pc, #48]	; (8002db4 <HAL_TIM_PeriodElapsedCallback+0x64>)
 8002d84:	6013      	str	r3, [r2, #0]





}
 8002d86:	e00d      	b.n	8002da4 <HAL_TIM_PeriodElapsedCallback+0x54>
		else if(Car_Time<=0)
 8002d88:	4b09      	ldr	r3, [pc, #36]	; (8002db0 <HAL_TIM_PeriodElapsedCallback+0x60>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	dc09      	bgt.n	8002da4 <HAL_TIM_PeriodElapsedCallback+0x54>
			LM_Guide_ENA(0);
 8002d90:	2000      	movs	r0, #0
 8002d92:	f7ff feaf 	bl	8002af4 <LM_Guide_ENA>
			HAL_TIM_PWM_Stop(&htim2, TIM_CHANNEL_1);
 8002d96:	2100      	movs	r1, #0
 8002d98:	4807      	ldr	r0, [pc, #28]	; (8002db8 <HAL_TIM_PeriodElapsedCallback+0x68>)
 8002d9a:	f001 fd53 	bl	8004844 <HAL_TIM_PWM_Stop>
			HAL_TIM_Base_Stop_IT(&htim6);
 8002d9e:	4807      	ldr	r0, [pc, #28]	; (8002dbc <HAL_TIM_PeriodElapsedCallback+0x6c>)
 8002da0:	f001 fc00 	bl	80045a4 <HAL_TIM_Base_Stop_IT>
}
 8002da4:	bf00      	nop
 8002da6:	3708      	adds	r7, #8
 8002da8:	46bd      	mov	sp, r7
 8002daa:	bd80      	pop	{r7, pc}
 8002dac:	40001000 	.word	0x40001000
 8002db0:	20000014 	.word	0x20000014
 8002db4:	200008e8 	.word	0x200008e8
 8002db8:	20000a0c 	.word	0x20000a0c
 8002dbc:	200009c4 	.word	0x200009c4

08002dc0 <HAL_TIM_PWM_PulseFinishedCallback>:
void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	b082      	sub	sp, #8
 8002dc4:	af00      	add	r7, sp, #0
 8002dc6:	6078      	str	r0, [r7, #4]
	if(htim->Instance==TIM3)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	4a0c      	ldr	r2, [pc, #48]	; (8002e00 <HAL_TIM_PWM_PulseFinishedCallback+0x40>)
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d111      	bne.n	8002df6 <HAL_TIM_PWM_PulseFinishedCallback+0x36>
	{
		if(LM_Guide_Step>0)
 8002dd2:	4b0c      	ldr	r3, [pc, #48]	; (8002e04 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	2b00      	cmp	r3, #0
 8002dd8:	d005      	beq.n	8002de6 <HAL_TIM_PWM_PulseFinishedCallback+0x26>
		{
			LM_Guide_Step--;
 8002dda:	4b0a      	ldr	r3, [pc, #40]	; (8002e04 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	4a08      	ldr	r2, [pc, #32]	; (8002e04 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8002de2:	6013      	str	r3, [r2, #0]
		{
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
		}

	}
}
 8002de4:	e007      	b.n	8002df6 <HAL_TIM_PWM_PulseFinishedCallback+0x36>
		else if(LM_Guide_Step<=0)
 8002de6:	4b07      	ldr	r3, [pc, #28]	; (8002e04 <HAL_TIM_PWM_PulseFinishedCallback+0x44>)
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d103      	bne.n	8002df6 <HAL_TIM_PWM_PulseFinishedCallback+0x36>
			HAL_TIM_PWM_Stop_IT(&htim3, TIM_CHANNEL_1);
 8002dee:	2100      	movs	r1, #0
 8002df0:	4805      	ldr	r0, [pc, #20]	; (8002e08 <HAL_TIM_PWM_PulseFinishedCallback+0x48>)
 8002df2:	f001 fead 	bl	8004b50 <HAL_TIM_PWM_Stop_IT>
}
 8002df6:	bf00      	nop
 8002df8:	3708      	adds	r7, #8
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	bd80      	pop	{r7, pc}
 8002dfe:	bf00      	nop
 8002e00:	40000400 	.word	0x40000400
 8002e04:	200008e4 	.word	0x200008e4
 8002e08:	2000097c 	.word	0x2000097c

08002e0c <Elevator>:


void Elevator(int floor)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b082      	sub	sp, #8
 8002e10:	af00      	add	r7, sp, #0
 8002e12:	6078      	str	r0, [r7, #4]
	// 192.168.0.224 is TUK_Elevator's IP
	if(floor==1)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2b01      	cmp	r3, #1
 8002e18:	d146      	bne.n	8002ea8 <Elevator+0x9c>
	{
		Uart_sendstring("AT+CIPSTART=1,\"TCP\",\"192.168.0.224\",80\r\n",wifi_uart);
 8002e1a:	494a      	ldr	r1, [pc, #296]	; (8002f44 <Elevator+0x138>)
 8002e1c:	484a      	ldr	r0, [pc, #296]	; (8002f48 <Elevator+0x13c>)
 8002e1e:	f7fe fc12 	bl	8001646 <Uart_sendstring>
		while (!(Wait_for("OK\r\n",wifi_uart)));
 8002e22:	bf00      	nop
 8002e24:	4947      	ldr	r1, [pc, #284]	; (8002f44 <Elevator+0x138>)
 8002e26:	4849      	ldr	r0, [pc, #292]	; (8002f4c <Elevator+0x140>)
 8002e28:	f7fe fca2 	bl	8001770 <Wait_for>
 8002e2c:	4603      	mov	r3, r0
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	d0f8      	beq.n	8002e24 <Elevator+0x18>
		Uart_sendstring("CIPSTART 192.168.0.224 OK\n\n", pc_uart);
 8002e32:	4947      	ldr	r1, [pc, #284]	; (8002f50 <Elevator+0x144>)
 8002e34:	4847      	ldr	r0, [pc, #284]	; (8002f54 <Elevator+0x148>)
 8002e36:	f7fe fc06 	bl	8001646 <Uart_sendstring>

		Uart_sendstring("AT+CIPSEND=1,5\r\n",wifi_uart);
 8002e3a:	4942      	ldr	r1, [pc, #264]	; (8002f44 <Elevator+0x138>)
 8002e3c:	4846      	ldr	r0, [pc, #280]	; (8002f58 <Elevator+0x14c>)
 8002e3e:	f7fe fc02 	bl	8001646 <Uart_sendstring>
		while (!(Wait_for(">", wifi_uart)));
 8002e42:	bf00      	nop
 8002e44:	493f      	ldr	r1, [pc, #252]	; (8002f44 <Elevator+0x138>)
 8002e46:	4845      	ldr	r0, [pc, #276]	; (8002f5c <Elevator+0x150>)
 8002e48:	f7fe fc92 	bl	8001770 <Wait_for>
 8002e4c:	4603      	mov	r3, r0
 8002e4e:	2b00      	cmp	r3, #0
 8002e50:	d0f8      	beq.n	8002e44 <Elevator+0x38>

		Uart_sendstring ("11111", wifi_uart);
 8002e52:	493c      	ldr	r1, [pc, #240]	; (8002f44 <Elevator+0x138>)
 8002e54:	4842      	ldr	r0, [pc, #264]	; (8002f60 <Elevator+0x154>)
 8002e56:	f7fe fbf6 	bl	8001646 <Uart_sendstring>
		while (!(Wait_for("SEND OK", wifi_uart)));
 8002e5a:	bf00      	nop
 8002e5c:	4939      	ldr	r1, [pc, #228]	; (8002f44 <Elevator+0x138>)
 8002e5e:	4841      	ldr	r0, [pc, #260]	; (8002f64 <Elevator+0x158>)
 8002e60:	f7fe fc86 	bl	8001770 <Wait_for>
 8002e64:	4603      	mov	r3, r0
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d0f8      	beq.n	8002e5c <Elevator+0x50>

		Uart_sendstring("AT+CIPCLOSE=1\r\n", wifi_uart);
 8002e6a:	4936      	ldr	r1, [pc, #216]	; (8002f44 <Elevator+0x138>)
 8002e6c:	483e      	ldr	r0, [pc, #248]	; (8002f68 <Elevator+0x15c>)
 8002e6e:	f7fe fbea 	bl	8001646 <Uart_sendstring>
		while (!(Wait_for("OK\r\n", wifi_uart)));
 8002e72:	bf00      	nop
 8002e74:	4933      	ldr	r1, [pc, #204]	; (8002f44 <Elevator+0x138>)
 8002e76:	4835      	ldr	r0, [pc, #212]	; (8002f4c <Elevator+0x140>)
 8002e78:	f7fe fc7a 	bl	8001770 <Wait_for>
 8002e7c:	4603      	mov	r3, r0
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	d0f8      	beq.n	8002e74 <Elevator+0x68>
		Uart_sendstring("1\r\n", pc_uart);
 8002e82:	4933      	ldr	r1, [pc, #204]	; (8002f50 <Elevator+0x144>)
 8002e84:	4839      	ldr	r0, [pc, #228]	; (8002f6c <Elevator+0x160>)
 8002e86:	f7fe fbde 	bl	8001646 <Uart_sendstring>
		if((Wait_for("11111", wifi_uart)))
 8002e8a:	492e      	ldr	r1, [pc, #184]	; (8002f44 <Elevator+0x138>)
 8002e8c:	4834      	ldr	r0, [pc, #208]	; (8002f60 <Elevator+0x154>)
 8002e8e:	f7fe fc6f 	bl	8001770 <Wait_for>
 8002e92:	4603      	mov	r3, r0
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d050      	beq.n	8002f3a <Elevator+0x12e>
		{
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7);
 8002e98:	2181      	movs	r1, #129	; 0x81
 8002e9a:	4835      	ldr	r0, [pc, #212]	; (8002f70 <Elevator+0x164>)
 8002e9c:	f000 fe1b 	bl	8003ad6 <HAL_GPIO_TogglePin>
			Uart_flush (wifi_uart);
 8002ea0:	4828      	ldr	r0, [pc, #160]	; (8002f44 <Elevator+0x138>)
 8002ea2:	f7fe fa1d 	bl	80012e0 <Uart_flush>
		}
	}



}
 8002ea6:	e048      	b.n	8002f3a <Elevator+0x12e>
	else if(floor==2)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	2b02      	cmp	r3, #2
 8002eac:	d145      	bne.n	8002f3a <Elevator+0x12e>
		Uart_sendstring("AT+CIPSTART=1,\"TCP\",\"192.168.0.224\",80\r\n",wifi_uart);
 8002eae:	4925      	ldr	r1, [pc, #148]	; (8002f44 <Elevator+0x138>)
 8002eb0:	4825      	ldr	r0, [pc, #148]	; (8002f48 <Elevator+0x13c>)
 8002eb2:	f7fe fbc8 	bl	8001646 <Uart_sendstring>
		while (!(Wait_for("OK\r\n",wifi_uart)));
 8002eb6:	bf00      	nop
 8002eb8:	4922      	ldr	r1, [pc, #136]	; (8002f44 <Elevator+0x138>)
 8002eba:	4824      	ldr	r0, [pc, #144]	; (8002f4c <Elevator+0x140>)
 8002ebc:	f7fe fc58 	bl	8001770 <Wait_for>
 8002ec0:	4603      	mov	r3, r0
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d0f8      	beq.n	8002eb8 <Elevator+0xac>
		Uart_sendstring("CIPSTART 192.168.0.224 OK\n\n", pc_uart);
 8002ec6:	4922      	ldr	r1, [pc, #136]	; (8002f50 <Elevator+0x144>)
 8002ec8:	4822      	ldr	r0, [pc, #136]	; (8002f54 <Elevator+0x148>)
 8002eca:	f7fe fbbc 	bl	8001646 <Uart_sendstring>
		Uart_sendstring("AT+CIPSEND=1,5\r\n",wifi_uart);
 8002ece:	491d      	ldr	r1, [pc, #116]	; (8002f44 <Elevator+0x138>)
 8002ed0:	4821      	ldr	r0, [pc, #132]	; (8002f58 <Elevator+0x14c>)
 8002ed2:	f7fe fbb8 	bl	8001646 <Uart_sendstring>
		while (!(Wait_for(">", wifi_uart)));
 8002ed6:	bf00      	nop
 8002ed8:	491a      	ldr	r1, [pc, #104]	; (8002f44 <Elevator+0x138>)
 8002eda:	4820      	ldr	r0, [pc, #128]	; (8002f5c <Elevator+0x150>)
 8002edc:	f7fe fc48 	bl	8001770 <Wait_for>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	2b00      	cmp	r3, #0
 8002ee4:	d0f8      	beq.n	8002ed8 <Elevator+0xcc>
		Uart_sendstring ("22222", wifi_uart);
 8002ee6:	4917      	ldr	r1, [pc, #92]	; (8002f44 <Elevator+0x138>)
 8002ee8:	4822      	ldr	r0, [pc, #136]	; (8002f74 <Elevator+0x168>)
 8002eea:	f7fe fbac 	bl	8001646 <Uart_sendstring>
		while (!(Wait_for("SEND OK", wifi_uart)));
 8002eee:	bf00      	nop
 8002ef0:	4914      	ldr	r1, [pc, #80]	; (8002f44 <Elevator+0x138>)
 8002ef2:	481c      	ldr	r0, [pc, #112]	; (8002f64 <Elevator+0x158>)
 8002ef4:	f7fe fc3c 	bl	8001770 <Wait_for>
 8002ef8:	4603      	mov	r3, r0
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f8      	beq.n	8002ef0 <Elevator+0xe4>
		Uart_sendstring("AT+CIPCLOSE=1\r\n", wifi_uart);
 8002efe:	4911      	ldr	r1, [pc, #68]	; (8002f44 <Elevator+0x138>)
 8002f00:	4819      	ldr	r0, [pc, #100]	; (8002f68 <Elevator+0x15c>)
 8002f02:	f7fe fba0 	bl	8001646 <Uart_sendstring>
		while (!(Wait_for("OK\r\n", wifi_uart)));
 8002f06:	bf00      	nop
 8002f08:	490e      	ldr	r1, [pc, #56]	; (8002f44 <Elevator+0x138>)
 8002f0a:	4810      	ldr	r0, [pc, #64]	; (8002f4c <Elevator+0x140>)
 8002f0c:	f7fe fc30 	bl	8001770 <Wait_for>
 8002f10:	4603      	mov	r3, r0
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d0f8      	beq.n	8002f08 <Elevator+0xfc>
		Uart_sendstring("2\r\n", pc_uart);
 8002f16:	490e      	ldr	r1, [pc, #56]	; (8002f50 <Elevator+0x144>)
 8002f18:	4817      	ldr	r0, [pc, #92]	; (8002f78 <Elevator+0x16c>)
 8002f1a:	f7fe fb94 	bl	8001646 <Uart_sendstring>
		if((Wait_for("22222", wifi_uart)))
 8002f1e:	4909      	ldr	r1, [pc, #36]	; (8002f44 <Elevator+0x138>)
 8002f20:	4814      	ldr	r0, [pc, #80]	; (8002f74 <Elevator+0x168>)
 8002f22:	f7fe fc25 	bl	8001770 <Wait_for>
 8002f26:	4603      	mov	r3, r0
 8002f28:	2b00      	cmp	r3, #0
 8002f2a:	d006      	beq.n	8002f3a <Elevator+0x12e>
			HAL_GPIO_TogglePin(GPIOB, GPIO_PIN_0 | GPIO_PIN_7);
 8002f2c:	2181      	movs	r1, #129	; 0x81
 8002f2e:	4810      	ldr	r0, [pc, #64]	; (8002f70 <Elevator+0x164>)
 8002f30:	f000 fdd1 	bl	8003ad6 <HAL_GPIO_TogglePin>
			Uart_flush (wifi_uart);
 8002f34:	4803      	ldr	r0, [pc, #12]	; (8002f44 <Elevator+0x138>)
 8002f36:	f7fe f9d3 	bl	80012e0 <Uart_flush>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}
 8002f42:	bf00      	nop
 8002f44:	20000a54 	.word	0x20000a54
 8002f48:	08006ee0 	.word	0x08006ee0
 8002f4c:	08006f0c 	.word	0x08006f0c
 8002f50:	20000938 	.word	0x20000938
 8002f54:	08006f14 	.word	0x08006f14
 8002f58:	08006f30 	.word	0x08006f30
 8002f5c:	08006f44 	.word	0x08006f44
 8002f60:	08006f48 	.word	0x08006f48
 8002f64:	08006f50 	.word	0x08006f50
 8002f68:	08006f58 	.word	0x08006f58
 8002f6c:	08006f68 	.word	0x08006f68
 8002f70:	40020400 	.word	0x40020400
 8002f74:	08006f6c 	.word	0x08006f6c
 8002f78:	08006f74 	.word	0x08006f74

08002f7c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002f80:	b672      	cpsid	i
}
 8002f82:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002f84:	e7fe      	b.n	8002f84 <Error_Handler+0x8>
	...

08002f88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002f88:	b480      	push	{r7}
 8002f8a:	b083      	sub	sp, #12
 8002f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002f8e:	2300      	movs	r3, #0
 8002f90:	607b      	str	r3, [r7, #4]
 8002f92:	4b10      	ldr	r3, [pc, #64]	; (8002fd4 <HAL_MspInit+0x4c>)
 8002f94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002f96:	4a0f      	ldr	r2, [pc, #60]	; (8002fd4 <HAL_MspInit+0x4c>)
 8002f98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002f9c:	6453      	str	r3, [r2, #68]	; 0x44
 8002f9e:	4b0d      	ldr	r3, [pc, #52]	; (8002fd4 <HAL_MspInit+0x4c>)
 8002fa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002fa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002fa6:	607b      	str	r3, [r7, #4]
 8002fa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002faa:	2300      	movs	r3, #0
 8002fac:	603b      	str	r3, [r7, #0]
 8002fae:	4b09      	ldr	r3, [pc, #36]	; (8002fd4 <HAL_MspInit+0x4c>)
 8002fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb2:	4a08      	ldr	r2, [pc, #32]	; (8002fd4 <HAL_MspInit+0x4c>)
 8002fb4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb8:	6413      	str	r3, [r2, #64]	; 0x40
 8002fba:	4b06      	ldr	r3, [pc, #24]	; (8002fd4 <HAL_MspInit+0x4c>)
 8002fbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fc2:	603b      	str	r3, [r7, #0]
 8002fc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002fc6:	bf00      	nop
 8002fc8:	370c      	adds	r7, #12
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800

08002fd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b086      	sub	sp, #24
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fe8:	d10e      	bne.n	8003008 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002fea:	2300      	movs	r3, #0
 8002fec:	617b      	str	r3, [r7, #20]
 8002fee:	4b24      	ldr	r3, [pc, #144]	; (8003080 <HAL_TIM_Base_MspInit+0xa8>)
 8002ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ff2:	4a23      	ldr	r2, [pc, #140]	; (8003080 <HAL_TIM_Base_MspInit+0xa8>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8002ffa:	4b21      	ldr	r3, [pc, #132]	; (8003080 <HAL_TIM_Base_MspInit+0xa8>)
 8002ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ffe:	f003 0301 	and.w	r3, r3, #1
 8003002:	617b      	str	r3, [r7, #20]
 8003004:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }

}
 8003006:	e036      	b.n	8003076 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM3)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	4a1d      	ldr	r2, [pc, #116]	; (8003084 <HAL_TIM_Base_MspInit+0xac>)
 800300e:	4293      	cmp	r3, r2
 8003010:	d116      	bne.n	8003040 <HAL_TIM_Base_MspInit+0x68>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003012:	2300      	movs	r3, #0
 8003014:	613b      	str	r3, [r7, #16]
 8003016:	4b1a      	ldr	r3, [pc, #104]	; (8003080 <HAL_TIM_Base_MspInit+0xa8>)
 8003018:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301a:	4a19      	ldr	r2, [pc, #100]	; (8003080 <HAL_TIM_Base_MspInit+0xa8>)
 800301c:	f043 0302 	orr.w	r3, r3, #2
 8003020:	6413      	str	r3, [r2, #64]	; 0x40
 8003022:	4b17      	ldr	r3, [pc, #92]	; (8003080 <HAL_TIM_Base_MspInit+0xa8>)
 8003024:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	613b      	str	r3, [r7, #16]
 800302c:	693b      	ldr	r3, [r7, #16]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800302e:	2200      	movs	r2, #0
 8003030:	2100      	movs	r1, #0
 8003032:	201d      	movs	r0, #29
 8003034:	f000 fb53 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003038:	201d      	movs	r0, #29
 800303a:	f000 fb6c 	bl	8003716 <HAL_NVIC_EnableIRQ>
}
 800303e:	e01a      	b.n	8003076 <HAL_TIM_Base_MspInit+0x9e>
  else if(htim_base->Instance==TIM6)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4a10      	ldr	r2, [pc, #64]	; (8003088 <HAL_TIM_Base_MspInit+0xb0>)
 8003046:	4293      	cmp	r3, r2
 8003048:	d115      	bne.n	8003076 <HAL_TIM_Base_MspInit+0x9e>
    __HAL_RCC_TIM6_CLK_ENABLE();
 800304a:	2300      	movs	r3, #0
 800304c:	60fb      	str	r3, [r7, #12]
 800304e:	4b0c      	ldr	r3, [pc, #48]	; (8003080 <HAL_TIM_Base_MspInit+0xa8>)
 8003050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003052:	4a0b      	ldr	r2, [pc, #44]	; (8003080 <HAL_TIM_Base_MspInit+0xa8>)
 8003054:	f043 0310 	orr.w	r3, r3, #16
 8003058:	6413      	str	r3, [r2, #64]	; 0x40
 800305a:	4b09      	ldr	r3, [pc, #36]	; (8003080 <HAL_TIM_Base_MspInit+0xa8>)
 800305c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305e:	f003 0310 	and.w	r3, r3, #16
 8003062:	60fb      	str	r3, [r7, #12]
 8003064:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 8003066:	2200      	movs	r2, #0
 8003068:	2100      	movs	r1, #0
 800306a:	2036      	movs	r0, #54	; 0x36
 800306c:	f000 fb37 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003070:	2036      	movs	r0, #54	; 0x36
 8003072:	f000 fb50 	bl	8003716 <HAL_NVIC_EnableIRQ>
}
 8003076:	bf00      	nop
 8003078:	3718      	adds	r7, #24
 800307a:	46bd      	mov	sp, r7
 800307c:	bd80      	pop	{r7, pc}
 800307e:	bf00      	nop
 8003080:	40023800 	.word	0x40023800
 8003084:	40000400 	.word	0x40000400
 8003088:	40001000 	.word	0x40001000

0800308c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800308c:	b580      	push	{r7, lr}
 800308e:	b08a      	sub	sp, #40	; 0x28
 8003090:	af00      	add	r7, sp, #0
 8003092:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	2200      	movs	r2, #0
 800309a:	601a      	str	r2, [r3, #0]
 800309c:	605a      	str	r2, [r3, #4]
 800309e:	609a      	str	r2, [r3, #8]
 80030a0:	60da      	str	r2, [r3, #12]
 80030a2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80030ac:	d11e      	bne.n	80030ec <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030ae:	2300      	movs	r3, #0
 80030b0:	613b      	str	r3, [r7, #16]
 80030b2:	4b22      	ldr	r3, [pc, #136]	; (800313c <HAL_TIM_MspPostInit+0xb0>)
 80030b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030b6:	4a21      	ldr	r2, [pc, #132]	; (800313c <HAL_TIM_MspPostInit+0xb0>)
 80030b8:	f043 0301 	orr.w	r3, r3, #1
 80030bc:	6313      	str	r3, [r2, #48]	; 0x30
 80030be:	4b1f      	ldr	r3, [pc, #124]	; (800313c <HAL_TIM_MspPostInit+0xb0>)
 80030c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030c2:	f003 0301 	and.w	r3, r3, #1
 80030c6:	613b      	str	r3, [r7, #16]
 80030c8:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0/WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = Wheel_PWM_Pin;
 80030ca:	2301      	movs	r3, #1
 80030cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80030ce:	2302      	movs	r3, #2
 80030d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80030d2:	2300      	movs	r3, #0
 80030d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80030d6:	2300      	movs	r3, #0
 80030d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80030da:	2301      	movs	r3, #1
 80030dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(Wheel_PWM_GPIO_Port, &GPIO_InitStruct);
 80030de:	f107 0314 	add.w	r3, r7, #20
 80030e2:	4619      	mov	r1, r3
 80030e4:	4816      	ldr	r0, [pc, #88]	; (8003140 <HAL_TIM_MspPostInit+0xb4>)
 80030e6:	f000 fb31 	bl	800374c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80030ea:	e022      	b.n	8003132 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM3)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	4a14      	ldr	r2, [pc, #80]	; (8003144 <HAL_TIM_MspPostInit+0xb8>)
 80030f2:	4293      	cmp	r3, r2
 80030f4:	d11d      	bne.n	8003132 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80030f6:	2300      	movs	r3, #0
 80030f8:	60fb      	str	r3, [r7, #12]
 80030fa:	4b10      	ldr	r3, [pc, #64]	; (800313c <HAL_TIM_MspPostInit+0xb0>)
 80030fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030fe:	4a0f      	ldr	r2, [pc, #60]	; (800313c <HAL_TIM_MspPostInit+0xb0>)
 8003100:	f043 0301 	orr.w	r3, r3, #1
 8003104:	6313      	str	r3, [r2, #48]	; 0x30
 8003106:	4b0d      	ldr	r3, [pc, #52]	; (800313c <HAL_TIM_MspPostInit+0xb0>)
 8003108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800310a:	f003 0301 	and.w	r3, r3, #1
 800310e:	60fb      	str	r3, [r7, #12]
 8003110:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = LM_PWM_Pin;
 8003112:	2340      	movs	r3, #64	; 0x40
 8003114:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003116:	2302      	movs	r3, #2
 8003118:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800311a:	2300      	movs	r3, #0
 800311c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800311e:	2300      	movs	r3, #0
 8003120:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003122:	2302      	movs	r3, #2
 8003124:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(LM_PWM_GPIO_Port, &GPIO_InitStruct);
 8003126:	f107 0314 	add.w	r3, r7, #20
 800312a:	4619      	mov	r1, r3
 800312c:	4804      	ldr	r0, [pc, #16]	; (8003140 <HAL_TIM_MspPostInit+0xb4>)
 800312e:	f000 fb0d 	bl	800374c <HAL_GPIO_Init>
}
 8003132:	bf00      	nop
 8003134:	3728      	adds	r7, #40	; 0x28
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}
 800313a:	bf00      	nop
 800313c:	40023800 	.word	0x40023800
 8003140:	40020000 	.word	0x40020000
 8003144:	40000400 	.word	0x40000400

08003148 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003148:	b580      	push	{r7, lr}
 800314a:	b08c      	sub	sp, #48	; 0x30
 800314c:	af00      	add	r7, sp, #0
 800314e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003150:	f107 031c 	add.w	r3, r7, #28
 8003154:	2200      	movs	r2, #0
 8003156:	601a      	str	r2, [r3, #0]
 8003158:	605a      	str	r2, [r3, #4]
 800315a:	609a      	str	r2, [r3, #8]
 800315c:	60da      	str	r2, [r3, #12]
 800315e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	4a3a      	ldr	r2, [pc, #232]	; (8003250 <HAL_UART_MspInit+0x108>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d134      	bne.n	80031d4 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800316a:	2300      	movs	r3, #0
 800316c:	61bb      	str	r3, [r7, #24]
 800316e:	4b39      	ldr	r3, [pc, #228]	; (8003254 <HAL_UART_MspInit+0x10c>)
 8003170:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003172:	4a38      	ldr	r2, [pc, #224]	; (8003254 <HAL_UART_MspInit+0x10c>)
 8003174:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003178:	6413      	str	r3, [r2, #64]	; 0x40
 800317a:	4b36      	ldr	r3, [pc, #216]	; (8003254 <HAL_UART_MspInit+0x10c>)
 800317c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800317e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003182:	61bb      	str	r3, [r7, #24]
 8003184:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003186:	2300      	movs	r3, #0
 8003188:	617b      	str	r3, [r7, #20]
 800318a:	4b32      	ldr	r3, [pc, #200]	; (8003254 <HAL_UART_MspInit+0x10c>)
 800318c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800318e:	4a31      	ldr	r2, [pc, #196]	; (8003254 <HAL_UART_MspInit+0x10c>)
 8003190:	f043 0301 	orr.w	r3, r3, #1
 8003194:	6313      	str	r3, [r2, #48]	; 0x30
 8003196:	4b2f      	ldr	r3, [pc, #188]	; (8003254 <HAL_UART_MspInit+0x10c>)
 8003198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = ESP8266_USART_TX_Pin|ESP8266_USART_RX_Pin;
 80031a2:	230c      	movs	r3, #12
 80031a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80031a6:	2302      	movs	r3, #2
 80031a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80031aa:	2300      	movs	r3, #0
 80031ac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80031ae:	2303      	movs	r3, #3
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80031b2:	2307      	movs	r3, #7
 80031b4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80031b6:	f107 031c 	add.w	r3, r7, #28
 80031ba:	4619      	mov	r1, r3
 80031bc:	4826      	ldr	r0, [pc, #152]	; (8003258 <HAL_UART_MspInit+0x110>)
 80031be:	f000 fac5 	bl	800374c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80031c2:	2200      	movs	r2, #0
 80031c4:	2100      	movs	r1, #0
 80031c6:	2026      	movs	r0, #38	; 0x26
 80031c8:	f000 fa89 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80031cc:	2026      	movs	r0, #38	; 0x26
 80031ce:	f000 faa2 	bl	8003716 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 80031d2:	e039      	b.n	8003248 <HAL_UART_MspInit+0x100>
  else if(huart->Instance==USART3)
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4a20      	ldr	r2, [pc, #128]	; (800325c <HAL_UART_MspInit+0x114>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d134      	bne.n	8003248 <HAL_UART_MspInit+0x100>
    __HAL_RCC_USART3_CLK_ENABLE();
 80031de:	2300      	movs	r3, #0
 80031e0:	613b      	str	r3, [r7, #16]
 80031e2:	4b1c      	ldr	r3, [pc, #112]	; (8003254 <HAL_UART_MspInit+0x10c>)
 80031e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031e6:	4a1b      	ldr	r2, [pc, #108]	; (8003254 <HAL_UART_MspInit+0x10c>)
 80031e8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80031ec:	6413      	str	r3, [r2, #64]	; 0x40
 80031ee:	4b19      	ldr	r3, [pc, #100]	; (8003254 <HAL_UART_MspInit+0x10c>)
 80031f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80031f6:	613b      	str	r3, [r7, #16]
 80031f8:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	4b15      	ldr	r3, [pc, #84]	; (8003254 <HAL_UART_MspInit+0x10c>)
 8003200:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003202:	4a14      	ldr	r2, [pc, #80]	; (8003254 <HAL_UART_MspInit+0x10c>)
 8003204:	f043 0308 	orr.w	r3, r3, #8
 8003208:	6313      	str	r3, [r2, #48]	; 0x30
 800320a:	4b12      	ldr	r3, [pc, #72]	; (8003254 <HAL_UART_MspInit+0x10c>)
 800320c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800320e:	f003 0308 	and.w	r3, r3, #8
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PC_USART_TX_Pin|PC_USART_RX_Pin;
 8003216:	f44f 7340 	mov.w	r3, #768	; 0x300
 800321a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800321c:	2302      	movs	r3, #2
 800321e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003220:	2300      	movs	r3, #0
 8003222:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003224:	2303      	movs	r3, #3
 8003226:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003228:	2307      	movs	r3, #7
 800322a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800322c:	f107 031c 	add.w	r3, r7, #28
 8003230:	4619      	mov	r1, r3
 8003232:	480b      	ldr	r0, [pc, #44]	; (8003260 <HAL_UART_MspInit+0x118>)
 8003234:	f000 fa8a 	bl	800374c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8003238:	2200      	movs	r2, #0
 800323a:	2100      	movs	r1, #0
 800323c:	2027      	movs	r0, #39	; 0x27
 800323e:	f000 fa4e 	bl	80036de <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003242:	2027      	movs	r0, #39	; 0x27
 8003244:	f000 fa67 	bl	8003716 <HAL_NVIC_EnableIRQ>
}
 8003248:	bf00      	nop
 800324a:	3730      	adds	r7, #48	; 0x30
 800324c:	46bd      	mov	sp, r7
 800324e:	bd80      	pop	{r7, pc}
 8003250:	40004400 	.word	0x40004400
 8003254:	40023800 	.word	0x40023800
 8003258:	40020000 	.word	0x40020000
 800325c:	40004800 	.word	0x40004800
 8003260:	40020c00 	.word	0x40020c00

08003264 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003264:	b480      	push	{r7}
 8003266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003268:	e7fe      	b.n	8003268 <NMI_Handler+0x4>

0800326a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800326a:	b480      	push	{r7}
 800326c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800326e:	e7fe      	b.n	800326e <HardFault_Handler+0x4>

08003270 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003270:	b480      	push	{r7}
 8003272:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003274:	e7fe      	b.n	8003274 <MemManage_Handler+0x4>

08003276 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003276:	b480      	push	{r7}
 8003278:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800327a:	e7fe      	b.n	800327a <BusFault_Handler+0x4>

0800327c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800327c:	b480      	push	{r7}
 800327e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003280:	e7fe      	b.n	8003280 <UsageFault_Handler+0x4>

08003282 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003282:	b480      	push	{r7}
 8003284:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003286:	bf00      	nop
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr

08003290 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003290:	b480      	push	{r7}
 8003292:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003294:	bf00      	nop
 8003296:	46bd      	mov	sp, r7
 8003298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800329c:	4770      	bx	lr

0800329e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800329e:	b480      	push	{r7}
 80032a0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80032a2:	bf00      	nop
 80032a4:	46bd      	mov	sp, r7
 80032a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032aa:	4770      	bx	lr

080032ac <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80032ac:	b580      	push	{r7, lr}
 80032ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80032b0:	f000 f8f6 	bl	80034a0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80032b4:	bf00      	nop
 80032b6:	bd80      	pop	{r7, pc}

080032b8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80032bc:	4802      	ldr	r0, [pc, #8]	; (80032c8 <TIM3_IRQHandler+0x10>)
 80032be:	f001 fd05 	bl	8004ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80032c2:	bf00      	nop
 80032c4:	bd80      	pop	{r7, pc}
 80032c6:	bf00      	nop
 80032c8:	2000097c 	.word	0x2000097c

080032cc <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80032cc:	b580      	push	{r7, lr}
 80032ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */
	Uart_isr(&huart2);
 80032d0:	4802      	ldr	r0, [pc, #8]	; (80032dc <USART2_IRQHandler+0x10>)
 80032d2:	f7fe faa9 	bl	8001828 <Uart_isr>
	return;
 80032d6:	bf00      	nop
  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	20000a54 	.word	0x20000a54

080032e0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80032e0:	b580      	push	{r7, lr}
 80032e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */
	Uart_isr(&huart3);
 80032e4:	4802      	ldr	r0, [pc, #8]	; (80032f0 <USART3_IRQHandler+0x10>)
 80032e6:	f7fe fa9f 	bl	8001828 <Uart_isr>
	return;
 80032ea:	bf00      	nop
  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80032ec:	bd80      	pop	{r7, pc}
 80032ee:	bf00      	nop
 80032f0:	20000938 	.word	0x20000938

080032f4 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80032f4:	b580      	push	{r7, lr}
 80032f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(limit_Pin);
 80032f8:	f44f 6000 	mov.w	r0, #2048	; 0x800
 80032fc:	f000 fc06 	bl	8003b0c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8003300:	bf00      	nop
 8003302:	bd80      	pop	{r7, pc}

08003304 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003304:	b580      	push	{r7, lr}
 8003306:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003308:	4802      	ldr	r0, [pc, #8]	; (8003314 <TIM6_DAC_IRQHandler+0x10>)
 800330a:	f001 fcdf 	bl	8004ccc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800330e:	bf00      	nop
 8003310:	bd80      	pop	{r7, pc}
 8003312:	bf00      	nop
 8003314:	200009c4 	.word	0x200009c4

08003318 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003320:	4a14      	ldr	r2, [pc, #80]	; (8003374 <_sbrk+0x5c>)
 8003322:	4b15      	ldr	r3, [pc, #84]	; (8003378 <_sbrk+0x60>)
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003328:	697b      	ldr	r3, [r7, #20]
 800332a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800332c:	4b13      	ldr	r3, [pc, #76]	; (800337c <_sbrk+0x64>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	2b00      	cmp	r3, #0
 8003332:	d102      	bne.n	800333a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003334:	4b11      	ldr	r3, [pc, #68]	; (800337c <_sbrk+0x64>)
 8003336:	4a12      	ldr	r2, [pc, #72]	; (8003380 <_sbrk+0x68>)
 8003338:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800333a:	4b10      	ldr	r3, [pc, #64]	; (800337c <_sbrk+0x64>)
 800333c:	681a      	ldr	r2, [r3, #0]
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	4413      	add	r3, r2
 8003342:	693a      	ldr	r2, [r7, #16]
 8003344:	429a      	cmp	r2, r3
 8003346:	d207      	bcs.n	8003358 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003348:	f002 fd26 	bl	8005d98 <__errno>
 800334c:	4603      	mov	r3, r0
 800334e:	220c      	movs	r2, #12
 8003350:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003352:	f04f 33ff 	mov.w	r3, #4294967295
 8003356:	e009      	b.n	800336c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003358:	4b08      	ldr	r3, [pc, #32]	; (800337c <_sbrk+0x64>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800335e:	4b07      	ldr	r3, [pc, #28]	; (800337c <_sbrk+0x64>)
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	4413      	add	r3, r2
 8003366:	4a05      	ldr	r2, [pc, #20]	; (800337c <_sbrk+0x64>)
 8003368:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800336a:	68fb      	ldr	r3, [r7, #12]
}
 800336c:	4618      	mov	r0, r3
 800336e:	3718      	adds	r7, #24
 8003370:	46bd      	mov	sp, r7
 8003372:	bd80      	pop	{r7, pc}
 8003374:	20030000 	.word	0x20030000
 8003378:	00000400 	.word	0x00000400
 800337c:	20000908 	.word	0x20000908
 8003380:	20000ab0 	.word	0x20000ab0

08003384 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003384:	b480      	push	{r7}
 8003386:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003388:	4b06      	ldr	r3, [pc, #24]	; (80033a4 <SystemInit+0x20>)
 800338a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800338e:	4a05      	ldr	r2, [pc, #20]	; (80033a4 <SystemInit+0x20>)
 8003390:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003394:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003398:	bf00      	nop
 800339a:	46bd      	mov	sp, r7
 800339c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033a0:	4770      	bx	lr
 80033a2:	bf00      	nop
 80033a4:	e000ed00 	.word	0xe000ed00

080033a8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 80033a8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80033e0 <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */   ldr r0, =_sdata
 80033ac:	480d      	ldr	r0, [pc, #52]	; (80033e4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80033ae:	490e      	ldr	r1, [pc, #56]	; (80033e8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80033b0:	4a0e      	ldr	r2, [pc, #56]	; (80033ec <LoopFillZerobss+0x1e>)
  movs r3, #0
 80033b2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80033b4:	e002      	b.n	80033bc <LoopCopyDataInit>

080033b6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80033b6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80033b8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80033ba:	3304      	adds	r3, #4

080033bc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80033bc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80033be:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80033c0:	d3f9      	bcc.n	80033b6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80033c2:	4a0b      	ldr	r2, [pc, #44]	; (80033f0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80033c4:	4c0b      	ldr	r4, [pc, #44]	; (80033f4 <LoopFillZerobss+0x26>)
  movs r3, #0
 80033c6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80033c8:	e001      	b.n	80033ce <LoopFillZerobss>

080033ca <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80033ca:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80033cc:	3204      	adds	r2, #4

080033ce <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80033ce:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80033d0:	d3fb      	bcc.n	80033ca <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80033d2:	f7ff ffd7 	bl	8003384 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80033d6:	f002 fce5 	bl	8005da4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80033da:	f7fe facf 	bl	800197c <main>
  bx  lr    
 80033de:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 80033e0:	20030000 	.word	0x20030000
/* Copy the data segment initializers from flash to SRAM */   ldr r0, =_sdata
 80033e4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80033e8:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 80033ec:	08006fd4 	.word	0x08006fd4
  ldr r2, =_sbss
 80033f0:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 80033f4:	20000aac 	.word	0x20000aac

080033f8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80033f8:	e7fe      	b.n	80033f8 <ADC_IRQHandler>
	...

080033fc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003400:	4b0e      	ldr	r3, [pc, #56]	; (800343c <HAL_Init+0x40>)
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	4a0d      	ldr	r2, [pc, #52]	; (800343c <HAL_Init+0x40>)
 8003406:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800340a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800340c:	4b0b      	ldr	r3, [pc, #44]	; (800343c <HAL_Init+0x40>)
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	4a0a      	ldr	r2, [pc, #40]	; (800343c <HAL_Init+0x40>)
 8003412:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003416:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003418:	4b08      	ldr	r3, [pc, #32]	; (800343c <HAL_Init+0x40>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a07      	ldr	r2, [pc, #28]	; (800343c <HAL_Init+0x40>)
 800341e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003422:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003424:	2003      	movs	r0, #3
 8003426:	f000 f94f 	bl	80036c8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800342a:	200f      	movs	r0, #15
 800342c:	f000 f808 	bl	8003440 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003430:	f7ff fdaa 	bl	8002f88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003434:	2300      	movs	r3, #0
}
 8003436:	4618      	mov	r0, r3
 8003438:	bd80      	pop	{r7, pc}
 800343a:	bf00      	nop
 800343c:	40023c00 	.word	0x40023c00

08003440 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003440:	b580      	push	{r7, lr}
 8003442:	b082      	sub	sp, #8
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003448:	4b12      	ldr	r3, [pc, #72]	; (8003494 <HAL_InitTick+0x54>)
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	4b12      	ldr	r3, [pc, #72]	; (8003498 <HAL_InitTick+0x58>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	4619      	mov	r1, r3
 8003452:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003456:	fbb3 f3f1 	udiv	r3, r3, r1
 800345a:	fbb2 f3f3 	udiv	r3, r2, r3
 800345e:	4618      	mov	r0, r3
 8003460:	f000 f967 	bl	8003732 <HAL_SYSTICK_Config>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e00e      	b.n	800348c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2b0f      	cmp	r3, #15
 8003472:	d80a      	bhi.n	800348a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003474:	2200      	movs	r2, #0
 8003476:	6879      	ldr	r1, [r7, #4]
 8003478:	f04f 30ff 	mov.w	r0, #4294967295
 800347c:	f000 f92f 	bl	80036de <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003480:	4a06      	ldr	r2, [pc, #24]	; (800349c <HAL_InitTick+0x5c>)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003486:	2300      	movs	r3, #0
 8003488:	e000      	b.n	800348c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
}
 800348c:	4618      	mov	r0, r3
 800348e:	3708      	adds	r7, #8
 8003490:	46bd      	mov	sp, r7
 8003492:	bd80      	pop	{r7, pc}
 8003494:	20000038 	.word	0x20000038
 8003498:	20000040 	.word	0x20000040
 800349c:	2000003c 	.word	0x2000003c

080034a0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <HAL_IncTick+0x20>)
 80034a6:	781b      	ldrb	r3, [r3, #0]
 80034a8:	461a      	mov	r2, r3
 80034aa:	4b06      	ldr	r3, [pc, #24]	; (80034c4 <HAL_IncTick+0x24>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	4413      	add	r3, r2
 80034b0:	4a04      	ldr	r2, [pc, #16]	; (80034c4 <HAL_IncTick+0x24>)
 80034b2:	6013      	str	r3, [r2, #0]
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	20000040 	.word	0x20000040
 80034c4:	20000a98 	.word	0x20000a98

080034c8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80034c8:	b480      	push	{r7}
 80034ca:	af00      	add	r7, sp, #0
  return uwTick;
 80034cc:	4b03      	ldr	r3, [pc, #12]	; (80034dc <HAL_GetTick+0x14>)
 80034ce:	681b      	ldr	r3, [r3, #0]
}
 80034d0:	4618      	mov	r0, r3
 80034d2:	46bd      	mov	sp, r7
 80034d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d8:	4770      	bx	lr
 80034da:	bf00      	nop
 80034dc:	20000a98 	.word	0x20000a98

080034e0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80034e0:	b580      	push	{r7, lr}
 80034e2:	b084      	sub	sp, #16
 80034e4:	af00      	add	r7, sp, #0
 80034e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80034e8:	f7ff ffee 	bl	80034c8 <HAL_GetTick>
 80034ec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80034f8:	d005      	beq.n	8003506 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80034fa:	4b0a      	ldr	r3, [pc, #40]	; (8003524 <HAL_Delay+0x44>)
 80034fc:	781b      	ldrb	r3, [r3, #0]
 80034fe:	461a      	mov	r2, r3
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	4413      	add	r3, r2
 8003504:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003506:	bf00      	nop
 8003508:	f7ff ffde 	bl	80034c8 <HAL_GetTick>
 800350c:	4602      	mov	r2, r0
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	1ad3      	subs	r3, r2, r3
 8003512:	68fa      	ldr	r2, [r7, #12]
 8003514:	429a      	cmp	r2, r3
 8003516:	d8f7      	bhi.n	8003508 <HAL_Delay+0x28>
  {
  }
}
 8003518:	bf00      	nop
 800351a:	bf00      	nop
 800351c:	3710      	adds	r7, #16
 800351e:	46bd      	mov	sp, r7
 8003520:	bd80      	pop	{r7, pc}
 8003522:	bf00      	nop
 8003524:	20000040 	.word	0x20000040

08003528 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003528:	b480      	push	{r7}
 800352a:	b085      	sub	sp, #20
 800352c:	af00      	add	r7, sp, #0
 800352e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	f003 0307 	and.w	r3, r3, #7
 8003536:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800353a:	68db      	ldr	r3, [r3, #12]
 800353c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800353e:	68ba      	ldr	r2, [r7, #8]
 8003540:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003544:	4013      	ands	r3, r2
 8003546:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800354c:	68bb      	ldr	r3, [r7, #8]
 800354e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003550:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003554:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003558:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800355a:	4a04      	ldr	r2, [pc, #16]	; (800356c <__NVIC_SetPriorityGrouping+0x44>)
 800355c:	68bb      	ldr	r3, [r7, #8]
 800355e:	60d3      	str	r3, [r2, #12]
}
 8003560:	bf00      	nop
 8003562:	3714      	adds	r7, #20
 8003564:	46bd      	mov	sp, r7
 8003566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800356a:	4770      	bx	lr
 800356c:	e000ed00 	.word	0xe000ed00

08003570 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003570:	b480      	push	{r7}
 8003572:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003574:	4b04      	ldr	r3, [pc, #16]	; (8003588 <__NVIC_GetPriorityGrouping+0x18>)
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	0a1b      	lsrs	r3, r3, #8
 800357a:	f003 0307 	and.w	r3, r3, #7
}
 800357e:	4618      	mov	r0, r3
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr
 8003588:	e000ed00 	.word	0xe000ed00

0800358c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
 8003592:	4603      	mov	r3, r0
 8003594:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003596:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800359a:	2b00      	cmp	r3, #0
 800359c:	db0b      	blt.n	80035b6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	f003 021f 	and.w	r2, r3, #31
 80035a4:	4907      	ldr	r1, [pc, #28]	; (80035c4 <__NVIC_EnableIRQ+0x38>)
 80035a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035aa:	095b      	lsrs	r3, r3, #5
 80035ac:	2001      	movs	r0, #1
 80035ae:	fa00 f202 	lsl.w	r2, r0, r2
 80035b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80035b6:	bf00      	nop
 80035b8:	370c      	adds	r7, #12
 80035ba:	46bd      	mov	sp, r7
 80035bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c0:	4770      	bx	lr
 80035c2:	bf00      	nop
 80035c4:	e000e100 	.word	0xe000e100

080035c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80035c8:	b480      	push	{r7}
 80035ca:	b083      	sub	sp, #12
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	4603      	mov	r3, r0
 80035d0:	6039      	str	r1, [r7, #0]
 80035d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80035d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	db0a      	blt.n	80035f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035dc:	683b      	ldr	r3, [r7, #0]
 80035de:	b2da      	uxtb	r2, r3
 80035e0:	490c      	ldr	r1, [pc, #48]	; (8003614 <__NVIC_SetPriority+0x4c>)
 80035e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80035e6:	0112      	lsls	r2, r2, #4
 80035e8:	b2d2      	uxtb	r2, r2
 80035ea:	440b      	add	r3, r1
 80035ec:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80035f0:	e00a      	b.n	8003608 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	b2da      	uxtb	r2, r3
 80035f6:	4908      	ldr	r1, [pc, #32]	; (8003618 <__NVIC_SetPriority+0x50>)
 80035f8:	79fb      	ldrb	r3, [r7, #7]
 80035fa:	f003 030f 	and.w	r3, r3, #15
 80035fe:	3b04      	subs	r3, #4
 8003600:	0112      	lsls	r2, r2, #4
 8003602:	b2d2      	uxtb	r2, r2
 8003604:	440b      	add	r3, r1
 8003606:	761a      	strb	r2, [r3, #24]
}
 8003608:	bf00      	nop
 800360a:	370c      	adds	r7, #12
 800360c:	46bd      	mov	sp, r7
 800360e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003612:	4770      	bx	lr
 8003614:	e000e100 	.word	0xe000e100
 8003618:	e000ed00 	.word	0xe000ed00

0800361c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800361c:	b480      	push	{r7}
 800361e:	b089      	sub	sp, #36	; 0x24
 8003620:	af00      	add	r7, sp, #0
 8003622:	60f8      	str	r0, [r7, #12]
 8003624:	60b9      	str	r1, [r7, #8]
 8003626:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	f003 0307 	and.w	r3, r3, #7
 800362e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	f1c3 0307 	rsb	r3, r3, #7
 8003636:	2b04      	cmp	r3, #4
 8003638:	bf28      	it	cs
 800363a:	2304      	movcs	r3, #4
 800363c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800363e:	69fb      	ldr	r3, [r7, #28]
 8003640:	3304      	adds	r3, #4
 8003642:	2b06      	cmp	r3, #6
 8003644:	d902      	bls.n	800364c <NVIC_EncodePriority+0x30>
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3b03      	subs	r3, #3
 800364a:	e000      	b.n	800364e <NVIC_EncodePriority+0x32>
 800364c:	2300      	movs	r3, #0
 800364e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003650:	f04f 32ff 	mov.w	r2, #4294967295
 8003654:	69bb      	ldr	r3, [r7, #24]
 8003656:	fa02 f303 	lsl.w	r3, r2, r3
 800365a:	43da      	mvns	r2, r3
 800365c:	68bb      	ldr	r3, [r7, #8]
 800365e:	401a      	ands	r2, r3
 8003660:	697b      	ldr	r3, [r7, #20]
 8003662:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003664:	f04f 31ff 	mov.w	r1, #4294967295
 8003668:	697b      	ldr	r3, [r7, #20]
 800366a:	fa01 f303 	lsl.w	r3, r1, r3
 800366e:	43d9      	mvns	r1, r3
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003674:	4313      	orrs	r3, r2
         );
}
 8003676:	4618      	mov	r0, r3
 8003678:	3724      	adds	r7, #36	; 0x24
 800367a:	46bd      	mov	sp, r7
 800367c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003680:	4770      	bx	lr
	...

08003684 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003684:	b580      	push	{r7, lr}
 8003686:	b082      	sub	sp, #8
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	3b01      	subs	r3, #1
 8003690:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003694:	d301      	bcc.n	800369a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003696:	2301      	movs	r3, #1
 8003698:	e00f      	b.n	80036ba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800369a:	4a0a      	ldr	r2, [pc, #40]	; (80036c4 <SysTick_Config+0x40>)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	3b01      	subs	r3, #1
 80036a0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80036a2:	210f      	movs	r1, #15
 80036a4:	f04f 30ff 	mov.w	r0, #4294967295
 80036a8:	f7ff ff8e 	bl	80035c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80036ac:	4b05      	ldr	r3, [pc, #20]	; (80036c4 <SysTick_Config+0x40>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80036b2:	4b04      	ldr	r3, [pc, #16]	; (80036c4 <SysTick_Config+0x40>)
 80036b4:	2207      	movs	r2, #7
 80036b6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3708      	adds	r7, #8
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	e000e010 	.word	0xe000e010

080036c8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b082      	sub	sp, #8
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80036d0:	6878      	ldr	r0, [r7, #4]
 80036d2:	f7ff ff29 	bl	8003528 <__NVIC_SetPriorityGrouping>
}
 80036d6:	bf00      	nop
 80036d8:	3708      	adds	r7, #8
 80036da:	46bd      	mov	sp, r7
 80036dc:	bd80      	pop	{r7, pc}

080036de <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80036de:	b580      	push	{r7, lr}
 80036e0:	b086      	sub	sp, #24
 80036e2:	af00      	add	r7, sp, #0
 80036e4:	4603      	mov	r3, r0
 80036e6:	60b9      	str	r1, [r7, #8]
 80036e8:	607a      	str	r2, [r7, #4]
 80036ea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80036f0:	f7ff ff3e 	bl	8003570 <__NVIC_GetPriorityGrouping>
 80036f4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80036f6:	687a      	ldr	r2, [r7, #4]
 80036f8:	68b9      	ldr	r1, [r7, #8]
 80036fa:	6978      	ldr	r0, [r7, #20]
 80036fc:	f7ff ff8e 	bl	800361c <NVIC_EncodePriority>
 8003700:	4602      	mov	r2, r0
 8003702:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003706:	4611      	mov	r1, r2
 8003708:	4618      	mov	r0, r3
 800370a:	f7ff ff5d 	bl	80035c8 <__NVIC_SetPriority>
}
 800370e:	bf00      	nop
 8003710:	3718      	adds	r7, #24
 8003712:	46bd      	mov	sp, r7
 8003714:	bd80      	pop	{r7, pc}

08003716 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003716:	b580      	push	{r7, lr}
 8003718:	b082      	sub	sp, #8
 800371a:	af00      	add	r7, sp, #0
 800371c:	4603      	mov	r3, r0
 800371e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003720:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff ff31 	bl	800358c <__NVIC_EnableIRQ>
}
 800372a:	bf00      	nop
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b082      	sub	sp, #8
 8003736:	af00      	add	r7, sp, #0
 8003738:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800373a:	6878      	ldr	r0, [r7, #4]
 800373c:	f7ff ffa2 	bl	8003684 <SysTick_Config>
 8003740:	4603      	mov	r3, r0
}
 8003742:	4618      	mov	r0, r3
 8003744:	3708      	adds	r7, #8
 8003746:	46bd      	mov	sp, r7
 8003748:	bd80      	pop	{r7, pc}
	...

0800374c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800374c:	b480      	push	{r7}
 800374e:	b089      	sub	sp, #36	; 0x24
 8003750:	af00      	add	r7, sp, #0
 8003752:	6078      	str	r0, [r7, #4]
 8003754:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003756:	2300      	movs	r3, #0
 8003758:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800375a:	2300      	movs	r3, #0
 800375c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800375e:	2300      	movs	r3, #0
 8003760:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003762:	2300      	movs	r3, #0
 8003764:	61fb      	str	r3, [r7, #28]
 8003766:	e177      	b.n	8003a58 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003768:	2201      	movs	r2, #1
 800376a:	69fb      	ldr	r3, [r7, #28]
 800376c:	fa02 f303 	lsl.w	r3, r2, r3
 8003770:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4013      	ands	r3, r2
 800377a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800377c:	693a      	ldr	r2, [r7, #16]
 800377e:	697b      	ldr	r3, [r7, #20]
 8003780:	429a      	cmp	r2, r3
 8003782:	f040 8166 	bne.w	8003a52 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003786:	683b      	ldr	r3, [r7, #0]
 8003788:	685b      	ldr	r3, [r3, #4]
 800378a:	f003 0303 	and.w	r3, r3, #3
 800378e:	2b01      	cmp	r3, #1
 8003790:	d005      	beq.n	800379e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003792:	683b      	ldr	r3, [r7, #0]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800379a:	2b02      	cmp	r3, #2
 800379c:	d130      	bne.n	8003800 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80037a4:	69fb      	ldr	r3, [r7, #28]
 80037a6:	005b      	lsls	r3, r3, #1
 80037a8:	2203      	movs	r2, #3
 80037aa:	fa02 f303 	lsl.w	r3, r2, r3
 80037ae:	43db      	mvns	r3, r3
 80037b0:	69ba      	ldr	r2, [r7, #24]
 80037b2:	4013      	ands	r3, r2
 80037b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	68da      	ldr	r2, [r3, #12]
 80037ba:	69fb      	ldr	r3, [r7, #28]
 80037bc:	005b      	lsls	r3, r3, #1
 80037be:	fa02 f303 	lsl.w	r3, r2, r3
 80037c2:	69ba      	ldr	r2, [r7, #24]
 80037c4:	4313      	orrs	r3, r2
 80037c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	69ba      	ldr	r2, [r7, #24]
 80037cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80037d4:	2201      	movs	r2, #1
 80037d6:	69fb      	ldr	r3, [r7, #28]
 80037d8:	fa02 f303 	lsl.w	r3, r2, r3
 80037dc:	43db      	mvns	r3, r3
 80037de:	69ba      	ldr	r2, [r7, #24]
 80037e0:	4013      	ands	r3, r2
 80037e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	685b      	ldr	r3, [r3, #4]
 80037e8:	091b      	lsrs	r3, r3, #4
 80037ea:	f003 0201 	and.w	r2, r3, #1
 80037ee:	69fb      	ldr	r3, [r7, #28]
 80037f0:	fa02 f303 	lsl.w	r3, r2, r3
 80037f4:	69ba      	ldr	r2, [r7, #24]
 80037f6:	4313      	orrs	r3, r2
 80037f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	69ba      	ldr	r2, [r7, #24]
 80037fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f003 0303 	and.w	r3, r3, #3
 8003808:	2b03      	cmp	r3, #3
 800380a:	d017      	beq.n	800383c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68db      	ldr	r3, [r3, #12]
 8003810:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003812:	69fb      	ldr	r3, [r7, #28]
 8003814:	005b      	lsls	r3, r3, #1
 8003816:	2203      	movs	r2, #3
 8003818:	fa02 f303 	lsl.w	r3, r2, r3
 800381c:	43db      	mvns	r3, r3
 800381e:	69ba      	ldr	r2, [r7, #24]
 8003820:	4013      	ands	r3, r2
 8003822:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	69fb      	ldr	r3, [r7, #28]
 800382a:	005b      	lsls	r3, r3, #1
 800382c:	fa02 f303 	lsl.w	r3, r2, r3
 8003830:	69ba      	ldr	r2, [r7, #24]
 8003832:	4313      	orrs	r3, r2
 8003834:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	69ba      	ldr	r2, [r7, #24]
 800383a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	685b      	ldr	r3, [r3, #4]
 8003840:	f003 0303 	and.w	r3, r3, #3
 8003844:	2b02      	cmp	r3, #2
 8003846:	d123      	bne.n	8003890 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003848:	69fb      	ldr	r3, [r7, #28]
 800384a:	08da      	lsrs	r2, r3, #3
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	3208      	adds	r2, #8
 8003850:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003854:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003856:	69fb      	ldr	r3, [r7, #28]
 8003858:	f003 0307 	and.w	r3, r3, #7
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	220f      	movs	r2, #15
 8003860:	fa02 f303 	lsl.w	r3, r2, r3
 8003864:	43db      	mvns	r3, r3
 8003866:	69ba      	ldr	r2, [r7, #24]
 8003868:	4013      	ands	r3, r2
 800386a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	691a      	ldr	r2, [r3, #16]
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	f003 0307 	and.w	r3, r3, #7
 8003876:	009b      	lsls	r3, r3, #2
 8003878:	fa02 f303 	lsl.w	r3, r2, r3
 800387c:	69ba      	ldr	r2, [r7, #24]
 800387e:	4313      	orrs	r3, r2
 8003880:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003882:	69fb      	ldr	r3, [r7, #28]
 8003884:	08da      	lsrs	r2, r3, #3
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	3208      	adds	r2, #8
 800388a:	69b9      	ldr	r1, [r7, #24]
 800388c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003896:	69fb      	ldr	r3, [r7, #28]
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	2203      	movs	r2, #3
 800389c:	fa02 f303 	lsl.w	r3, r2, r3
 80038a0:	43db      	mvns	r3, r3
 80038a2:	69ba      	ldr	r2, [r7, #24]
 80038a4:	4013      	ands	r3, r2
 80038a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80038a8:	683b      	ldr	r3, [r7, #0]
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	f003 0203 	and.w	r2, r3, #3
 80038b0:	69fb      	ldr	r3, [r7, #28]
 80038b2:	005b      	lsls	r3, r3, #1
 80038b4:	fa02 f303 	lsl.w	r3, r2, r3
 80038b8:	69ba      	ldr	r2, [r7, #24]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	69ba      	ldr	r2, [r7, #24]
 80038c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	685b      	ldr	r3, [r3, #4]
 80038c8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	f000 80c0 	beq.w	8003a52 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80038d2:	2300      	movs	r3, #0
 80038d4:	60fb      	str	r3, [r7, #12]
 80038d6:	4b66      	ldr	r3, [pc, #408]	; (8003a70 <HAL_GPIO_Init+0x324>)
 80038d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038da:	4a65      	ldr	r2, [pc, #404]	; (8003a70 <HAL_GPIO_Init+0x324>)
 80038dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80038e0:	6453      	str	r3, [r2, #68]	; 0x44
 80038e2:	4b63      	ldr	r3, [pc, #396]	; (8003a70 <HAL_GPIO_Init+0x324>)
 80038e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80038ea:	60fb      	str	r3, [r7, #12]
 80038ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80038ee:	4a61      	ldr	r2, [pc, #388]	; (8003a74 <HAL_GPIO_Init+0x328>)
 80038f0:	69fb      	ldr	r3, [r7, #28]
 80038f2:	089b      	lsrs	r3, r3, #2
 80038f4:	3302      	adds	r3, #2
 80038f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80038fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80038fc:	69fb      	ldr	r3, [r7, #28]
 80038fe:	f003 0303 	and.w	r3, r3, #3
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	220f      	movs	r2, #15
 8003906:	fa02 f303 	lsl.w	r3, r2, r3
 800390a:	43db      	mvns	r3, r3
 800390c:	69ba      	ldr	r2, [r7, #24]
 800390e:	4013      	ands	r3, r2
 8003910:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	4a58      	ldr	r2, [pc, #352]	; (8003a78 <HAL_GPIO_Init+0x32c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d037      	beq.n	800398a <HAL_GPIO_Init+0x23e>
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	4a57      	ldr	r2, [pc, #348]	; (8003a7c <HAL_GPIO_Init+0x330>)
 800391e:	4293      	cmp	r3, r2
 8003920:	d031      	beq.n	8003986 <HAL_GPIO_Init+0x23a>
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a56      	ldr	r2, [pc, #344]	; (8003a80 <HAL_GPIO_Init+0x334>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d02b      	beq.n	8003982 <HAL_GPIO_Init+0x236>
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	4a55      	ldr	r2, [pc, #340]	; (8003a84 <HAL_GPIO_Init+0x338>)
 800392e:	4293      	cmp	r3, r2
 8003930:	d025      	beq.n	800397e <HAL_GPIO_Init+0x232>
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	4a54      	ldr	r2, [pc, #336]	; (8003a88 <HAL_GPIO_Init+0x33c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d01f      	beq.n	800397a <HAL_GPIO_Init+0x22e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	4a53      	ldr	r2, [pc, #332]	; (8003a8c <HAL_GPIO_Init+0x340>)
 800393e:	4293      	cmp	r3, r2
 8003940:	d019      	beq.n	8003976 <HAL_GPIO_Init+0x22a>
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	4a52      	ldr	r2, [pc, #328]	; (8003a90 <HAL_GPIO_Init+0x344>)
 8003946:	4293      	cmp	r3, r2
 8003948:	d013      	beq.n	8003972 <HAL_GPIO_Init+0x226>
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	4a51      	ldr	r2, [pc, #324]	; (8003a94 <HAL_GPIO_Init+0x348>)
 800394e:	4293      	cmp	r3, r2
 8003950:	d00d      	beq.n	800396e <HAL_GPIO_Init+0x222>
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a50      	ldr	r2, [pc, #320]	; (8003a98 <HAL_GPIO_Init+0x34c>)
 8003956:	4293      	cmp	r3, r2
 8003958:	d007      	beq.n	800396a <HAL_GPIO_Init+0x21e>
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	4a4f      	ldr	r2, [pc, #316]	; (8003a9c <HAL_GPIO_Init+0x350>)
 800395e:	4293      	cmp	r3, r2
 8003960:	d101      	bne.n	8003966 <HAL_GPIO_Init+0x21a>
 8003962:	2309      	movs	r3, #9
 8003964:	e012      	b.n	800398c <HAL_GPIO_Init+0x240>
 8003966:	230a      	movs	r3, #10
 8003968:	e010      	b.n	800398c <HAL_GPIO_Init+0x240>
 800396a:	2308      	movs	r3, #8
 800396c:	e00e      	b.n	800398c <HAL_GPIO_Init+0x240>
 800396e:	2307      	movs	r3, #7
 8003970:	e00c      	b.n	800398c <HAL_GPIO_Init+0x240>
 8003972:	2306      	movs	r3, #6
 8003974:	e00a      	b.n	800398c <HAL_GPIO_Init+0x240>
 8003976:	2305      	movs	r3, #5
 8003978:	e008      	b.n	800398c <HAL_GPIO_Init+0x240>
 800397a:	2304      	movs	r3, #4
 800397c:	e006      	b.n	800398c <HAL_GPIO_Init+0x240>
 800397e:	2303      	movs	r3, #3
 8003980:	e004      	b.n	800398c <HAL_GPIO_Init+0x240>
 8003982:	2302      	movs	r3, #2
 8003984:	e002      	b.n	800398c <HAL_GPIO_Init+0x240>
 8003986:	2301      	movs	r3, #1
 8003988:	e000      	b.n	800398c <HAL_GPIO_Init+0x240>
 800398a:	2300      	movs	r3, #0
 800398c:	69fa      	ldr	r2, [r7, #28]
 800398e:	f002 0203 	and.w	r2, r2, #3
 8003992:	0092      	lsls	r2, r2, #2
 8003994:	4093      	lsls	r3, r2
 8003996:	69ba      	ldr	r2, [r7, #24]
 8003998:	4313      	orrs	r3, r2
 800399a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800399c:	4935      	ldr	r1, [pc, #212]	; (8003a74 <HAL_GPIO_Init+0x328>)
 800399e:	69fb      	ldr	r3, [r7, #28]
 80039a0:	089b      	lsrs	r3, r3, #2
 80039a2:	3302      	adds	r3, #2
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80039aa:	4b3d      	ldr	r3, [pc, #244]	; (8003aa0 <HAL_GPIO_Init+0x354>)
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	43db      	mvns	r3, r3
 80039b4:	69ba      	ldr	r2, [r7, #24]
 80039b6:	4013      	ands	r3, r2
 80039b8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80039ba:	683b      	ldr	r3, [r7, #0]
 80039bc:	685b      	ldr	r3, [r3, #4]
 80039be:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d003      	beq.n	80039ce <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80039c6:	69ba      	ldr	r2, [r7, #24]
 80039c8:	693b      	ldr	r3, [r7, #16]
 80039ca:	4313      	orrs	r3, r2
 80039cc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80039ce:	4a34      	ldr	r2, [pc, #208]	; (8003aa0 <HAL_GPIO_Init+0x354>)
 80039d0:	69bb      	ldr	r3, [r7, #24]
 80039d2:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80039d4:	4b32      	ldr	r3, [pc, #200]	; (8003aa0 <HAL_GPIO_Init+0x354>)
 80039d6:	685b      	ldr	r3, [r3, #4]
 80039d8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80039da:	693b      	ldr	r3, [r7, #16]
 80039dc:	43db      	mvns	r3, r3
 80039de:	69ba      	ldr	r2, [r7, #24]
 80039e0:	4013      	ands	r3, r2
 80039e2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	685b      	ldr	r3, [r3, #4]
 80039e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d003      	beq.n	80039f8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80039f0:	69ba      	ldr	r2, [r7, #24]
 80039f2:	693b      	ldr	r3, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80039f8:	4a29      	ldr	r2, [pc, #164]	; (8003aa0 <HAL_GPIO_Init+0x354>)
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80039fe:	4b28      	ldr	r3, [pc, #160]	; (8003aa0 <HAL_GPIO_Init+0x354>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a04:	693b      	ldr	r3, [r7, #16]
 8003a06:	43db      	mvns	r3, r3
 8003a08:	69ba      	ldr	r2, [r7, #24]
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a0e:	683b      	ldr	r3, [r7, #0]
 8003a10:	685b      	ldr	r3, [r3, #4]
 8003a12:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d003      	beq.n	8003a22 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003a1a:	69ba      	ldr	r2, [r7, #24]
 8003a1c:	693b      	ldr	r3, [r7, #16]
 8003a1e:	4313      	orrs	r3, r2
 8003a20:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003a22:	4a1f      	ldr	r2, [pc, #124]	; (8003aa0 <HAL_GPIO_Init+0x354>)
 8003a24:	69bb      	ldr	r3, [r7, #24]
 8003a26:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003a28:	4b1d      	ldr	r3, [pc, #116]	; (8003aa0 <HAL_GPIO_Init+0x354>)
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	43db      	mvns	r3, r3
 8003a32:	69ba      	ldr	r2, [r7, #24]
 8003a34:	4013      	ands	r3, r2
 8003a36:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a38:	683b      	ldr	r3, [r7, #0]
 8003a3a:	685b      	ldr	r3, [r3, #4]
 8003a3c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d003      	beq.n	8003a4c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003a44:	69ba      	ldr	r2, [r7, #24]
 8003a46:	693b      	ldr	r3, [r7, #16]
 8003a48:	4313      	orrs	r3, r2
 8003a4a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003a4c:	4a14      	ldr	r2, [pc, #80]	; (8003aa0 <HAL_GPIO_Init+0x354>)
 8003a4e:	69bb      	ldr	r3, [r7, #24]
 8003a50:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3301      	adds	r3, #1
 8003a56:	61fb      	str	r3, [r7, #28]
 8003a58:	69fb      	ldr	r3, [r7, #28]
 8003a5a:	2b0f      	cmp	r3, #15
 8003a5c:	f67f ae84 	bls.w	8003768 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003a60:	bf00      	nop
 8003a62:	bf00      	nop
 8003a64:	3724      	adds	r7, #36	; 0x24
 8003a66:	46bd      	mov	sp, r7
 8003a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a6c:	4770      	bx	lr
 8003a6e:	bf00      	nop
 8003a70:	40023800 	.word	0x40023800
 8003a74:	40013800 	.word	0x40013800
 8003a78:	40020000 	.word	0x40020000
 8003a7c:	40020400 	.word	0x40020400
 8003a80:	40020800 	.word	0x40020800
 8003a84:	40020c00 	.word	0x40020c00
 8003a88:	40021000 	.word	0x40021000
 8003a8c:	40021400 	.word	0x40021400
 8003a90:	40021800 	.word	0x40021800
 8003a94:	40021c00 	.word	0x40021c00
 8003a98:	40022000 	.word	0x40022000
 8003a9c:	40022400 	.word	0x40022400
 8003aa0:	40013c00 	.word	0x40013c00

08003aa4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003aa4:	b480      	push	{r7}
 8003aa6:	b083      	sub	sp, #12
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
 8003aac:	460b      	mov	r3, r1
 8003aae:	807b      	strh	r3, [r7, #2]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003ab4:	787b      	ldrb	r3, [r7, #1]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d003      	beq.n	8003ac2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003aba:	887a      	ldrh	r2, [r7, #2]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003ac0:	e003      	b.n	8003aca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003ac2:	887b      	ldrh	r3, [r7, #2]
 8003ac4:	041a      	lsls	r2, r3, #16
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	619a      	str	r2, [r3, #24]
}
 8003aca:	bf00      	nop
 8003acc:	370c      	adds	r7, #12
 8003ace:	46bd      	mov	sp, r7
 8003ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad4:	4770      	bx	lr

08003ad6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003ad6:	b480      	push	{r7}
 8003ad8:	b085      	sub	sp, #20
 8003ada:	af00      	add	r7, sp, #0
 8003adc:	6078      	str	r0, [r7, #4]
 8003ade:	460b      	mov	r3, r1
 8003ae0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	695b      	ldr	r3, [r3, #20]
 8003ae6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003ae8:	887a      	ldrh	r2, [r7, #2]
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4013      	ands	r3, r2
 8003aee:	041a      	lsls	r2, r3, #16
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	43d9      	mvns	r1, r3
 8003af4:	887b      	ldrh	r3, [r7, #2]
 8003af6:	400b      	ands	r3, r1
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	619a      	str	r2, [r3, #24]
}
 8003afe:	bf00      	nop
 8003b00:	3714      	adds	r7, #20
 8003b02:	46bd      	mov	sp, r7
 8003b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b08:	4770      	bx	lr
	...

08003b0c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b082      	sub	sp, #8
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	4603      	mov	r3, r0
 8003b14:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003b16:	4b08      	ldr	r3, [pc, #32]	; (8003b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b18:	695a      	ldr	r2, [r3, #20]
 8003b1a:	88fb      	ldrh	r3, [r7, #6]
 8003b1c:	4013      	ands	r3, r2
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d006      	beq.n	8003b30 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003b22:	4a05      	ldr	r2, [pc, #20]	; (8003b38 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003b24:	88fb      	ldrh	r3, [r7, #6]
 8003b26:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003b28:	88fb      	ldrh	r3, [r7, #6]
 8003b2a:	4618      	mov	r0, r3
 8003b2c:	f7fe ffc2 	bl	8002ab4 <HAL_GPIO_EXTI_Callback>
  }
}
 8003b30:	bf00      	nop
 8003b32:	3708      	adds	r7, #8
 8003b34:	46bd      	mov	sp, r7
 8003b36:	bd80      	pop	{r7, pc}
 8003b38:	40013c00 	.word	0x40013c00

08003b3c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b3c:	b580      	push	{r7, lr}
 8003b3e:	b086      	sub	sp, #24
 8003b40:	af00      	add	r7, sp, #0
 8003b42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d101      	bne.n	8003b4e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b4a:	2301      	movs	r3, #1
 8003b4c:	e264      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 0301 	and.w	r3, r3, #1
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d075      	beq.n	8003c46 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b5a:	4ba3      	ldr	r3, [pc, #652]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003b5c:	689b      	ldr	r3, [r3, #8]
 8003b5e:	f003 030c 	and.w	r3, r3, #12
 8003b62:	2b04      	cmp	r3, #4
 8003b64:	d00c      	beq.n	8003b80 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b66:	4ba0      	ldr	r3, [pc, #640]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003b68:	689b      	ldr	r3, [r3, #8]
 8003b6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b6e:	2b08      	cmp	r3, #8
 8003b70:	d112      	bne.n	8003b98 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b72:	4b9d      	ldr	r3, [pc, #628]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003b74:	685b      	ldr	r3, [r3, #4]
 8003b76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b7a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b7e:	d10b      	bne.n	8003b98 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b80:	4b99      	ldr	r3, [pc, #612]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d05b      	beq.n	8003c44 <HAL_RCC_OscConfig+0x108>
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	685b      	ldr	r3, [r3, #4]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d157      	bne.n	8003c44 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e23f      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	685b      	ldr	r3, [r3, #4]
 8003b9c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ba0:	d106      	bne.n	8003bb0 <HAL_RCC_OscConfig+0x74>
 8003ba2:	4b91      	ldr	r3, [pc, #580]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	4a90      	ldr	r2, [pc, #576]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003ba8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bac:	6013      	str	r3, [r2, #0]
 8003bae:	e01d      	b.n	8003bec <HAL_RCC_OscConfig+0xb0>
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	685b      	ldr	r3, [r3, #4]
 8003bb4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003bb8:	d10c      	bne.n	8003bd4 <HAL_RCC_OscConfig+0x98>
 8003bba:	4b8b      	ldr	r3, [pc, #556]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4a8a      	ldr	r2, [pc, #552]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bc4:	6013      	str	r3, [r2, #0]
 8003bc6:	4b88      	ldr	r3, [pc, #544]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a87      	ldr	r2, [pc, #540]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003bcc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bd0:	6013      	str	r3, [r2, #0]
 8003bd2:	e00b      	b.n	8003bec <HAL_RCC_OscConfig+0xb0>
 8003bd4:	4b84      	ldr	r3, [pc, #528]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	4a83      	ldr	r2, [pc, #524]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003bda:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bde:	6013      	str	r3, [r2, #0]
 8003be0:	4b81      	ldr	r3, [pc, #516]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	4a80      	ldr	r2, [pc, #512]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003be6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bea:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	2b00      	cmp	r3, #0
 8003bf2:	d013      	beq.n	8003c1c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bf4:	f7ff fc68 	bl	80034c8 <HAL_GetTick>
 8003bf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bfa:	e008      	b.n	8003c0e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003bfc:	f7ff fc64 	bl	80034c8 <HAL_GetTick>
 8003c00:	4602      	mov	r2, r0
 8003c02:	693b      	ldr	r3, [r7, #16]
 8003c04:	1ad3      	subs	r3, r2, r3
 8003c06:	2b64      	cmp	r3, #100	; 0x64
 8003c08:	d901      	bls.n	8003c0e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003c0a:	2303      	movs	r3, #3
 8003c0c:	e204      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003c0e:	4b76      	ldr	r3, [pc, #472]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d0f0      	beq.n	8003bfc <HAL_RCC_OscConfig+0xc0>
 8003c1a:	e014      	b.n	8003c46 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c1c:	f7ff fc54 	bl	80034c8 <HAL_GetTick>
 8003c20:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c22:	e008      	b.n	8003c36 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c24:	f7ff fc50 	bl	80034c8 <HAL_GetTick>
 8003c28:	4602      	mov	r2, r0
 8003c2a:	693b      	ldr	r3, [r7, #16]
 8003c2c:	1ad3      	subs	r3, r2, r3
 8003c2e:	2b64      	cmp	r3, #100	; 0x64
 8003c30:	d901      	bls.n	8003c36 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e1f0      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c36:	4b6c      	ldr	r3, [pc, #432]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d1f0      	bne.n	8003c24 <HAL_RCC_OscConfig+0xe8>
 8003c42:	e000      	b.n	8003c46 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c44:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f003 0302 	and.w	r3, r3, #2
 8003c4e:	2b00      	cmp	r3, #0
 8003c50:	d063      	beq.n	8003d1a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c52:	4b65      	ldr	r3, [pc, #404]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d00b      	beq.n	8003c76 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c5e:	4b62      	ldr	r3, [pc, #392]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c66:	2b08      	cmp	r3, #8
 8003c68:	d11c      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c6a:	4b5f      	ldr	r3, [pc, #380]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c6c:	685b      	ldr	r3, [r3, #4]
 8003c6e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d116      	bne.n	8003ca4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c76:	4b5c      	ldr	r3, [pc, #368]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 0302 	and.w	r3, r3, #2
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d005      	beq.n	8003c8e <HAL_RCC_OscConfig+0x152>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	68db      	ldr	r3, [r3, #12]
 8003c86:	2b01      	cmp	r3, #1
 8003c88:	d001      	beq.n	8003c8e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c8a:	2301      	movs	r3, #1
 8003c8c:	e1c4      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c8e:	4b56      	ldr	r3, [pc, #344]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	691b      	ldr	r3, [r3, #16]
 8003c9a:	00db      	lsls	r3, r3, #3
 8003c9c:	4952      	ldr	r1, [pc, #328]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003ca2:	e03a      	b.n	8003d1a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	68db      	ldr	r3, [r3, #12]
 8003ca8:	2b00      	cmp	r3, #0
 8003caa:	d020      	beq.n	8003cee <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003cac:	4b4f      	ldr	r3, [pc, #316]	; (8003dec <HAL_RCC_OscConfig+0x2b0>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cb2:	f7ff fc09 	bl	80034c8 <HAL_GetTick>
 8003cb6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb8:	e008      	b.n	8003ccc <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cba:	f7ff fc05 	bl	80034c8 <HAL_GetTick>
 8003cbe:	4602      	mov	r2, r0
 8003cc0:	693b      	ldr	r3, [r7, #16]
 8003cc2:	1ad3      	subs	r3, r2, r3
 8003cc4:	2b02      	cmp	r3, #2
 8003cc6:	d901      	bls.n	8003ccc <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cc8:	2303      	movs	r3, #3
 8003cca:	e1a5      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003ccc:	4b46      	ldr	r3, [pc, #280]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f003 0302 	and.w	r3, r3, #2
 8003cd4:	2b00      	cmp	r3, #0
 8003cd6:	d0f0      	beq.n	8003cba <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cd8:	4b43      	ldr	r3, [pc, #268]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	691b      	ldr	r3, [r3, #16]
 8003ce4:	00db      	lsls	r3, r3, #3
 8003ce6:	4940      	ldr	r1, [pc, #256]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	600b      	str	r3, [r1, #0]
 8003cec:	e015      	b.n	8003d1a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cee:	4b3f      	ldr	r3, [pc, #252]	; (8003dec <HAL_RCC_OscConfig+0x2b0>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cf4:	f7ff fbe8 	bl	80034c8 <HAL_GetTick>
 8003cf8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cfa:	e008      	b.n	8003d0e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003cfc:	f7ff fbe4 	bl	80034c8 <HAL_GetTick>
 8003d00:	4602      	mov	r2, r0
 8003d02:	693b      	ldr	r3, [r7, #16]
 8003d04:	1ad3      	subs	r3, r2, r3
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d901      	bls.n	8003d0e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003d0a:	2303      	movs	r3, #3
 8003d0c:	e184      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003d0e:	4b36      	ldr	r3, [pc, #216]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 0302 	and.w	r3, r3, #2
 8003d16:	2b00      	cmp	r3, #0
 8003d18:	d1f0      	bne.n	8003cfc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0308 	and.w	r3, r3, #8
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d030      	beq.n	8003d88 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	695b      	ldr	r3, [r3, #20]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d016      	beq.n	8003d5c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d2e:	4b30      	ldr	r3, [pc, #192]	; (8003df0 <HAL_RCC_OscConfig+0x2b4>)
 8003d30:	2201      	movs	r2, #1
 8003d32:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d34:	f7ff fbc8 	bl	80034c8 <HAL_GetTick>
 8003d38:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d3a:	e008      	b.n	8003d4e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d3c:	f7ff fbc4 	bl	80034c8 <HAL_GetTick>
 8003d40:	4602      	mov	r2, r0
 8003d42:	693b      	ldr	r3, [r7, #16]
 8003d44:	1ad3      	subs	r3, r2, r3
 8003d46:	2b02      	cmp	r3, #2
 8003d48:	d901      	bls.n	8003d4e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d4a:	2303      	movs	r3, #3
 8003d4c:	e164      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d4e:	4b26      	ldr	r3, [pc, #152]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d52:	f003 0302 	and.w	r3, r3, #2
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d0f0      	beq.n	8003d3c <HAL_RCC_OscConfig+0x200>
 8003d5a:	e015      	b.n	8003d88 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d5c:	4b24      	ldr	r3, [pc, #144]	; (8003df0 <HAL_RCC_OscConfig+0x2b4>)
 8003d5e:	2200      	movs	r2, #0
 8003d60:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d62:	f7ff fbb1 	bl	80034c8 <HAL_GetTick>
 8003d66:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d68:	e008      	b.n	8003d7c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d6a:	f7ff fbad 	bl	80034c8 <HAL_GetTick>
 8003d6e:	4602      	mov	r2, r0
 8003d70:	693b      	ldr	r3, [r7, #16]
 8003d72:	1ad3      	subs	r3, r2, r3
 8003d74:	2b02      	cmp	r3, #2
 8003d76:	d901      	bls.n	8003d7c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003d78:	2303      	movs	r3, #3
 8003d7a:	e14d      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d7c:	4b1a      	ldr	r3, [pc, #104]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003d7e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d80:	f003 0302 	and.w	r3, r3, #2
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	d1f0      	bne.n	8003d6a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	f003 0304 	and.w	r3, r3, #4
 8003d90:	2b00      	cmp	r3, #0
 8003d92:	f000 80a0 	beq.w	8003ed6 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d96:	2300      	movs	r3, #0
 8003d98:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d9a:	4b13      	ldr	r3, [pc, #76]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d10f      	bne.n	8003dc6 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003da6:	2300      	movs	r3, #0
 8003da8:	60bb      	str	r3, [r7, #8]
 8003daa:	4b0f      	ldr	r3, [pc, #60]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dae:	4a0e      	ldr	r2, [pc, #56]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003db4:	6413      	str	r3, [r2, #64]	; 0x40
 8003db6:	4b0c      	ldr	r3, [pc, #48]	; (8003de8 <HAL_RCC_OscConfig+0x2ac>)
 8003db8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dbe:	60bb      	str	r3, [r7, #8]
 8003dc0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dc6:	4b0b      	ldr	r3, [pc, #44]	; (8003df4 <HAL_RCC_OscConfig+0x2b8>)
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d121      	bne.n	8003e16 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dd2:	4b08      	ldr	r3, [pc, #32]	; (8003df4 <HAL_RCC_OscConfig+0x2b8>)
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	4a07      	ldr	r2, [pc, #28]	; (8003df4 <HAL_RCC_OscConfig+0x2b8>)
 8003dd8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ddc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dde:	f7ff fb73 	bl	80034c8 <HAL_GetTick>
 8003de2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de4:	e011      	b.n	8003e0a <HAL_RCC_OscConfig+0x2ce>
 8003de6:	bf00      	nop
 8003de8:	40023800 	.word	0x40023800
 8003dec:	42470000 	.word	0x42470000
 8003df0:	42470e80 	.word	0x42470e80
 8003df4:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003df8:	f7ff fb66 	bl	80034c8 <HAL_GetTick>
 8003dfc:	4602      	mov	r2, r0
 8003dfe:	693b      	ldr	r3, [r7, #16]
 8003e00:	1ad3      	subs	r3, r2, r3
 8003e02:	2b02      	cmp	r3, #2
 8003e04:	d901      	bls.n	8003e0a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003e06:	2303      	movs	r3, #3
 8003e08:	e106      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003e0a:	4b85      	ldr	r3, [pc, #532]	; (8004020 <HAL_RCC_OscConfig+0x4e4>)
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	d0f0      	beq.n	8003df8 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	689b      	ldr	r3, [r3, #8]
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	d106      	bne.n	8003e2c <HAL_RCC_OscConfig+0x2f0>
 8003e1e:	4b81      	ldr	r3, [pc, #516]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a80      	ldr	r2, [pc, #512]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	e01c      	b.n	8003e66 <HAL_RCC_OscConfig+0x32a>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	689b      	ldr	r3, [r3, #8]
 8003e30:	2b05      	cmp	r3, #5
 8003e32:	d10c      	bne.n	8003e4e <HAL_RCC_OscConfig+0x312>
 8003e34:	4b7b      	ldr	r3, [pc, #492]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003e36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e38:	4a7a      	ldr	r2, [pc, #488]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003e3a:	f043 0304 	orr.w	r3, r3, #4
 8003e3e:	6713      	str	r3, [r2, #112]	; 0x70
 8003e40:	4b78      	ldr	r3, [pc, #480]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003e42:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e44:	4a77      	ldr	r2, [pc, #476]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003e46:	f043 0301 	orr.w	r3, r3, #1
 8003e4a:	6713      	str	r3, [r2, #112]	; 0x70
 8003e4c:	e00b      	b.n	8003e66 <HAL_RCC_OscConfig+0x32a>
 8003e4e:	4b75      	ldr	r3, [pc, #468]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e52:	4a74      	ldr	r2, [pc, #464]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003e54:	f023 0301 	bic.w	r3, r3, #1
 8003e58:	6713      	str	r3, [r2, #112]	; 0x70
 8003e5a:	4b72      	ldr	r3, [pc, #456]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003e5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e5e:	4a71      	ldr	r2, [pc, #452]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003e60:	f023 0304 	bic.w	r3, r3, #4
 8003e64:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	689b      	ldr	r3, [r3, #8]
 8003e6a:	2b00      	cmp	r3, #0
 8003e6c:	d015      	beq.n	8003e9a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e6e:	f7ff fb2b 	bl	80034c8 <HAL_GetTick>
 8003e72:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e74:	e00a      	b.n	8003e8c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e76:	f7ff fb27 	bl	80034c8 <HAL_GetTick>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	693b      	ldr	r3, [r7, #16]
 8003e7e:	1ad3      	subs	r3, r2, r3
 8003e80:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d901      	bls.n	8003e8c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8003e88:	2303      	movs	r3, #3
 8003e8a:	e0c5      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e8c:	4b65      	ldr	r3, [pc, #404]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003e8e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e90:	f003 0302 	and.w	r3, r3, #2
 8003e94:	2b00      	cmp	r3, #0
 8003e96:	d0ee      	beq.n	8003e76 <HAL_RCC_OscConfig+0x33a>
 8003e98:	e014      	b.n	8003ec4 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e9a:	f7ff fb15 	bl	80034c8 <HAL_GetTick>
 8003e9e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003ea0:	e00a      	b.n	8003eb8 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ea2:	f7ff fb11 	bl	80034c8 <HAL_GetTick>
 8003ea6:	4602      	mov	r2, r0
 8003ea8:	693b      	ldr	r3, [r7, #16]
 8003eaa:	1ad3      	subs	r3, r2, r3
 8003eac:	f241 3288 	movw	r2, #5000	; 0x1388
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d901      	bls.n	8003eb8 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8003eb4:	2303      	movs	r3, #3
 8003eb6:	e0af      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003eb8:	4b5a      	ldr	r3, [pc, #360]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003eba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ebc:	f003 0302 	and.w	r3, r3, #2
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d1ee      	bne.n	8003ea2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ec4:	7dfb      	ldrb	r3, [r7, #23]
 8003ec6:	2b01      	cmp	r3, #1
 8003ec8:	d105      	bne.n	8003ed6 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003eca:	4b56      	ldr	r3, [pc, #344]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ece:	4a55      	ldr	r2, [pc, #340]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003ed0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003ed4:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	2b00      	cmp	r3, #0
 8003edc:	f000 809b 	beq.w	8004016 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ee0:	4b50      	ldr	r3, [pc, #320]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 030c 	and.w	r3, r3, #12
 8003ee8:	2b08      	cmp	r3, #8
 8003eea:	d05c      	beq.n	8003fa6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	699b      	ldr	r3, [r3, #24]
 8003ef0:	2b02      	cmp	r3, #2
 8003ef2:	d141      	bne.n	8003f78 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ef4:	4b4c      	ldr	r3, [pc, #304]	; (8004028 <HAL_RCC_OscConfig+0x4ec>)
 8003ef6:	2200      	movs	r2, #0
 8003ef8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003efa:	f7ff fae5 	bl	80034c8 <HAL_GetTick>
 8003efe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f00:	e008      	b.n	8003f14 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f02:	f7ff fae1 	bl	80034c8 <HAL_GetTick>
 8003f06:	4602      	mov	r2, r0
 8003f08:	693b      	ldr	r3, [r7, #16]
 8003f0a:	1ad3      	subs	r3, r2, r3
 8003f0c:	2b02      	cmp	r3, #2
 8003f0e:	d901      	bls.n	8003f14 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8003f10:	2303      	movs	r3, #3
 8003f12:	e081      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f14:	4b43      	ldr	r3, [pc, #268]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f1c:	2b00      	cmp	r3, #0
 8003f1e:	d1f0      	bne.n	8003f02 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	69da      	ldr	r2, [r3, #28]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	6a1b      	ldr	r3, [r3, #32]
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2e:	019b      	lsls	r3, r3, #6
 8003f30:	431a      	orrs	r2, r3
 8003f32:	687b      	ldr	r3, [r7, #4]
 8003f34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f36:	085b      	lsrs	r3, r3, #1
 8003f38:	3b01      	subs	r3, #1
 8003f3a:	041b      	lsls	r3, r3, #16
 8003f3c:	431a      	orrs	r2, r3
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f42:	061b      	lsls	r3, r3, #24
 8003f44:	4937      	ldr	r1, [pc, #220]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003f46:	4313      	orrs	r3, r2
 8003f48:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f4a:	4b37      	ldr	r3, [pc, #220]	; (8004028 <HAL_RCC_OscConfig+0x4ec>)
 8003f4c:	2201      	movs	r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f50:	f7ff faba 	bl	80034c8 <HAL_GetTick>
 8003f54:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f56:	e008      	b.n	8003f6a <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f58:	f7ff fab6 	bl	80034c8 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	693b      	ldr	r3, [r7, #16]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	2b02      	cmp	r3, #2
 8003f64:	d901      	bls.n	8003f6a <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003f66:	2303      	movs	r3, #3
 8003f68:	e056      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f6a:	4b2e      	ldr	r3, [pc, #184]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d0f0      	beq.n	8003f58 <HAL_RCC_OscConfig+0x41c>
 8003f76:	e04e      	b.n	8004016 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f78:	4b2b      	ldr	r3, [pc, #172]	; (8004028 <HAL_RCC_OscConfig+0x4ec>)
 8003f7a:	2200      	movs	r2, #0
 8003f7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f7e:	f7ff faa3 	bl	80034c8 <HAL_GetTick>
 8003f82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f84:	e008      	b.n	8003f98 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f86:	f7ff fa9f 	bl	80034c8 <HAL_GetTick>
 8003f8a:	4602      	mov	r2, r0
 8003f8c:	693b      	ldr	r3, [r7, #16]
 8003f8e:	1ad3      	subs	r3, r2, r3
 8003f90:	2b02      	cmp	r3, #2
 8003f92:	d901      	bls.n	8003f98 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8003f94:	2303      	movs	r3, #3
 8003f96:	e03f      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f98:	4b22      	ldr	r3, [pc, #136]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d1f0      	bne.n	8003f86 <HAL_RCC_OscConfig+0x44a>
 8003fa4:	e037      	b.n	8004016 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	699b      	ldr	r3, [r3, #24]
 8003faa:	2b01      	cmp	r3, #1
 8003fac:	d101      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	e032      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003fb2:	4b1c      	ldr	r3, [pc, #112]	; (8004024 <HAL_RCC_OscConfig+0x4e8>)
 8003fb4:	685b      	ldr	r3, [r3, #4]
 8003fb6:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	2b01      	cmp	r3, #1
 8003fbe:	d028      	beq.n	8004012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fca:	429a      	cmp	r2, r3
 8003fcc:	d121      	bne.n	8004012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fd8:	429a      	cmp	r2, r3
 8003fda:	d11a      	bne.n	8004012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fdc:	68fa      	ldr	r2, [r7, #12]
 8003fde:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fe2:	4013      	ands	r3, r2
 8003fe4:	687a      	ldr	r2, [r7, #4]
 8003fe6:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fe8:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fea:	4293      	cmp	r3, r2
 8003fec:	d111      	bne.n	8004012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ff8:	085b      	lsrs	r3, r3, #1
 8003ffa:	3b01      	subs	r3, #1
 8003ffc:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ffe:	429a      	cmp	r2, r3
 8004000:	d107      	bne.n	8004012 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800400c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800400e:	429a      	cmp	r2, r3
 8004010:	d001      	beq.n	8004016 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8004012:	2301      	movs	r3, #1
 8004014:	e000      	b.n	8004018 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8004016:	2300      	movs	r3, #0
}
 8004018:	4618      	mov	r0, r3
 800401a:	3718      	adds	r7, #24
 800401c:	46bd      	mov	sp, r7
 800401e:	bd80      	pop	{r7, pc}
 8004020:	40007000 	.word	0x40007000
 8004024:	40023800 	.word	0x40023800
 8004028:	42470060 	.word	0x42470060

0800402c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800402c:	b580      	push	{r7, lr}
 800402e:	b084      	sub	sp, #16
 8004030:	af00      	add	r7, sp, #0
 8004032:	6078      	str	r0, [r7, #4]
 8004034:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d101      	bne.n	8004040 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800403c:	2301      	movs	r3, #1
 800403e:	e0cc      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004040:	4b68      	ldr	r3, [pc, #416]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f003 030f 	and.w	r3, r3, #15
 8004048:	683a      	ldr	r2, [r7, #0]
 800404a:	429a      	cmp	r2, r3
 800404c:	d90c      	bls.n	8004068 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800404e:	4b65      	ldr	r3, [pc, #404]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004050:	683a      	ldr	r2, [r7, #0]
 8004052:	b2d2      	uxtb	r2, r2
 8004054:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004056:	4b63      	ldr	r3, [pc, #396]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f003 030f 	and.w	r3, r3, #15
 800405e:	683a      	ldr	r2, [r7, #0]
 8004060:	429a      	cmp	r2, r3
 8004062:	d001      	beq.n	8004068 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004064:	2301      	movs	r3, #1
 8004066:	e0b8      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	f003 0302 	and.w	r3, r3, #2
 8004070:	2b00      	cmp	r3, #0
 8004072:	d020      	beq.n	80040b6 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	f003 0304 	and.w	r3, r3, #4
 800407c:	2b00      	cmp	r3, #0
 800407e:	d005      	beq.n	800408c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004080:	4b59      	ldr	r3, [pc, #356]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	689b      	ldr	r3, [r3, #8]
 8004084:	4a58      	ldr	r2, [pc, #352]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004086:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800408a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f003 0308 	and.w	r3, r3, #8
 8004094:	2b00      	cmp	r3, #0
 8004096:	d005      	beq.n	80040a4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004098:	4b53      	ldr	r3, [pc, #332]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800409a:	689b      	ldr	r3, [r3, #8]
 800409c:	4a52      	ldr	r2, [pc, #328]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800409e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80040a2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80040a4:	4b50      	ldr	r3, [pc, #320]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040a6:	689b      	ldr	r3, [r3, #8]
 80040a8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	494d      	ldr	r1, [pc, #308]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040b2:	4313      	orrs	r3, r2
 80040b4:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f003 0301 	and.w	r3, r3, #1
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d044      	beq.n	800414c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b01      	cmp	r3, #1
 80040c8:	d107      	bne.n	80040da <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ca:	4b47      	ldr	r3, [pc, #284]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d119      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e07f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	2b02      	cmp	r3, #2
 80040e0:	d003      	beq.n	80040ea <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040e6:	2b03      	cmp	r3, #3
 80040e8:	d107      	bne.n	80040fa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ea:	4b3f      	ldr	r3, [pc, #252]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d109      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
 80040f8:	e06f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fa:	4b3b      	ldr	r3, [pc, #236]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	f003 0302 	and.w	r3, r3, #2
 8004102:	2b00      	cmp	r3, #0
 8004104:	d101      	bne.n	800410a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004106:	2301      	movs	r3, #1
 8004108:	e067      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800410a:	4b37      	ldr	r3, [pc, #220]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800410c:	689b      	ldr	r3, [r3, #8]
 800410e:	f023 0203 	bic.w	r2, r3, #3
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4934      	ldr	r1, [pc, #208]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004118:	4313      	orrs	r3, r2
 800411a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800411c:	f7ff f9d4 	bl	80034c8 <HAL_GetTick>
 8004120:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004122:	e00a      	b.n	800413a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004124:	f7ff f9d0 	bl	80034c8 <HAL_GetTick>
 8004128:	4602      	mov	r2, r0
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	1ad3      	subs	r3, r2, r3
 800412e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004132:	4293      	cmp	r3, r2
 8004134:	d901      	bls.n	800413a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004136:	2303      	movs	r3, #3
 8004138:	e04f      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800413a:	4b2b      	ldr	r3, [pc, #172]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	f003 020c 	and.w	r2, r3, #12
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	009b      	lsls	r3, r3, #2
 8004148:	429a      	cmp	r2, r3
 800414a:	d1eb      	bne.n	8004124 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800414c:	4b25      	ldr	r3, [pc, #148]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f003 030f 	and.w	r3, r3, #15
 8004154:	683a      	ldr	r2, [r7, #0]
 8004156:	429a      	cmp	r2, r3
 8004158:	d20c      	bcs.n	8004174 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800415a:	4b22      	ldr	r3, [pc, #136]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 800415c:	683a      	ldr	r2, [r7, #0]
 800415e:	b2d2      	uxtb	r2, r2
 8004160:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004162:	4b20      	ldr	r3, [pc, #128]	; (80041e4 <HAL_RCC_ClockConfig+0x1b8>)
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	f003 030f 	and.w	r3, r3, #15
 800416a:	683a      	ldr	r2, [r7, #0]
 800416c:	429a      	cmp	r2, r3
 800416e:	d001      	beq.n	8004174 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004170:	2301      	movs	r3, #1
 8004172:	e032      	b.n	80041da <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	f003 0304 	and.w	r3, r3, #4
 800417c:	2b00      	cmp	r3, #0
 800417e:	d008      	beq.n	8004192 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004180:	4b19      	ldr	r3, [pc, #100]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 8004182:	689b      	ldr	r3, [r3, #8]
 8004184:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68db      	ldr	r3, [r3, #12]
 800418c:	4916      	ldr	r1, [pc, #88]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 800418e:	4313      	orrs	r3, r2
 8004190:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f003 0308 	and.w	r3, r3, #8
 800419a:	2b00      	cmp	r3, #0
 800419c:	d009      	beq.n	80041b2 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800419e:	4b12      	ldr	r3, [pc, #72]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041a0:	689b      	ldr	r3, [r3, #8]
 80041a2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	691b      	ldr	r3, [r3, #16]
 80041aa:	00db      	lsls	r3, r3, #3
 80041ac:	490e      	ldr	r1, [pc, #56]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ae:	4313      	orrs	r3, r2
 80041b0:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80041b2:	f000 f821 	bl	80041f8 <HAL_RCC_GetSysClockFreq>
 80041b6:	4602      	mov	r2, r0
 80041b8:	4b0b      	ldr	r3, [pc, #44]	; (80041e8 <HAL_RCC_ClockConfig+0x1bc>)
 80041ba:	689b      	ldr	r3, [r3, #8]
 80041bc:	091b      	lsrs	r3, r3, #4
 80041be:	f003 030f 	and.w	r3, r3, #15
 80041c2:	490a      	ldr	r1, [pc, #40]	; (80041ec <HAL_RCC_ClockConfig+0x1c0>)
 80041c4:	5ccb      	ldrb	r3, [r1, r3]
 80041c6:	fa22 f303 	lsr.w	r3, r2, r3
 80041ca:	4a09      	ldr	r2, [pc, #36]	; (80041f0 <HAL_RCC_ClockConfig+0x1c4>)
 80041cc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041ce:	4b09      	ldr	r3, [pc, #36]	; (80041f4 <HAL_RCC_ClockConfig+0x1c8>)
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f7ff f934 	bl	8003440 <HAL_InitTick>

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	40023c00 	.word	0x40023c00
 80041e8:	40023800 	.word	0x40023800
 80041ec:	08006f78 	.word	0x08006f78
 80041f0:	20000038 	.word	0x20000038
 80041f4:	2000003c 	.word	0x2000003c

080041f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041f8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80041fc:	b084      	sub	sp, #16
 80041fe:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004200:	2300      	movs	r3, #0
 8004202:	607b      	str	r3, [r7, #4]
 8004204:	2300      	movs	r3, #0
 8004206:	60fb      	str	r3, [r7, #12]
 8004208:	2300      	movs	r3, #0
 800420a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004210:	4b67      	ldr	r3, [pc, #412]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004212:	689b      	ldr	r3, [r3, #8]
 8004214:	f003 030c 	and.w	r3, r3, #12
 8004218:	2b08      	cmp	r3, #8
 800421a:	d00d      	beq.n	8004238 <HAL_RCC_GetSysClockFreq+0x40>
 800421c:	2b08      	cmp	r3, #8
 800421e:	f200 80bd 	bhi.w	800439c <HAL_RCC_GetSysClockFreq+0x1a4>
 8004222:	2b00      	cmp	r3, #0
 8004224:	d002      	beq.n	800422c <HAL_RCC_GetSysClockFreq+0x34>
 8004226:	2b04      	cmp	r3, #4
 8004228:	d003      	beq.n	8004232 <HAL_RCC_GetSysClockFreq+0x3a>
 800422a:	e0b7      	b.n	800439c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800422c:	4b61      	ldr	r3, [pc, #388]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800422e:	60bb      	str	r3, [r7, #8]
       break;
 8004230:	e0b7      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004232:	4b61      	ldr	r3, [pc, #388]	; (80043b8 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8004234:	60bb      	str	r3, [r7, #8]
      break;
 8004236:	e0b4      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004238:	4b5d      	ldr	r3, [pc, #372]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800423a:	685b      	ldr	r3, [r3, #4]
 800423c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004240:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004242:	4b5b      	ldr	r3, [pc, #364]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004244:	685b      	ldr	r3, [r3, #4]
 8004246:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800424a:	2b00      	cmp	r3, #0
 800424c:	d04d      	beq.n	80042ea <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800424e:	4b58      	ldr	r3, [pc, #352]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004250:	685b      	ldr	r3, [r3, #4]
 8004252:	099b      	lsrs	r3, r3, #6
 8004254:	461a      	mov	r2, r3
 8004256:	f04f 0300 	mov.w	r3, #0
 800425a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800425e:	f04f 0100 	mov.w	r1, #0
 8004262:	ea02 0800 	and.w	r8, r2, r0
 8004266:	ea03 0901 	and.w	r9, r3, r1
 800426a:	4640      	mov	r0, r8
 800426c:	4649      	mov	r1, r9
 800426e:	f04f 0200 	mov.w	r2, #0
 8004272:	f04f 0300 	mov.w	r3, #0
 8004276:	014b      	lsls	r3, r1, #5
 8004278:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800427c:	0142      	lsls	r2, r0, #5
 800427e:	4610      	mov	r0, r2
 8004280:	4619      	mov	r1, r3
 8004282:	ebb0 0008 	subs.w	r0, r0, r8
 8004286:	eb61 0109 	sbc.w	r1, r1, r9
 800428a:	f04f 0200 	mov.w	r2, #0
 800428e:	f04f 0300 	mov.w	r3, #0
 8004292:	018b      	lsls	r3, r1, #6
 8004294:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004298:	0182      	lsls	r2, r0, #6
 800429a:	1a12      	subs	r2, r2, r0
 800429c:	eb63 0301 	sbc.w	r3, r3, r1
 80042a0:	f04f 0000 	mov.w	r0, #0
 80042a4:	f04f 0100 	mov.w	r1, #0
 80042a8:	00d9      	lsls	r1, r3, #3
 80042aa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80042ae:	00d0      	lsls	r0, r2, #3
 80042b0:	4602      	mov	r2, r0
 80042b2:	460b      	mov	r3, r1
 80042b4:	eb12 0208 	adds.w	r2, r2, r8
 80042b8:	eb43 0309 	adc.w	r3, r3, r9
 80042bc:	f04f 0000 	mov.w	r0, #0
 80042c0:	f04f 0100 	mov.w	r1, #0
 80042c4:	0259      	lsls	r1, r3, #9
 80042c6:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80042ca:	0250      	lsls	r0, r2, #9
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4610      	mov	r0, r2
 80042d2:	4619      	mov	r1, r3
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	461a      	mov	r2, r3
 80042d8:	f04f 0300 	mov.w	r3, #0
 80042dc:	f7fb fff0 	bl	80002c0 <__aeabi_uldivmod>
 80042e0:	4602      	mov	r2, r0
 80042e2:	460b      	mov	r3, r1
 80042e4:	4613      	mov	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
 80042e8:	e04a      	b.n	8004380 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042ea:	4b31      	ldr	r3, [pc, #196]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80042ec:	685b      	ldr	r3, [r3, #4]
 80042ee:	099b      	lsrs	r3, r3, #6
 80042f0:	461a      	mov	r2, r3
 80042f2:	f04f 0300 	mov.w	r3, #0
 80042f6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80042fa:	f04f 0100 	mov.w	r1, #0
 80042fe:	ea02 0400 	and.w	r4, r2, r0
 8004302:	ea03 0501 	and.w	r5, r3, r1
 8004306:	4620      	mov	r0, r4
 8004308:	4629      	mov	r1, r5
 800430a:	f04f 0200 	mov.w	r2, #0
 800430e:	f04f 0300 	mov.w	r3, #0
 8004312:	014b      	lsls	r3, r1, #5
 8004314:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8004318:	0142      	lsls	r2, r0, #5
 800431a:	4610      	mov	r0, r2
 800431c:	4619      	mov	r1, r3
 800431e:	1b00      	subs	r0, r0, r4
 8004320:	eb61 0105 	sbc.w	r1, r1, r5
 8004324:	f04f 0200 	mov.w	r2, #0
 8004328:	f04f 0300 	mov.w	r3, #0
 800432c:	018b      	lsls	r3, r1, #6
 800432e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8004332:	0182      	lsls	r2, r0, #6
 8004334:	1a12      	subs	r2, r2, r0
 8004336:	eb63 0301 	sbc.w	r3, r3, r1
 800433a:	f04f 0000 	mov.w	r0, #0
 800433e:	f04f 0100 	mov.w	r1, #0
 8004342:	00d9      	lsls	r1, r3, #3
 8004344:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004348:	00d0      	lsls	r0, r2, #3
 800434a:	4602      	mov	r2, r0
 800434c:	460b      	mov	r3, r1
 800434e:	1912      	adds	r2, r2, r4
 8004350:	eb45 0303 	adc.w	r3, r5, r3
 8004354:	f04f 0000 	mov.w	r0, #0
 8004358:	f04f 0100 	mov.w	r1, #0
 800435c:	0299      	lsls	r1, r3, #10
 800435e:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8004362:	0290      	lsls	r0, r2, #10
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4610      	mov	r0, r2
 800436a:	4619      	mov	r1, r3
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	461a      	mov	r2, r3
 8004370:	f04f 0300 	mov.w	r3, #0
 8004374:	f7fb ffa4 	bl	80002c0 <__aeabi_uldivmod>
 8004378:	4602      	mov	r2, r0
 800437a:	460b      	mov	r3, r1
 800437c:	4613      	mov	r3, r2
 800437e:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004380:	4b0b      	ldr	r3, [pc, #44]	; (80043b0 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	0c1b      	lsrs	r3, r3, #16
 8004386:	f003 0303 	and.w	r3, r3, #3
 800438a:	3301      	adds	r3, #1
 800438c:	005b      	lsls	r3, r3, #1
 800438e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	683b      	ldr	r3, [r7, #0]
 8004394:	fbb2 f3f3 	udiv	r3, r2, r3
 8004398:	60bb      	str	r3, [r7, #8]
      break;
 800439a:	e002      	b.n	80043a2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800439c:	4b05      	ldr	r3, [pc, #20]	; (80043b4 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800439e:	60bb      	str	r3, [r7, #8]
      break;
 80043a0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043a2:	68bb      	ldr	r3, [r7, #8]
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	3710      	adds	r7, #16
 80043a8:	46bd      	mov	sp, r7
 80043aa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043ae:	bf00      	nop
 80043b0:	40023800 	.word	0x40023800
 80043b4:	00f42400 	.word	0x00f42400
 80043b8:	007a1200 	.word	0x007a1200

080043bc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043bc:	b480      	push	{r7}
 80043be:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043c0:	4b03      	ldr	r3, [pc, #12]	; (80043d0 <HAL_RCC_GetHCLKFreq+0x14>)
 80043c2:	681b      	ldr	r3, [r3, #0]
}
 80043c4:	4618      	mov	r0, r3
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	20000038 	.word	0x20000038

080043d4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80043d4:	b580      	push	{r7, lr}
 80043d6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80043d8:	f7ff fff0 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 80043dc:	4602      	mov	r2, r0
 80043de:	4b05      	ldr	r3, [pc, #20]	; (80043f4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80043e0:	689b      	ldr	r3, [r3, #8]
 80043e2:	0a9b      	lsrs	r3, r3, #10
 80043e4:	f003 0307 	and.w	r3, r3, #7
 80043e8:	4903      	ldr	r1, [pc, #12]	; (80043f8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80043ea:	5ccb      	ldrb	r3, [r1, r3]
 80043ec:	fa22 f303 	lsr.w	r3, r2, r3
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	bd80      	pop	{r7, pc}
 80043f4:	40023800 	.word	0x40023800
 80043f8:	08006f88 	.word	0x08006f88

080043fc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80043fc:	b580      	push	{r7, lr}
 80043fe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004400:	f7ff ffdc 	bl	80043bc <HAL_RCC_GetHCLKFreq>
 8004404:	4602      	mov	r2, r0
 8004406:	4b05      	ldr	r3, [pc, #20]	; (800441c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	0b5b      	lsrs	r3, r3, #13
 800440c:	f003 0307 	and.w	r3, r3, #7
 8004410:	4903      	ldr	r1, [pc, #12]	; (8004420 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004412:	5ccb      	ldrb	r3, [r1, r3]
 8004414:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004418:	4618      	mov	r0, r3
 800441a:	bd80      	pop	{r7, pc}
 800441c:	40023800 	.word	0x40023800
 8004420:	08006f88 	.word	0x08006f88

08004424 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b082      	sub	sp, #8
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2b00      	cmp	r3, #0
 8004430:	d101      	bne.n	8004436 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004432:	2301      	movs	r3, #1
 8004434:	e041      	b.n	80044ba <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800443c:	b2db      	uxtb	r3, r3
 800443e:	2b00      	cmp	r3, #0
 8004440:	d106      	bne.n	8004450 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	2200      	movs	r2, #0
 8004446:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800444a:	6878      	ldr	r0, [r7, #4]
 800444c:	f7fe fdc4 	bl	8002fd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	2202      	movs	r2, #2
 8004454:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	3304      	adds	r3, #4
 8004460:	4619      	mov	r1, r3
 8004462:	4610      	mov	r0, r2
 8004464:	f000 fee2 	bl	800522c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	2201      	movs	r2, #1
 800446c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2201      	movs	r2, #1
 8004484:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2201      	movs	r2, #1
 800448c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2201      	movs	r2, #1
 8004494:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	2201      	movs	r2, #1
 800449c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	2201      	movs	r2, #1
 80044a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2201      	movs	r2, #1
 80044ac:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80044b8:	2300      	movs	r3, #0
}
 80044ba:	4618      	mov	r0, r3
 80044bc:	3708      	adds	r7, #8
 80044be:	46bd      	mov	sp, r7
 80044c0:	bd80      	pop	{r7, pc}
	...

080044c4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b085      	sub	sp, #20
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044d2:	b2db      	uxtb	r3, r3
 80044d4:	2b01      	cmp	r3, #1
 80044d6:	d001      	beq.n	80044dc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80044d8:	2301      	movs	r3, #1
 80044da:	e04e      	b.n	800457a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2202      	movs	r2, #2
 80044e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	68da      	ldr	r2, [r3, #12]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	f042 0201 	orr.w	r2, r2, #1
 80044f2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	4a23      	ldr	r2, [pc, #140]	; (8004588 <HAL_TIM_Base_Start_IT+0xc4>)
 80044fa:	4293      	cmp	r3, r2
 80044fc:	d022      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x80>
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004506:	d01d      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x80>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	4a1f      	ldr	r2, [pc, #124]	; (800458c <HAL_TIM_Base_Start_IT+0xc8>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d018      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x80>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a1e      	ldr	r2, [pc, #120]	; (8004590 <HAL_TIM_Base_Start_IT+0xcc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d013      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x80>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a1c      	ldr	r2, [pc, #112]	; (8004594 <HAL_TIM_Base_Start_IT+0xd0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d00e      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x80>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a1b      	ldr	r2, [pc, #108]	; (8004598 <HAL_TIM_Base_Start_IT+0xd4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d009      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x80>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a19      	ldr	r2, [pc, #100]	; (800459c <HAL_TIM_Base_Start_IT+0xd8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d004      	beq.n	8004544 <HAL_TIM_Base_Start_IT+0x80>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	4a18      	ldr	r2, [pc, #96]	; (80045a0 <HAL_TIM_Base_Start_IT+0xdc>)
 8004540:	4293      	cmp	r3, r2
 8004542:	d111      	bne.n	8004568 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 0307 	and.w	r3, r3, #7
 800454e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004550:	68fb      	ldr	r3, [r7, #12]
 8004552:	2b06      	cmp	r3, #6
 8004554:	d010      	beq.n	8004578 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681a      	ldr	r2, [r3, #0]
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	681b      	ldr	r3, [r3, #0]
 8004560:	f042 0201 	orr.w	r2, r2, #1
 8004564:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004566:	e007      	b.n	8004578 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f042 0201 	orr.w	r2, r2, #1
 8004576:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004578:	2300      	movs	r3, #0
}
 800457a:	4618      	mov	r0, r3
 800457c:	3714      	adds	r7, #20
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	40010000 	.word	0x40010000
 800458c:	40000400 	.word	0x40000400
 8004590:	40000800 	.word	0x40000800
 8004594:	40000c00 	.word	0x40000c00
 8004598:	40010400 	.word	0x40010400
 800459c:	40014000 	.word	0x40014000
 80045a0:	40001800 	.word	0x40001800

080045a4 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80045a4:	b480      	push	{r7}
 80045a6:	b083      	sub	sp, #12
 80045a8:	af00      	add	r7, sp, #0
 80045aa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	68da      	ldr	r2, [r3, #12]
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	f022 0201 	bic.w	r2, r2, #1
 80045ba:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	6a1a      	ldr	r2, [r3, #32]
 80045c2:	f241 1311 	movw	r3, #4369	; 0x1111
 80045c6:	4013      	ands	r3, r2
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d10f      	bne.n	80045ec <HAL_TIM_Base_Stop_IT+0x48>
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	6a1a      	ldr	r2, [r3, #32]
 80045d2:	f240 4344 	movw	r3, #1092	; 0x444
 80045d6:	4013      	ands	r3, r2
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d107      	bne.n	80045ec <HAL_TIM_Base_Stop_IT+0x48>
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	681a      	ldr	r2, [r3, #0]
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	681b      	ldr	r3, [r3, #0]
 80045e6:	f022 0201 	bic.w	r2, r2, #1
 80045ea:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80045f4:	2300      	movs	r3, #0
}
 80045f6:	4618      	mov	r0, r3
 80045f8:	370c      	adds	r7, #12
 80045fa:	46bd      	mov	sp, r7
 80045fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004600:	4770      	bx	lr

08004602 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004602:	b580      	push	{r7, lr}
 8004604:	b082      	sub	sp, #8
 8004606:	af00      	add	r7, sp, #0
 8004608:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	2b00      	cmp	r3, #0
 800460e:	d101      	bne.n	8004614 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	e041      	b.n	8004698 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800461a:	b2db      	uxtb	r3, r3
 800461c:	2b00      	cmp	r3, #0
 800461e:	d106      	bne.n	800462e <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2200      	movs	r2, #0
 8004624:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	f000 f839 	bl	80046a0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2202      	movs	r2, #2
 8004632:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	681a      	ldr	r2, [r3, #0]
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	3304      	adds	r3, #4
 800463e:	4619      	mov	r1, r3
 8004640:	4610      	mov	r0, r2
 8004642:	f000 fdf3 	bl	800522c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	2201      	movs	r2, #1
 800464a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2201      	movs	r2, #1
 8004652:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2201      	movs	r2, #1
 800465a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	2201      	movs	r2, #1
 8004662:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	2201      	movs	r2, #1
 800466a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	2201      	movs	r2, #1
 8004672:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2201      	movs	r2, #1
 800467a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	2201      	movs	r2, #1
 8004682:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2201      	movs	r2, #1
 800468a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004696:	2300      	movs	r3, #0
}
 8004698:	4618      	mov	r0, r3
 800469a:	3708      	adds	r7, #8
 800469c:	46bd      	mov	sp, r7
 800469e:	bd80      	pop	{r7, pc}

080046a0 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80046a0:	b480      	push	{r7}
 80046a2:	b083      	sub	sp, #12
 80046a4:	af00      	add	r7, sp, #0
 80046a6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80046a8:	bf00      	nop
 80046aa:	370c      	adds	r7, #12
 80046ac:	46bd      	mov	sp, r7
 80046ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b2:	4770      	bx	lr

080046b4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80046b4:	b580      	push	{r7, lr}
 80046b6:	b084      	sub	sp, #16
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	6078      	str	r0, [r7, #4]
 80046bc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d109      	bne.n	80046d8 <HAL_TIM_PWM_Start+0x24>
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80046ca:	b2db      	uxtb	r3, r3
 80046cc:	2b01      	cmp	r3, #1
 80046ce:	bf14      	ite	ne
 80046d0:	2301      	movne	r3, #1
 80046d2:	2300      	moveq	r3, #0
 80046d4:	b2db      	uxtb	r3, r3
 80046d6:	e022      	b.n	800471e <HAL_TIM_PWM_Start+0x6a>
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	2b04      	cmp	r3, #4
 80046dc:	d109      	bne.n	80046f2 <HAL_TIM_PWM_Start+0x3e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80046e4:	b2db      	uxtb	r3, r3
 80046e6:	2b01      	cmp	r3, #1
 80046e8:	bf14      	ite	ne
 80046ea:	2301      	movne	r3, #1
 80046ec:	2300      	moveq	r3, #0
 80046ee:	b2db      	uxtb	r3, r3
 80046f0:	e015      	b.n	800471e <HAL_TIM_PWM_Start+0x6a>
 80046f2:	683b      	ldr	r3, [r7, #0]
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	d109      	bne.n	800470c <HAL_TIM_PWM_Start+0x58>
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80046fe:	b2db      	uxtb	r3, r3
 8004700:	2b01      	cmp	r3, #1
 8004702:	bf14      	ite	ne
 8004704:	2301      	movne	r3, #1
 8004706:	2300      	moveq	r3, #0
 8004708:	b2db      	uxtb	r3, r3
 800470a:	e008      	b.n	800471e <HAL_TIM_PWM_Start+0x6a>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004712:	b2db      	uxtb	r3, r3
 8004714:	2b01      	cmp	r3, #1
 8004716:	bf14      	ite	ne
 8004718:	2301      	movne	r3, #1
 800471a:	2300      	moveq	r3, #0
 800471c:	b2db      	uxtb	r3, r3
 800471e:	2b00      	cmp	r3, #0
 8004720:	d001      	beq.n	8004726 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004722:	2301      	movs	r3, #1
 8004724:	e07c      	b.n	8004820 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	2b00      	cmp	r3, #0
 800472a:	d104      	bne.n	8004736 <HAL_TIM_PWM_Start+0x82>
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	2202      	movs	r2, #2
 8004730:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004734:	e013      	b.n	800475e <HAL_TIM_PWM_Start+0xaa>
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	2b04      	cmp	r3, #4
 800473a:	d104      	bne.n	8004746 <HAL_TIM_PWM_Start+0x92>
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	2202      	movs	r2, #2
 8004740:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004744:	e00b      	b.n	800475e <HAL_TIM_PWM_Start+0xaa>
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	2b08      	cmp	r3, #8
 800474a:	d104      	bne.n	8004756 <HAL_TIM_PWM_Start+0xa2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	2202      	movs	r2, #2
 8004750:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004754:	e003      	b.n	800475e <HAL_TIM_PWM_Start+0xaa>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	2202      	movs	r2, #2
 800475a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	2201      	movs	r2, #1
 8004764:	6839      	ldr	r1, [r7, #0]
 8004766:	4618      	mov	r0, r3
 8004768:	f001 f84a 	bl	8005800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	4a2d      	ldr	r2, [pc, #180]	; (8004828 <HAL_TIM_PWM_Start+0x174>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d004      	beq.n	8004780 <HAL_TIM_PWM_Start+0xcc>
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	4a2c      	ldr	r2, [pc, #176]	; (800482c <HAL_TIM_PWM_Start+0x178>)
 800477c:	4293      	cmp	r3, r2
 800477e:	d101      	bne.n	8004784 <HAL_TIM_PWM_Start+0xd0>
 8004780:	2301      	movs	r3, #1
 8004782:	e000      	b.n	8004786 <HAL_TIM_PWM_Start+0xd2>
 8004784:	2300      	movs	r3, #0
 8004786:	2b00      	cmp	r3, #0
 8004788:	d007      	beq.n	800479a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004798:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	4a22      	ldr	r2, [pc, #136]	; (8004828 <HAL_TIM_PWM_Start+0x174>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d022      	beq.n	80047ea <HAL_TIM_PWM_Start+0x136>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047ac:	d01d      	beq.n	80047ea <HAL_TIM_PWM_Start+0x136>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4a1f      	ldr	r2, [pc, #124]	; (8004830 <HAL_TIM_PWM_Start+0x17c>)
 80047b4:	4293      	cmp	r3, r2
 80047b6:	d018      	beq.n	80047ea <HAL_TIM_PWM_Start+0x136>
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <HAL_TIM_PWM_Start+0x180>)
 80047be:	4293      	cmp	r3, r2
 80047c0:	d013      	beq.n	80047ea <HAL_TIM_PWM_Start+0x136>
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	4a1c      	ldr	r2, [pc, #112]	; (8004838 <HAL_TIM_PWM_Start+0x184>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d00e      	beq.n	80047ea <HAL_TIM_PWM_Start+0x136>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	4a16      	ldr	r2, [pc, #88]	; (800482c <HAL_TIM_PWM_Start+0x178>)
 80047d2:	4293      	cmp	r3, r2
 80047d4:	d009      	beq.n	80047ea <HAL_TIM_PWM_Start+0x136>
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a18      	ldr	r2, [pc, #96]	; (800483c <HAL_TIM_PWM_Start+0x188>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d004      	beq.n	80047ea <HAL_TIM_PWM_Start+0x136>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	4a16      	ldr	r2, [pc, #88]	; (8004840 <HAL_TIM_PWM_Start+0x18c>)
 80047e6:	4293      	cmp	r3, r2
 80047e8:	d111      	bne.n	800480e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	689b      	ldr	r3, [r3, #8]
 80047f0:	f003 0307 	and.w	r3, r3, #7
 80047f4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80047f6:	68fb      	ldr	r3, [r7, #12]
 80047f8:	2b06      	cmp	r3, #6
 80047fa:	d010      	beq.n	800481e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	681a      	ldr	r2, [r3, #0]
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	f042 0201 	orr.w	r2, r2, #1
 800480a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800480c:	e007      	b.n	800481e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	681a      	ldr	r2, [r3, #0]
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f042 0201 	orr.w	r2, r2, #1
 800481c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800481e:	2300      	movs	r3, #0
}
 8004820:	4618      	mov	r0, r3
 8004822:	3710      	adds	r7, #16
 8004824:	46bd      	mov	sp, r7
 8004826:	bd80      	pop	{r7, pc}
 8004828:	40010000 	.word	0x40010000
 800482c:	40010400 	.word	0x40010400
 8004830:	40000400 	.word	0x40000400
 8004834:	40000800 	.word	0x40000800
 8004838:	40000c00 	.word	0x40000c00
 800483c:	40014000 	.word	0x40014000
 8004840:	40001800 	.word	0x40001800

08004844 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004844:	b580      	push	{r7, lr}
 8004846:	b082      	sub	sp, #8
 8004848:	af00      	add	r7, sp, #0
 800484a:	6078      	str	r0, [r7, #4]
 800484c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	2200      	movs	r2, #0
 8004854:	6839      	ldr	r1, [r7, #0]
 8004856:	4618      	mov	r0, r3
 8004858:	f000 ffd2 	bl	8005800 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	4a2e      	ldr	r2, [pc, #184]	; (800491c <HAL_TIM_PWM_Stop+0xd8>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d004      	beq.n	8004870 <HAL_TIM_PWM_Stop+0x2c>
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	4a2d      	ldr	r2, [pc, #180]	; (8004920 <HAL_TIM_PWM_Stop+0xdc>)
 800486c:	4293      	cmp	r3, r2
 800486e:	d101      	bne.n	8004874 <HAL_TIM_PWM_Stop+0x30>
 8004870:	2301      	movs	r3, #1
 8004872:	e000      	b.n	8004876 <HAL_TIM_PWM_Stop+0x32>
 8004874:	2300      	movs	r3, #0
 8004876:	2b00      	cmp	r3, #0
 8004878:	d017      	beq.n	80048aa <HAL_TIM_PWM_Stop+0x66>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	6a1a      	ldr	r2, [r3, #32]
 8004880:	f241 1311 	movw	r3, #4369	; 0x1111
 8004884:	4013      	ands	r3, r2
 8004886:	2b00      	cmp	r3, #0
 8004888:	d10f      	bne.n	80048aa <HAL_TIM_PWM_Stop+0x66>
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	6a1a      	ldr	r2, [r3, #32]
 8004890:	f240 4344 	movw	r3, #1092	; 0x444
 8004894:	4013      	ands	r3, r2
 8004896:	2b00      	cmp	r3, #0
 8004898:	d107      	bne.n	80048aa <HAL_TIM_PWM_Stop+0x66>
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80048a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	6a1a      	ldr	r2, [r3, #32]
 80048b0:	f241 1311 	movw	r3, #4369	; 0x1111
 80048b4:	4013      	ands	r3, r2
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d10f      	bne.n	80048da <HAL_TIM_PWM_Stop+0x96>
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	6a1a      	ldr	r2, [r3, #32]
 80048c0:	f240 4344 	movw	r3, #1092	; 0x444
 80048c4:	4013      	ands	r3, r2
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d107      	bne.n	80048da <HAL_TIM_PWM_Stop+0x96>
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	681a      	ldr	r2, [r3, #0]
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f022 0201 	bic.w	r2, r2, #1
 80048d8:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80048da:	683b      	ldr	r3, [r7, #0]
 80048dc:	2b00      	cmp	r3, #0
 80048de:	d104      	bne.n	80048ea <HAL_TIM_PWM_Stop+0xa6>
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	2201      	movs	r2, #1
 80048e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048e8:	e013      	b.n	8004912 <HAL_TIM_PWM_Stop+0xce>
 80048ea:	683b      	ldr	r3, [r7, #0]
 80048ec:	2b04      	cmp	r3, #4
 80048ee:	d104      	bne.n	80048fa <HAL_TIM_PWM_Stop+0xb6>
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	2201      	movs	r2, #1
 80048f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048f8:	e00b      	b.n	8004912 <HAL_TIM_PWM_Stop+0xce>
 80048fa:	683b      	ldr	r3, [r7, #0]
 80048fc:	2b08      	cmp	r3, #8
 80048fe:	d104      	bne.n	800490a <HAL_TIM_PWM_Stop+0xc6>
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2201      	movs	r2, #1
 8004904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004908:	e003      	b.n	8004912 <HAL_TIM_PWM_Stop+0xce>
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2201      	movs	r2, #1
 800490e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004912:	2300      	movs	r3, #0
}
 8004914:	4618      	mov	r0, r3
 8004916:	3708      	adds	r7, #8
 8004918:	46bd      	mov	sp, r7
 800491a:	bd80      	pop	{r7, pc}
 800491c:	40010000 	.word	0x40010000
 8004920:	40010400 	.word	0x40010400

08004924 <HAL_TIM_PWM_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004924:	b580      	push	{r7, lr}
 8004926:	b084      	sub	sp, #16
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800492e:	2300      	movs	r3, #0
 8004930:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	2b00      	cmp	r3, #0
 8004936:	d109      	bne.n	800494c <HAL_TIM_PWM_Start_IT+0x28>
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800493e:	b2db      	uxtb	r3, r3
 8004940:	2b01      	cmp	r3, #1
 8004942:	bf14      	ite	ne
 8004944:	2301      	movne	r3, #1
 8004946:	2300      	moveq	r3, #0
 8004948:	b2db      	uxtb	r3, r3
 800494a:	e022      	b.n	8004992 <HAL_TIM_PWM_Start_IT+0x6e>
 800494c:	683b      	ldr	r3, [r7, #0]
 800494e:	2b04      	cmp	r3, #4
 8004950:	d109      	bne.n	8004966 <HAL_TIM_PWM_Start_IT+0x42>
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004958:	b2db      	uxtb	r3, r3
 800495a:	2b01      	cmp	r3, #1
 800495c:	bf14      	ite	ne
 800495e:	2301      	movne	r3, #1
 8004960:	2300      	moveq	r3, #0
 8004962:	b2db      	uxtb	r3, r3
 8004964:	e015      	b.n	8004992 <HAL_TIM_PWM_Start_IT+0x6e>
 8004966:	683b      	ldr	r3, [r7, #0]
 8004968:	2b08      	cmp	r3, #8
 800496a:	d109      	bne.n	8004980 <HAL_TIM_PWM_Start_IT+0x5c>
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004972:	b2db      	uxtb	r3, r3
 8004974:	2b01      	cmp	r3, #1
 8004976:	bf14      	ite	ne
 8004978:	2301      	movne	r3, #1
 800497a:	2300      	moveq	r3, #0
 800497c:	b2db      	uxtb	r3, r3
 800497e:	e008      	b.n	8004992 <HAL_TIM_PWM_Start_IT+0x6e>
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004986:	b2db      	uxtb	r3, r3
 8004988:	2b01      	cmp	r3, #1
 800498a:	bf14      	ite	ne
 800498c:	2301      	movne	r3, #1
 800498e:	2300      	moveq	r3, #0
 8004990:	b2db      	uxtb	r3, r3
 8004992:	2b00      	cmp	r3, #0
 8004994:	d001      	beq.n	800499a <HAL_TIM_PWM_Start_IT+0x76>
  {
    return HAL_ERROR;
 8004996:	2301      	movs	r3, #1
 8004998:	e0c7      	b.n	8004b2a <HAL_TIM_PWM_Start_IT+0x206>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	2b00      	cmp	r3, #0
 800499e:	d104      	bne.n	80049aa <HAL_TIM_PWM_Start_IT+0x86>
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2202      	movs	r2, #2
 80049a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049a8:	e013      	b.n	80049d2 <HAL_TIM_PWM_Start_IT+0xae>
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	2b04      	cmp	r3, #4
 80049ae:	d104      	bne.n	80049ba <HAL_TIM_PWM_Start_IT+0x96>
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049b8:	e00b      	b.n	80049d2 <HAL_TIM_PWM_Start_IT+0xae>
 80049ba:	683b      	ldr	r3, [r7, #0]
 80049bc:	2b08      	cmp	r3, #8
 80049be:	d104      	bne.n	80049ca <HAL_TIM_PWM_Start_IT+0xa6>
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	2202      	movs	r2, #2
 80049c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049c8:	e003      	b.n	80049d2 <HAL_TIM_PWM_Start_IT+0xae>
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	2202      	movs	r2, #2
 80049ce:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	2b0c      	cmp	r3, #12
 80049d6:	d841      	bhi.n	8004a5c <HAL_TIM_PWM_Start_IT+0x138>
 80049d8:	a201      	add	r2, pc, #4	; (adr r2, 80049e0 <HAL_TIM_PWM_Start_IT+0xbc>)
 80049da:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80049de:	bf00      	nop
 80049e0:	08004a15 	.word	0x08004a15
 80049e4:	08004a5d 	.word	0x08004a5d
 80049e8:	08004a5d 	.word	0x08004a5d
 80049ec:	08004a5d 	.word	0x08004a5d
 80049f0:	08004a27 	.word	0x08004a27
 80049f4:	08004a5d 	.word	0x08004a5d
 80049f8:	08004a5d 	.word	0x08004a5d
 80049fc:	08004a5d 	.word	0x08004a5d
 8004a00:	08004a39 	.word	0x08004a39
 8004a04:	08004a5d 	.word	0x08004a5d
 8004a08:	08004a5d 	.word	0x08004a5d
 8004a0c:	08004a5d 	.word	0x08004a5d
 8004a10:	08004a4b 	.word	0x08004a4b
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	681b      	ldr	r3, [r3, #0]
 8004a18:	68da      	ldr	r2, [r3, #12]
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	f042 0202 	orr.w	r2, r2, #2
 8004a22:	60da      	str	r2, [r3, #12]
      break;
 8004a24:	e01d      	b.n	8004a62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	68da      	ldr	r2, [r3, #12]
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	f042 0204 	orr.w	r2, r2, #4
 8004a34:	60da      	str	r2, [r3, #12]
      break;
 8004a36:	e014      	b.n	8004a62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	68da      	ldr	r2, [r3, #12]
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f042 0208 	orr.w	r2, r2, #8
 8004a46:	60da      	str	r2, [r3, #12]
      break;
 8004a48:	e00b      	b.n	8004a62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	68da      	ldr	r2, [r3, #12]
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f042 0210 	orr.w	r2, r2, #16
 8004a58:	60da      	str	r2, [r3, #12]
      break;
 8004a5a:	e002      	b.n	8004a62 <HAL_TIM_PWM_Start_IT+0x13e>
    }

    default:
      status = HAL_ERROR;
 8004a5c:	2301      	movs	r3, #1
 8004a5e:	73fb      	strb	r3, [r7, #15]
      break;
 8004a60:	bf00      	nop
  }

  if (status == HAL_OK)
 8004a62:	7bfb      	ldrb	r3, [r7, #15]
 8004a64:	2b00      	cmp	r3, #0
 8004a66:	d15f      	bne.n	8004b28 <HAL_TIM_PWM_Start_IT+0x204>
  {
    /* Enable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	2201      	movs	r2, #1
 8004a6e:	6839      	ldr	r1, [r7, #0]
 8004a70:	4618      	mov	r0, r3
 8004a72:	f000 fec5 	bl	8005800 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	4a2e      	ldr	r2, [pc, #184]	; (8004b34 <HAL_TIM_PWM_Start_IT+0x210>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d004      	beq.n	8004a8a <HAL_TIM_PWM_Start_IT+0x166>
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a2c      	ldr	r2, [pc, #176]	; (8004b38 <HAL_TIM_PWM_Start_IT+0x214>)
 8004a86:	4293      	cmp	r3, r2
 8004a88:	d101      	bne.n	8004a8e <HAL_TIM_PWM_Start_IT+0x16a>
 8004a8a:	2301      	movs	r3, #1
 8004a8c:	e000      	b.n	8004a90 <HAL_TIM_PWM_Start_IT+0x16c>
 8004a8e:	2300      	movs	r3, #0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d007      	beq.n	8004aa4 <HAL_TIM_PWM_Start_IT+0x180>
    {
      /* Enable the main output */
      __HAL_TIM_MOE_ENABLE(htim);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004aa2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a22      	ldr	r2, [pc, #136]	; (8004b34 <HAL_TIM_PWM_Start_IT+0x210>)
 8004aaa:	4293      	cmp	r3, r2
 8004aac:	d022      	beq.n	8004af4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	681b      	ldr	r3, [r3, #0]
 8004ab2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004ab6:	d01d      	beq.n	8004af4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	4a1f      	ldr	r2, [pc, #124]	; (8004b3c <HAL_TIM_PWM_Start_IT+0x218>)
 8004abe:	4293      	cmp	r3, r2
 8004ac0:	d018      	beq.n	8004af4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	4a1e      	ldr	r2, [pc, #120]	; (8004b40 <HAL_TIM_PWM_Start_IT+0x21c>)
 8004ac8:	4293      	cmp	r3, r2
 8004aca:	d013      	beq.n	8004af4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	4a1c      	ldr	r2, [pc, #112]	; (8004b44 <HAL_TIM_PWM_Start_IT+0x220>)
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	d00e      	beq.n	8004af4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	4a17      	ldr	r2, [pc, #92]	; (8004b38 <HAL_TIM_PWM_Start_IT+0x214>)
 8004adc:	4293      	cmp	r3, r2
 8004ade:	d009      	beq.n	8004af4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	681b      	ldr	r3, [r3, #0]
 8004ae4:	4a18      	ldr	r2, [pc, #96]	; (8004b48 <HAL_TIM_PWM_Start_IT+0x224>)
 8004ae6:	4293      	cmp	r3, r2
 8004ae8:	d004      	beq.n	8004af4 <HAL_TIM_PWM_Start_IT+0x1d0>
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	4a17      	ldr	r2, [pc, #92]	; (8004b4c <HAL_TIM_PWM_Start_IT+0x228>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d111      	bne.n	8004b18 <HAL_TIM_PWM_Start_IT+0x1f4>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	689b      	ldr	r3, [r3, #8]
 8004afa:	f003 0307 	and.w	r3, r3, #7
 8004afe:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b00:	68bb      	ldr	r3, [r7, #8]
 8004b02:	2b06      	cmp	r3, #6
 8004b04:	d010      	beq.n	8004b28 <HAL_TIM_PWM_Start_IT+0x204>
      {
        __HAL_TIM_ENABLE(htim);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f042 0201 	orr.w	r2, r2, #1
 8004b14:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004b16:	e007      	b.n	8004b28 <HAL_TIM_PWM_Start_IT+0x204>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	681a      	ldr	r2, [r3, #0]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f042 0201 	orr.w	r2, r2, #1
 8004b26:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8004b28:	7bfb      	ldrb	r3, [r7, #15]
}
 8004b2a:	4618      	mov	r0, r3
 8004b2c:	3710      	adds	r7, #16
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	bd80      	pop	{r7, pc}
 8004b32:	bf00      	nop
 8004b34:	40010000 	.word	0x40010000
 8004b38:	40010400 	.word	0x40010400
 8004b3c:	40000400 	.word	0x40000400
 8004b40:	40000800 	.word	0x40000800
 8004b44:	40000c00 	.word	0x40000c00
 8004b48:	40014000 	.word	0x40014000
 8004b4c:	40001800 	.word	0x40001800

08004b50 <HAL_TIM_PWM_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b084      	sub	sp, #16
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
 8004b58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004b5a:	2300      	movs	r3, #0
 8004b5c:	73fb      	strb	r3, [r7, #15]
 8004b5e:	683b      	ldr	r3, [r7, #0]
 8004b60:	2b0c      	cmp	r3, #12
 8004b62:	d841      	bhi.n	8004be8 <HAL_TIM_PWM_Stop_IT+0x98>
 8004b64:	a201      	add	r2, pc, #4	; (adr r2, 8004b6c <HAL_TIM_PWM_Stop_IT+0x1c>)
 8004b66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b6a:	bf00      	nop
 8004b6c:	08004ba1 	.word	0x08004ba1
 8004b70:	08004be9 	.word	0x08004be9
 8004b74:	08004be9 	.word	0x08004be9
 8004b78:	08004be9 	.word	0x08004be9
 8004b7c:	08004bb3 	.word	0x08004bb3
 8004b80:	08004be9 	.word	0x08004be9
 8004b84:	08004be9 	.word	0x08004be9
 8004b88:	08004be9 	.word	0x08004be9
 8004b8c:	08004bc5 	.word	0x08004bc5
 8004b90:	08004be9 	.word	0x08004be9
 8004b94:	08004be9 	.word	0x08004be9
 8004b98:	08004be9 	.word	0x08004be9
 8004b9c:	08004bd7 	.word	0x08004bd7
  switch (Channel)
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	681b      	ldr	r3, [r3, #0]
 8004ba4:	68da      	ldr	r2, [r3, #12]
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	f022 0202 	bic.w	r2, r2, #2
 8004bae:	60da      	str	r2, [r3, #12]
      break;
 8004bb0:	e01d      	b.n	8004bee <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68da      	ldr	r2, [r3, #12]
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	f022 0204 	bic.w	r2, r2, #4
 8004bc0:	60da      	str	r2, [r3, #12]
      break;
 8004bc2:	e014      	b.n	8004bee <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	68da      	ldr	r2, [r3, #12]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f022 0208 	bic.w	r2, r2, #8
 8004bd2:	60da      	str	r2, [r3, #12]
      break;
 8004bd4:	e00b      	b.n	8004bee <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	68da      	ldr	r2, [r3, #12]
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f022 0210 	bic.w	r2, r2, #16
 8004be4:	60da      	str	r2, [r3, #12]
      break;
 8004be6:	e002      	b.n	8004bee <HAL_TIM_PWM_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004be8:	2301      	movs	r3, #1
 8004bea:	73fb      	strb	r3, [r7, #15]
      break;
 8004bec:	bf00      	nop
  }

  if (status == HAL_OK)
 8004bee:	7bfb      	ldrb	r3, [r7, #15]
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d161      	bne.n	8004cb8 <HAL_TIM_PWM_Stop_IT+0x168>
  {
    /* Disable the Capture compare channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	2200      	movs	r2, #0
 8004bfa:	6839      	ldr	r1, [r7, #0]
 8004bfc:	4618      	mov	r0, r3
 8004bfe:	f000 fdff 	bl	8005800 <TIM_CCxChannelCmd>

    if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	4a2f      	ldr	r2, [pc, #188]	; (8004cc4 <HAL_TIM_PWM_Stop_IT+0x174>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	d004      	beq.n	8004c16 <HAL_TIM_PWM_Stop_IT+0xc6>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	4a2d      	ldr	r2, [pc, #180]	; (8004cc8 <HAL_TIM_PWM_Stop_IT+0x178>)
 8004c12:	4293      	cmp	r3, r2
 8004c14:	d101      	bne.n	8004c1a <HAL_TIM_PWM_Stop_IT+0xca>
 8004c16:	2301      	movs	r3, #1
 8004c18:	e000      	b.n	8004c1c <HAL_TIM_PWM_Stop_IT+0xcc>
 8004c1a:	2300      	movs	r3, #0
 8004c1c:	2b00      	cmp	r3, #0
 8004c1e:	d017      	beq.n	8004c50 <HAL_TIM_PWM_Stop_IT+0x100>
    {
      /* Disable the Main Output */
      __HAL_TIM_MOE_DISABLE(htim);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	6a1a      	ldr	r2, [r3, #32]
 8004c26:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c2a:	4013      	ands	r3, r2
 8004c2c:	2b00      	cmp	r3, #0
 8004c2e:	d10f      	bne.n	8004c50 <HAL_TIM_PWM_Stop_IT+0x100>
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	6a1a      	ldr	r2, [r3, #32]
 8004c36:	f240 4344 	movw	r3, #1092	; 0x444
 8004c3a:	4013      	ands	r3, r2
 8004c3c:	2b00      	cmp	r3, #0
 8004c3e:	d107      	bne.n	8004c50 <HAL_TIM_PWM_Stop_IT+0x100>
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004c4e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	6a1a      	ldr	r2, [r3, #32]
 8004c56:	f241 1311 	movw	r3, #4369	; 0x1111
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d10f      	bne.n	8004c80 <HAL_TIM_PWM_Stop_IT+0x130>
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	6a1a      	ldr	r2, [r3, #32]
 8004c66:	f240 4344 	movw	r3, #1092	; 0x444
 8004c6a:	4013      	ands	r3, r2
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d107      	bne.n	8004c80 <HAL_TIM_PWM_Stop_IT+0x130>
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f022 0201 	bic.w	r2, r2, #1
 8004c7e:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d104      	bne.n	8004c90 <HAL_TIM_PWM_Stop_IT+0x140>
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2201      	movs	r2, #1
 8004c8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004c8e:	e013      	b.n	8004cb8 <HAL_TIM_PWM_Stop_IT+0x168>
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	2b04      	cmp	r3, #4
 8004c94:	d104      	bne.n	8004ca0 <HAL_TIM_PWM_Stop_IT+0x150>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	2201      	movs	r2, #1
 8004c9a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c9e:	e00b      	b.n	8004cb8 <HAL_TIM_PWM_Stop_IT+0x168>
 8004ca0:	683b      	ldr	r3, [r7, #0]
 8004ca2:	2b08      	cmp	r3, #8
 8004ca4:	d104      	bne.n	8004cb0 <HAL_TIM_PWM_Stop_IT+0x160>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2201      	movs	r2, #1
 8004caa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004cae:	e003      	b.n	8004cb8 <HAL_TIM_PWM_Stop_IT+0x168>
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2201      	movs	r2, #1
 8004cb4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  }

  /* Return function status */
  return status;
 8004cb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cba:	4618      	mov	r0, r3
 8004cbc:	3710      	adds	r7, #16
 8004cbe:	46bd      	mov	sp, r7
 8004cc0:	bd80      	pop	{r7, pc}
 8004cc2:	bf00      	nop
 8004cc4:	40010000 	.word	0x40010000
 8004cc8:	40010400 	.word	0x40010400

08004ccc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004ccc:	b580      	push	{r7, lr}
 8004cce:	b082      	sub	sp, #8
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	691b      	ldr	r3, [r3, #16]
 8004cda:	f003 0302 	and.w	r3, r3, #2
 8004cde:	2b02      	cmp	r3, #2
 8004ce0:	d122      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	68db      	ldr	r3, [r3, #12]
 8004ce8:	f003 0302 	and.w	r3, r3, #2
 8004cec:	2b02      	cmp	r3, #2
 8004cee:	d11b      	bne.n	8004d28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f06f 0202 	mvn.w	r2, #2
 8004cf8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	681b      	ldr	r3, [r3, #0]
 8004d04:	699b      	ldr	r3, [r3, #24]
 8004d06:	f003 0303 	and.w	r3, r3, #3
 8004d0a:	2b00      	cmp	r3, #0
 8004d0c:	d003      	beq.n	8004d16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004d0e:	6878      	ldr	r0, [r7, #4]
 8004d10:	f000 fa77 	bl	8005202 <HAL_TIM_IC_CaptureCallback>
 8004d14:	e005      	b.n	8004d22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d16:	6878      	ldr	r0, [r7, #4]
 8004d18:	f000 fa69 	bl	80051ee <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d1c:	6878      	ldr	r0, [r7, #4]
 8004d1e:	f7fe f84f 	bl	8002dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	691b      	ldr	r3, [r3, #16]
 8004d2e:	f003 0304 	and.w	r3, r3, #4
 8004d32:	2b04      	cmp	r3, #4
 8004d34:	d122      	bne.n	8004d7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	68db      	ldr	r3, [r3, #12]
 8004d3c:	f003 0304 	and.w	r3, r3, #4
 8004d40:	2b04      	cmp	r3, #4
 8004d42:	d11b      	bne.n	8004d7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	f06f 0204 	mvn.w	r2, #4
 8004d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2202      	movs	r2, #2
 8004d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004d54:	687b      	ldr	r3, [r7, #4]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d003      	beq.n	8004d6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004d62:	6878      	ldr	r0, [r7, #4]
 8004d64:	f000 fa4d 	bl	8005202 <HAL_TIM_IC_CaptureCallback>
 8004d68:	e005      	b.n	8004d76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004d6a:	6878      	ldr	r0, [r7, #4]
 8004d6c:	f000 fa3f 	bl	80051ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004d70:	6878      	ldr	r0, [r7, #4]
 8004d72:	f7fe f825 	bl	8002dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	2200      	movs	r2, #0
 8004d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	691b      	ldr	r3, [r3, #16]
 8004d82:	f003 0308 	and.w	r3, r3, #8
 8004d86:	2b08      	cmp	r3, #8
 8004d88:	d122      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68db      	ldr	r3, [r3, #12]
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b08      	cmp	r3, #8
 8004d96:	d11b      	bne.n	8004dd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	f06f 0208 	mvn.w	r2, #8
 8004da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2204      	movs	r2, #4
 8004da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	69db      	ldr	r3, [r3, #28]
 8004dae:	f003 0303 	and.w	r3, r3, #3
 8004db2:	2b00      	cmp	r3, #0
 8004db4:	d003      	beq.n	8004dbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004db6:	6878      	ldr	r0, [r7, #4]
 8004db8:	f000 fa23 	bl	8005202 <HAL_TIM_IC_CaptureCallback>
 8004dbc:	e005      	b.n	8004dca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004dbe:	6878      	ldr	r0, [r7, #4]
 8004dc0:	f000 fa15 	bl	80051ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004dc4:	6878      	ldr	r0, [r7, #4]
 8004dc6:	f7fd fffb 	bl	8002dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	2200      	movs	r2, #0
 8004dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	691b      	ldr	r3, [r3, #16]
 8004dd6:	f003 0310 	and.w	r3, r3, #16
 8004dda:	2b10      	cmp	r3, #16
 8004ddc:	d122      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	68db      	ldr	r3, [r3, #12]
 8004de4:	f003 0310 	and.w	r3, r3, #16
 8004de8:	2b10      	cmp	r3, #16
 8004dea:	d11b      	bne.n	8004e24 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f06f 0210 	mvn.w	r2, #16
 8004df4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	2208      	movs	r2, #8
 8004dfa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	69db      	ldr	r3, [r3, #28]
 8004e02:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004e06:	2b00      	cmp	r3, #0
 8004e08:	d003      	beq.n	8004e12 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004e0a:	6878      	ldr	r0, [r7, #4]
 8004e0c:	f000 f9f9 	bl	8005202 <HAL_TIM_IC_CaptureCallback>
 8004e10:	e005      	b.n	8004e1e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004e12:	6878      	ldr	r0, [r7, #4]
 8004e14:	f000 f9eb 	bl	80051ee <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004e18:	6878      	ldr	r0, [r7, #4]
 8004e1a:	f7fd ffd1 	bl	8002dc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	2200      	movs	r2, #0
 8004e22:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	691b      	ldr	r3, [r3, #16]
 8004e2a:	f003 0301 	and.w	r3, r3, #1
 8004e2e:	2b01      	cmp	r3, #1
 8004e30:	d10e      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	68db      	ldr	r3, [r3, #12]
 8004e38:	f003 0301 	and.w	r3, r3, #1
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d107      	bne.n	8004e50 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	681b      	ldr	r3, [r3, #0]
 8004e44:	f06f 0201 	mvn.w	r2, #1
 8004e48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004e4a:	6878      	ldr	r0, [r7, #4]
 8004e4c:	f7fd ff80 	bl	8002d50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	681b      	ldr	r3, [r3, #0]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e5a:	2b80      	cmp	r3, #128	; 0x80
 8004e5c:	d10e      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	68db      	ldr	r3, [r3, #12]
 8004e64:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e68:	2b80      	cmp	r3, #128	; 0x80
 8004e6a:	d107      	bne.n	8004e7c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004e74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004e76:	6878      	ldr	r0, [r7, #4]
 8004e78:	f000 fd6e 	bl	8005958 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	691b      	ldr	r3, [r3, #16]
 8004e82:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e86:	2b40      	cmp	r3, #64	; 0x40
 8004e88:	d10e      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	68db      	ldr	r3, [r3, #12]
 8004e90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004e94:	2b40      	cmp	r3, #64	; 0x40
 8004e96:	d107      	bne.n	8004ea8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681b      	ldr	r3, [r3, #0]
 8004e9c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004ea0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004ea2:	6878      	ldr	r0, [r7, #4]
 8004ea4:	f000 f9b7 	bl	8005216 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	691b      	ldr	r3, [r3, #16]
 8004eae:	f003 0320 	and.w	r3, r3, #32
 8004eb2:	2b20      	cmp	r3, #32
 8004eb4:	d10e      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	68db      	ldr	r3, [r3, #12]
 8004ebc:	f003 0320 	and.w	r3, r3, #32
 8004ec0:	2b20      	cmp	r3, #32
 8004ec2:	d107      	bne.n	8004ed4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f06f 0220 	mvn.w	r2, #32
 8004ecc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004ece:	6878      	ldr	r0, [r7, #4]
 8004ed0:	f000 fd38 	bl	8005944 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004ed4:	bf00      	nop
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}

08004edc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b086      	sub	sp, #24
 8004ee0:	af00      	add	r7, sp, #0
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004eec:	68fb      	ldr	r3, [r7, #12]
 8004eee:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef2:	2b01      	cmp	r3, #1
 8004ef4:	d101      	bne.n	8004efa <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004ef6:	2302      	movs	r3, #2
 8004ef8:	e0ae      	b.n	8005058 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004efa:	68fb      	ldr	r3, [r7, #12]
 8004efc:	2201      	movs	r2, #1
 8004efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	2b0c      	cmp	r3, #12
 8004f06:	f200 809f 	bhi.w	8005048 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004f0a:	a201      	add	r2, pc, #4	; (adr r2, 8004f10 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004f0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f10:	08004f45 	.word	0x08004f45
 8004f14:	08005049 	.word	0x08005049
 8004f18:	08005049 	.word	0x08005049
 8004f1c:	08005049 	.word	0x08005049
 8004f20:	08004f85 	.word	0x08004f85
 8004f24:	08005049 	.word	0x08005049
 8004f28:	08005049 	.word	0x08005049
 8004f2c:	08005049 	.word	0x08005049
 8004f30:	08004fc7 	.word	0x08004fc7
 8004f34:	08005049 	.word	0x08005049
 8004f38:	08005049 	.word	0x08005049
 8004f3c:	08005049 	.word	0x08005049
 8004f40:	08005007 	.word	0x08005007
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004f44:	68fb      	ldr	r3, [r7, #12]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	68b9      	ldr	r1, [r7, #8]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f000 fa0e 	bl	800536c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	699a      	ldr	r2, [r3, #24]
 8004f56:	68fb      	ldr	r3, [r7, #12]
 8004f58:	681b      	ldr	r3, [r3, #0]
 8004f5a:	f042 0208 	orr.w	r2, r2, #8
 8004f5e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	699a      	ldr	r2, [r3, #24]
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	f022 0204 	bic.w	r2, r2, #4
 8004f6e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004f70:	68fb      	ldr	r3, [r7, #12]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	6999      	ldr	r1, [r3, #24]
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	691a      	ldr	r2, [r3, #16]
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	430a      	orrs	r2, r1
 8004f80:	619a      	str	r2, [r3, #24]
      break;
 8004f82:	e064      	b.n	800504e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	68b9      	ldr	r1, [r7, #8]
 8004f8a:	4618      	mov	r0, r3
 8004f8c:	f000 fa5e 	bl	800544c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	681b      	ldr	r3, [r3, #0]
 8004f94:	699a      	ldr	r2, [r3, #24]
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	699a      	ldr	r2, [r3, #24]
 8004fa6:	68fb      	ldr	r3, [r7, #12]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004fae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	681b      	ldr	r3, [r3, #0]
 8004fb4:	6999      	ldr	r1, [r3, #24]
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	691b      	ldr	r3, [r3, #16]
 8004fba:	021a      	lsls	r2, r3, #8
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	430a      	orrs	r2, r1
 8004fc2:	619a      	str	r2, [r3, #24]
      break;
 8004fc4:	e043      	b.n	800504e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004fc6:	68fb      	ldr	r3, [r7, #12]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	68b9      	ldr	r1, [r7, #8]
 8004fcc:	4618      	mov	r0, r3
 8004fce:	f000 fab3 	bl	8005538 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004fd2:	68fb      	ldr	r3, [r7, #12]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	69da      	ldr	r2, [r3, #28]
 8004fd8:	68fb      	ldr	r3, [r7, #12]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f042 0208 	orr.w	r2, r2, #8
 8004fe0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	69da      	ldr	r2, [r3, #28]
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 0204 	bic.w	r2, r2, #4
 8004ff0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	69d9      	ldr	r1, [r3, #28]
 8004ff8:	68bb      	ldr	r3, [r7, #8]
 8004ffa:	691a      	ldr	r2, [r3, #16]
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	430a      	orrs	r2, r1
 8005002:	61da      	str	r2, [r3, #28]
      break;
 8005004:	e023      	b.n	800504e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005006:	68fb      	ldr	r3, [r7, #12]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	68b9      	ldr	r1, [r7, #8]
 800500c:	4618      	mov	r0, r3
 800500e:	f000 fb07 	bl	8005620 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	69da      	ldr	r2, [r3, #28]
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005020:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005022:	68fb      	ldr	r3, [r7, #12]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	69da      	ldr	r2, [r3, #28]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005030:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005032:	68fb      	ldr	r3, [r7, #12]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	69d9      	ldr	r1, [r3, #28]
 8005038:	68bb      	ldr	r3, [r7, #8]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	021a      	lsls	r2, r3, #8
 800503e:	68fb      	ldr	r3, [r7, #12]
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	430a      	orrs	r2, r1
 8005044:	61da      	str	r2, [r3, #28]
      break;
 8005046:	e002      	b.n	800504e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005048:	2301      	movs	r3, #1
 800504a:	75fb      	strb	r3, [r7, #23]
      break;
 800504c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	2200      	movs	r2, #0
 8005052:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005056:	7dfb      	ldrb	r3, [r7, #23]
}
 8005058:	4618      	mov	r0, r3
 800505a:	3718      	adds	r7, #24
 800505c:	46bd      	mov	sp, r7
 800505e:	bd80      	pop	{r7, pc}

08005060 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005060:	b580      	push	{r7, lr}
 8005062:	b084      	sub	sp, #16
 8005064:	af00      	add	r7, sp, #0
 8005066:	6078      	str	r0, [r7, #4]
 8005068:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800506a:	2300      	movs	r3, #0
 800506c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005074:	2b01      	cmp	r3, #1
 8005076:	d101      	bne.n	800507c <HAL_TIM_ConfigClockSource+0x1c>
 8005078:	2302      	movs	r3, #2
 800507a:	e0b4      	b.n	80051e6 <HAL_TIM_ConfigClockSource+0x186>
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	2201      	movs	r2, #1
 8005080:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	2202      	movs	r2, #2
 8005088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	689b      	ldr	r3, [r3, #8]
 8005092:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800509a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80050a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	68ba      	ldr	r2, [r7, #8]
 80050aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80050ac:	683b      	ldr	r3, [r7, #0]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050b4:	d03e      	beq.n	8005134 <HAL_TIM_ConfigClockSource+0xd4>
 80050b6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80050ba:	f200 8087 	bhi.w	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050c2:	f000 8086 	beq.w	80051d2 <HAL_TIM_ConfigClockSource+0x172>
 80050c6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80050ca:	d87f      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050cc:	2b70      	cmp	r3, #112	; 0x70
 80050ce:	d01a      	beq.n	8005106 <HAL_TIM_ConfigClockSource+0xa6>
 80050d0:	2b70      	cmp	r3, #112	; 0x70
 80050d2:	d87b      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050d4:	2b60      	cmp	r3, #96	; 0x60
 80050d6:	d050      	beq.n	800517a <HAL_TIM_ConfigClockSource+0x11a>
 80050d8:	2b60      	cmp	r3, #96	; 0x60
 80050da:	d877      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050dc:	2b50      	cmp	r3, #80	; 0x50
 80050de:	d03c      	beq.n	800515a <HAL_TIM_ConfigClockSource+0xfa>
 80050e0:	2b50      	cmp	r3, #80	; 0x50
 80050e2:	d873      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050e4:	2b40      	cmp	r3, #64	; 0x40
 80050e6:	d058      	beq.n	800519a <HAL_TIM_ConfigClockSource+0x13a>
 80050e8:	2b40      	cmp	r3, #64	; 0x40
 80050ea:	d86f      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050ec:	2b30      	cmp	r3, #48	; 0x30
 80050ee:	d064      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x15a>
 80050f0:	2b30      	cmp	r3, #48	; 0x30
 80050f2:	d86b      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050f4:	2b20      	cmp	r3, #32
 80050f6:	d060      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x15a>
 80050f8:	2b20      	cmp	r3, #32
 80050fa:	d867      	bhi.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d05c      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x15a>
 8005100:	2b10      	cmp	r3, #16
 8005102:	d05a      	beq.n	80051ba <HAL_TIM_ConfigClockSource+0x15a>
 8005104:	e062      	b.n	80051cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6818      	ldr	r0, [r3, #0]
 800510a:	683b      	ldr	r3, [r7, #0]
 800510c:	6899      	ldr	r1, [r3, #8]
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	685a      	ldr	r2, [r3, #4]
 8005112:	683b      	ldr	r3, [r7, #0]
 8005114:	68db      	ldr	r3, [r3, #12]
 8005116:	f000 fb53 	bl	80057c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	689b      	ldr	r3, [r3, #8]
 8005120:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005122:	68bb      	ldr	r3, [r7, #8]
 8005124:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005128:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	68ba      	ldr	r2, [r7, #8]
 8005130:	609a      	str	r2, [r3, #8]
      break;
 8005132:	e04f      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	6818      	ldr	r0, [r3, #0]
 8005138:	683b      	ldr	r3, [r7, #0]
 800513a:	6899      	ldr	r1, [r3, #8]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	685a      	ldr	r2, [r3, #4]
 8005140:	683b      	ldr	r3, [r7, #0]
 8005142:	68db      	ldr	r3, [r3, #12]
 8005144:	f000 fb3c 	bl	80057c0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	689a      	ldr	r2, [r3, #8]
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005156:	609a      	str	r2, [r3, #8]
      break;
 8005158:	e03c      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	6818      	ldr	r0, [r3, #0]
 800515e:	683b      	ldr	r3, [r7, #0]
 8005160:	6859      	ldr	r1, [r3, #4]
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	68db      	ldr	r3, [r3, #12]
 8005166:	461a      	mov	r2, r3
 8005168:	f000 fab0 	bl	80056cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	2150      	movs	r1, #80	; 0x50
 8005172:	4618      	mov	r0, r3
 8005174:	f000 fb09 	bl	800578a <TIM_ITRx_SetConfig>
      break;
 8005178:	e02c      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	6818      	ldr	r0, [r3, #0]
 800517e:	683b      	ldr	r3, [r7, #0]
 8005180:	6859      	ldr	r1, [r3, #4]
 8005182:	683b      	ldr	r3, [r7, #0]
 8005184:	68db      	ldr	r3, [r3, #12]
 8005186:	461a      	mov	r2, r3
 8005188:	f000 facf 	bl	800572a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	2160      	movs	r1, #96	; 0x60
 8005192:	4618      	mov	r0, r3
 8005194:	f000 faf9 	bl	800578a <TIM_ITRx_SetConfig>
      break;
 8005198:	e01c      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6818      	ldr	r0, [r3, #0]
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	6859      	ldr	r1, [r3, #4]
 80051a2:	683b      	ldr	r3, [r7, #0]
 80051a4:	68db      	ldr	r3, [r3, #12]
 80051a6:	461a      	mov	r2, r3
 80051a8:	f000 fa90 	bl	80056cc <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	2140      	movs	r1, #64	; 0x40
 80051b2:	4618      	mov	r0, r3
 80051b4:	f000 fae9 	bl	800578a <TIM_ITRx_SetConfig>
      break;
 80051b8:	e00c      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	681a      	ldr	r2, [r3, #0]
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	4619      	mov	r1, r3
 80051c4:	4610      	mov	r0, r2
 80051c6:	f000 fae0 	bl	800578a <TIM_ITRx_SetConfig>
      break;
 80051ca:	e003      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80051cc:	2301      	movs	r3, #1
 80051ce:	73fb      	strb	r3, [r7, #15]
      break;
 80051d0:	e000      	b.n	80051d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80051d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	2201      	movs	r2, #1
 80051d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80051e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}

080051ee <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80051ee:	b480      	push	{r7}
 80051f0:	b083      	sub	sp, #12
 80051f2:	af00      	add	r7, sp, #0
 80051f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80051f6:	bf00      	nop
 80051f8:	370c      	adds	r7, #12
 80051fa:	46bd      	mov	sp, r7
 80051fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005200:	4770      	bx	lr

08005202 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005202:	b480      	push	{r7}
 8005204:	b083      	sub	sp, #12
 8005206:	af00      	add	r7, sp, #0
 8005208:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800520a:	bf00      	nop
 800520c:	370c      	adds	r7, #12
 800520e:	46bd      	mov	sp, r7
 8005210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005214:	4770      	bx	lr

08005216 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005216:	b480      	push	{r7}
 8005218:	b083      	sub	sp, #12
 800521a:	af00      	add	r7, sp, #0
 800521c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800521e:	bf00      	nop
 8005220:	370c      	adds	r7, #12
 8005222:	46bd      	mov	sp, r7
 8005224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005228:	4770      	bx	lr
	...

0800522c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800522c:	b480      	push	{r7}
 800522e:	b085      	sub	sp, #20
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
 8005234:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	4a40      	ldr	r2, [pc, #256]	; (8005340 <TIM_Base_SetConfig+0x114>)
 8005240:	4293      	cmp	r3, r2
 8005242:	d013      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800524a:	d00f      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	4a3d      	ldr	r2, [pc, #244]	; (8005344 <TIM_Base_SetConfig+0x118>)
 8005250:	4293      	cmp	r3, r2
 8005252:	d00b      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	4a3c      	ldr	r2, [pc, #240]	; (8005348 <TIM_Base_SetConfig+0x11c>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d007      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	4a3b      	ldr	r2, [pc, #236]	; (800534c <TIM_Base_SetConfig+0x120>)
 8005260:	4293      	cmp	r3, r2
 8005262:	d003      	beq.n	800526c <TIM_Base_SetConfig+0x40>
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	4a3a      	ldr	r2, [pc, #232]	; (8005350 <TIM_Base_SetConfig+0x124>)
 8005268:	4293      	cmp	r3, r2
 800526a:	d108      	bne.n	800527e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800526c:	68fb      	ldr	r3, [r7, #12]
 800526e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005272:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005274:	683b      	ldr	r3, [r7, #0]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	68fa      	ldr	r2, [r7, #12]
 800527a:	4313      	orrs	r3, r2
 800527c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	4a2f      	ldr	r2, [pc, #188]	; (8005340 <TIM_Base_SetConfig+0x114>)
 8005282:	4293      	cmp	r3, r2
 8005284:	d02b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800528c:	d027      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	4a2c      	ldr	r2, [pc, #176]	; (8005344 <TIM_Base_SetConfig+0x118>)
 8005292:	4293      	cmp	r3, r2
 8005294:	d023      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	4a2b      	ldr	r2, [pc, #172]	; (8005348 <TIM_Base_SetConfig+0x11c>)
 800529a:	4293      	cmp	r3, r2
 800529c:	d01f      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	4a2a      	ldr	r2, [pc, #168]	; (800534c <TIM_Base_SetConfig+0x120>)
 80052a2:	4293      	cmp	r3, r2
 80052a4:	d01b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	4a29      	ldr	r2, [pc, #164]	; (8005350 <TIM_Base_SetConfig+0x124>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d017      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	4a28      	ldr	r2, [pc, #160]	; (8005354 <TIM_Base_SetConfig+0x128>)
 80052b2:	4293      	cmp	r3, r2
 80052b4:	d013      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	4a27      	ldr	r2, [pc, #156]	; (8005358 <TIM_Base_SetConfig+0x12c>)
 80052ba:	4293      	cmp	r3, r2
 80052bc:	d00f      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a26      	ldr	r2, [pc, #152]	; (800535c <TIM_Base_SetConfig+0x130>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d00b      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	4a25      	ldr	r2, [pc, #148]	; (8005360 <TIM_Base_SetConfig+0x134>)
 80052ca:	4293      	cmp	r3, r2
 80052cc:	d007      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	4a24      	ldr	r2, [pc, #144]	; (8005364 <TIM_Base_SetConfig+0x138>)
 80052d2:	4293      	cmp	r3, r2
 80052d4:	d003      	beq.n	80052de <TIM_Base_SetConfig+0xb2>
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	4a23      	ldr	r2, [pc, #140]	; (8005368 <TIM_Base_SetConfig+0x13c>)
 80052da:	4293      	cmp	r3, r2
 80052dc:	d108      	bne.n	80052f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80052de:	68fb      	ldr	r3, [r7, #12]
 80052e0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80052e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80052e6:	683b      	ldr	r3, [r7, #0]
 80052e8:	68db      	ldr	r3, [r3, #12]
 80052ea:	68fa      	ldr	r2, [r7, #12]
 80052ec:	4313      	orrs	r3, r2
 80052ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80052f6:	683b      	ldr	r3, [r7, #0]
 80052f8:	695b      	ldr	r3, [r3, #20]
 80052fa:	4313      	orrs	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	68fa      	ldr	r2, [r7, #12]
 8005302:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005304:	683b      	ldr	r3, [r7, #0]
 8005306:	689a      	ldr	r2, [r3, #8]
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800530c:	683b      	ldr	r3, [r7, #0]
 800530e:	681a      	ldr	r2, [r3, #0]
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	4a0a      	ldr	r2, [pc, #40]	; (8005340 <TIM_Base_SetConfig+0x114>)
 8005318:	4293      	cmp	r3, r2
 800531a:	d003      	beq.n	8005324 <TIM_Base_SetConfig+0xf8>
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	4a0c      	ldr	r2, [pc, #48]	; (8005350 <TIM_Base_SetConfig+0x124>)
 8005320:	4293      	cmp	r3, r2
 8005322:	d103      	bne.n	800532c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	691a      	ldr	r2, [r3, #16]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	2201      	movs	r2, #1
 8005330:	615a      	str	r2, [r3, #20]
}
 8005332:	bf00      	nop
 8005334:	3714      	adds	r7, #20
 8005336:	46bd      	mov	sp, r7
 8005338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533c:	4770      	bx	lr
 800533e:	bf00      	nop
 8005340:	40010000 	.word	0x40010000
 8005344:	40000400 	.word	0x40000400
 8005348:	40000800 	.word	0x40000800
 800534c:	40000c00 	.word	0x40000c00
 8005350:	40010400 	.word	0x40010400
 8005354:	40014000 	.word	0x40014000
 8005358:	40014400 	.word	0x40014400
 800535c:	40014800 	.word	0x40014800
 8005360:	40001800 	.word	0x40001800
 8005364:	40001c00 	.word	0x40001c00
 8005368:	40002000 	.word	0x40002000

0800536c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
 8005374:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6a1b      	ldr	r3, [r3, #32]
 800537a:	f023 0201 	bic.w	r2, r3, #1
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	6a1b      	ldr	r3, [r3, #32]
 8005386:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	685b      	ldr	r3, [r3, #4]
 800538c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005394:	68fb      	ldr	r3, [r7, #12]
 8005396:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800539a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	f023 0303 	bic.w	r3, r3, #3
 80053a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	681b      	ldr	r3, [r3, #0]
 80053a8:	68fa      	ldr	r2, [r7, #12]
 80053aa:	4313      	orrs	r3, r2
 80053ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	f023 0302 	bic.w	r3, r3, #2
 80053b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80053b6:	683b      	ldr	r3, [r7, #0]
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	697a      	ldr	r2, [r7, #20]
 80053bc:	4313      	orrs	r3, r2
 80053be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	4a20      	ldr	r2, [pc, #128]	; (8005444 <TIM_OC1_SetConfig+0xd8>)
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d003      	beq.n	80053d0 <TIM_OC1_SetConfig+0x64>
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	4a1f      	ldr	r2, [pc, #124]	; (8005448 <TIM_OC1_SetConfig+0xdc>)
 80053cc:	4293      	cmp	r3, r2
 80053ce:	d10c      	bne.n	80053ea <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80053d0:	697b      	ldr	r3, [r7, #20]
 80053d2:	f023 0308 	bic.w	r3, r3, #8
 80053d6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80053d8:	683b      	ldr	r3, [r7, #0]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	697a      	ldr	r2, [r7, #20]
 80053de:	4313      	orrs	r3, r2
 80053e0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80053e2:	697b      	ldr	r3, [r7, #20]
 80053e4:	f023 0304 	bic.w	r3, r3, #4
 80053e8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	4a15      	ldr	r2, [pc, #84]	; (8005444 <TIM_OC1_SetConfig+0xd8>)
 80053ee:	4293      	cmp	r3, r2
 80053f0:	d003      	beq.n	80053fa <TIM_OC1_SetConfig+0x8e>
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	4a14      	ldr	r2, [pc, #80]	; (8005448 <TIM_OC1_SetConfig+0xdc>)
 80053f6:	4293      	cmp	r3, r2
 80053f8:	d111      	bne.n	800541e <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80053fa:	693b      	ldr	r3, [r7, #16]
 80053fc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005400:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005402:	693b      	ldr	r3, [r7, #16]
 8005404:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005408:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800540a:	683b      	ldr	r3, [r7, #0]
 800540c:	695b      	ldr	r3, [r3, #20]
 800540e:	693a      	ldr	r2, [r7, #16]
 8005410:	4313      	orrs	r3, r2
 8005412:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005414:	683b      	ldr	r3, [r7, #0]
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	693a      	ldr	r2, [r7, #16]
 800541a:	4313      	orrs	r3, r2
 800541c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	68fa      	ldr	r2, [r7, #12]
 8005428:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	685a      	ldr	r2, [r3, #4]
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	697a      	ldr	r2, [r7, #20]
 8005436:	621a      	str	r2, [r3, #32]
}
 8005438:	bf00      	nop
 800543a:	371c      	adds	r7, #28
 800543c:	46bd      	mov	sp, r7
 800543e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005442:	4770      	bx	lr
 8005444:	40010000 	.word	0x40010000
 8005448:	40010400 	.word	0x40010400

0800544c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800544c:	b480      	push	{r7}
 800544e:	b087      	sub	sp, #28
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
 8005454:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	6a1b      	ldr	r3, [r3, #32]
 800545a:	f023 0210 	bic.w	r2, r3, #16
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	6a1b      	ldr	r3, [r3, #32]
 8005466:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	685b      	ldr	r3, [r3, #4]
 800546c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	699b      	ldr	r3, [r3, #24]
 8005472:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800547a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800547c:	68fb      	ldr	r3, [r7, #12]
 800547e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005482:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005484:	683b      	ldr	r3, [r7, #0]
 8005486:	681b      	ldr	r3, [r3, #0]
 8005488:	021b      	lsls	r3, r3, #8
 800548a:	68fa      	ldr	r2, [r7, #12]
 800548c:	4313      	orrs	r3, r2
 800548e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005490:	697b      	ldr	r3, [r7, #20]
 8005492:	f023 0320 	bic.w	r3, r3, #32
 8005496:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	011b      	lsls	r3, r3, #4
 800549e:	697a      	ldr	r2, [r7, #20]
 80054a0:	4313      	orrs	r3, r2
 80054a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	4a22      	ldr	r2, [pc, #136]	; (8005530 <TIM_OC2_SetConfig+0xe4>)
 80054a8:	4293      	cmp	r3, r2
 80054aa:	d003      	beq.n	80054b4 <TIM_OC2_SetConfig+0x68>
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	4a21      	ldr	r2, [pc, #132]	; (8005534 <TIM_OC2_SetConfig+0xe8>)
 80054b0:	4293      	cmp	r3, r2
 80054b2:	d10d      	bne.n	80054d0 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80054b4:	697b      	ldr	r3, [r7, #20]
 80054b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80054ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80054bc:	683b      	ldr	r3, [r7, #0]
 80054be:	68db      	ldr	r3, [r3, #12]
 80054c0:	011b      	lsls	r3, r3, #4
 80054c2:	697a      	ldr	r2, [r7, #20]
 80054c4:	4313      	orrs	r3, r2
 80054c6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80054c8:	697b      	ldr	r3, [r7, #20]
 80054ca:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80054ce:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	4a17      	ldr	r2, [pc, #92]	; (8005530 <TIM_OC2_SetConfig+0xe4>)
 80054d4:	4293      	cmp	r3, r2
 80054d6:	d003      	beq.n	80054e0 <TIM_OC2_SetConfig+0x94>
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	4a16      	ldr	r2, [pc, #88]	; (8005534 <TIM_OC2_SetConfig+0xe8>)
 80054dc:	4293      	cmp	r3, r2
 80054de:	d113      	bne.n	8005508 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80054e0:	693b      	ldr	r3, [r7, #16]
 80054e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80054e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80054ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80054f0:	683b      	ldr	r3, [r7, #0]
 80054f2:	695b      	ldr	r3, [r3, #20]
 80054f4:	009b      	lsls	r3, r3, #2
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4313      	orrs	r3, r2
 80054fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80054fc:	683b      	ldr	r3, [r7, #0]
 80054fe:	699b      	ldr	r3, [r3, #24]
 8005500:	009b      	lsls	r3, r3, #2
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4313      	orrs	r3, r2
 8005506:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	693a      	ldr	r2, [r7, #16]
 800550c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	68fa      	ldr	r2, [r7, #12]
 8005512:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005514:	683b      	ldr	r3, [r7, #0]
 8005516:	685a      	ldr	r2, [r3, #4]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	697a      	ldr	r2, [r7, #20]
 8005520:	621a      	str	r2, [r3, #32]
}
 8005522:	bf00      	nop
 8005524:	371c      	adds	r7, #28
 8005526:	46bd      	mov	sp, r7
 8005528:	f85d 7b04 	ldr.w	r7, [sp], #4
 800552c:	4770      	bx	lr
 800552e:	bf00      	nop
 8005530:	40010000 	.word	0x40010000
 8005534:	40010400 	.word	0x40010400

08005538 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005538:	b480      	push	{r7}
 800553a:	b087      	sub	sp, #28
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	6a1b      	ldr	r3, [r3, #32]
 8005546:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	6a1b      	ldr	r3, [r3, #32]
 8005552:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005554:	687b      	ldr	r3, [r7, #4]
 8005556:	685b      	ldr	r3, [r3, #4]
 8005558:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	69db      	ldr	r3, [r3, #28]
 800555e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005560:	68fb      	ldr	r3, [r7, #12]
 8005562:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005566:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005568:	68fb      	ldr	r3, [r7, #12]
 800556a:	f023 0303 	bic.w	r3, r3, #3
 800556e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005570:	683b      	ldr	r3, [r7, #0]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	68fa      	ldr	r2, [r7, #12]
 8005576:	4313      	orrs	r3, r2
 8005578:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800557a:	697b      	ldr	r3, [r7, #20]
 800557c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005580:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005582:	683b      	ldr	r3, [r7, #0]
 8005584:	689b      	ldr	r3, [r3, #8]
 8005586:	021b      	lsls	r3, r3, #8
 8005588:	697a      	ldr	r2, [r7, #20]
 800558a:	4313      	orrs	r3, r2
 800558c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	4a21      	ldr	r2, [pc, #132]	; (8005618 <TIM_OC3_SetConfig+0xe0>)
 8005592:	4293      	cmp	r3, r2
 8005594:	d003      	beq.n	800559e <TIM_OC3_SetConfig+0x66>
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	4a20      	ldr	r2, [pc, #128]	; (800561c <TIM_OC3_SetConfig+0xe4>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d10d      	bne.n	80055ba <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800559e:	697b      	ldr	r3, [r7, #20]
 80055a0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80055a4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80055a6:	683b      	ldr	r3, [r7, #0]
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	021b      	lsls	r3, r3, #8
 80055ac:	697a      	ldr	r2, [r7, #20]
 80055ae:	4313      	orrs	r3, r2
 80055b0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80055b8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	4a16      	ldr	r2, [pc, #88]	; (8005618 <TIM_OC3_SetConfig+0xe0>)
 80055be:	4293      	cmp	r3, r2
 80055c0:	d003      	beq.n	80055ca <TIM_OC3_SetConfig+0x92>
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	4a15      	ldr	r2, [pc, #84]	; (800561c <TIM_OC3_SetConfig+0xe4>)
 80055c6:	4293      	cmp	r3, r2
 80055c8:	d113      	bne.n	80055f2 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80055ca:	693b      	ldr	r3, [r7, #16]
 80055cc:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80055d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80055d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80055da:	683b      	ldr	r3, [r7, #0]
 80055dc:	695b      	ldr	r3, [r3, #20]
 80055de:	011b      	lsls	r3, r3, #4
 80055e0:	693a      	ldr	r2, [r7, #16]
 80055e2:	4313      	orrs	r3, r2
 80055e4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	699b      	ldr	r3, [r3, #24]
 80055ea:	011b      	lsls	r3, r3, #4
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	4313      	orrs	r3, r2
 80055f0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	693a      	ldr	r2, [r7, #16]
 80055f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	685a      	ldr	r2, [r3, #4]
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	621a      	str	r2, [r3, #32]
}
 800560c:	bf00      	nop
 800560e:	371c      	adds	r7, #28
 8005610:	46bd      	mov	sp, r7
 8005612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005616:	4770      	bx	lr
 8005618:	40010000 	.word	0x40010000
 800561c:	40010400 	.word	0x40010400

08005620 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005620:	b480      	push	{r7}
 8005622:	b087      	sub	sp, #28
 8005624:	af00      	add	r7, sp, #0
 8005626:	6078      	str	r0, [r7, #4]
 8005628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6a1b      	ldr	r3, [r3, #32]
 800562e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	6a1b      	ldr	r3, [r3, #32]
 800563a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	685b      	ldr	r3, [r3, #4]
 8005640:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	69db      	ldr	r3, [r3, #28]
 8005646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800564e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	021b      	lsls	r3, r3, #8
 800565e:	68fa      	ldr	r2, [r7, #12]
 8005660:	4313      	orrs	r3, r2
 8005662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005664:	693b      	ldr	r3, [r7, #16]
 8005666:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800566a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	689b      	ldr	r3, [r3, #8]
 8005670:	031b      	lsls	r3, r3, #12
 8005672:	693a      	ldr	r2, [r7, #16]
 8005674:	4313      	orrs	r3, r2
 8005676:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a12      	ldr	r2, [pc, #72]	; (80056c4 <TIM_OC4_SetConfig+0xa4>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d003      	beq.n	8005688 <TIM_OC4_SetConfig+0x68>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a11      	ldr	r2, [pc, #68]	; (80056c8 <TIM_OC4_SetConfig+0xa8>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d109      	bne.n	800569c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005688:	697b      	ldr	r3, [r7, #20]
 800568a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800568e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	695b      	ldr	r3, [r3, #20]
 8005694:	019b      	lsls	r3, r3, #6
 8005696:	697a      	ldr	r2, [r7, #20]
 8005698:	4313      	orrs	r3, r2
 800569a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	697a      	ldr	r2, [r7, #20]
 80056a0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	685a      	ldr	r2, [r3, #4]
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	693a      	ldr	r2, [r7, #16]
 80056b4:	621a      	str	r2, [r3, #32]
}
 80056b6:	bf00      	nop
 80056b8:	371c      	adds	r7, #28
 80056ba:	46bd      	mov	sp, r7
 80056bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c0:	4770      	bx	lr
 80056c2:	bf00      	nop
 80056c4:	40010000 	.word	0x40010000
 80056c8:	40010400 	.word	0x40010400

080056cc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80056cc:	b480      	push	{r7}
 80056ce:	b087      	sub	sp, #28
 80056d0:	af00      	add	r7, sp, #0
 80056d2:	60f8      	str	r0, [r7, #12]
 80056d4:	60b9      	str	r1, [r7, #8]
 80056d6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	6a1b      	ldr	r3, [r3, #32]
 80056dc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	6a1b      	ldr	r3, [r3, #32]
 80056e2:	f023 0201 	bic.w	r2, r3, #1
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	699b      	ldr	r3, [r3, #24]
 80056ee:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80056f6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	011b      	lsls	r3, r3, #4
 80056fc:	693a      	ldr	r2, [r7, #16]
 80056fe:	4313      	orrs	r3, r2
 8005700:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005702:	697b      	ldr	r3, [r7, #20]
 8005704:	f023 030a 	bic.w	r3, r3, #10
 8005708:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800570a:	697a      	ldr	r2, [r7, #20]
 800570c:	68bb      	ldr	r3, [r7, #8]
 800570e:	4313      	orrs	r3, r2
 8005710:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	693a      	ldr	r2, [r7, #16]
 8005716:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005718:	68fb      	ldr	r3, [r7, #12]
 800571a:	697a      	ldr	r2, [r7, #20]
 800571c:	621a      	str	r2, [r3, #32]
}
 800571e:	bf00      	nop
 8005720:	371c      	adds	r7, #28
 8005722:	46bd      	mov	sp, r7
 8005724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005728:	4770      	bx	lr

0800572a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800572a:	b480      	push	{r7}
 800572c:	b087      	sub	sp, #28
 800572e:	af00      	add	r7, sp, #0
 8005730:	60f8      	str	r0, [r7, #12]
 8005732:	60b9      	str	r1, [r7, #8]
 8005734:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	6a1b      	ldr	r3, [r3, #32]
 800573a:	f023 0210 	bic.w	r2, r3, #16
 800573e:	68fb      	ldr	r3, [r7, #12]
 8005740:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	699b      	ldr	r3, [r3, #24]
 8005746:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	6a1b      	ldr	r3, [r3, #32]
 800574c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800574e:	697b      	ldr	r3, [r7, #20]
 8005750:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005754:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	031b      	lsls	r3, r3, #12
 800575a:	697a      	ldr	r2, [r7, #20]
 800575c:	4313      	orrs	r3, r2
 800575e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005760:	693b      	ldr	r3, [r7, #16]
 8005762:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005766:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005768:	68bb      	ldr	r3, [r7, #8]
 800576a:	011b      	lsls	r3, r3, #4
 800576c:	693a      	ldr	r2, [r7, #16]
 800576e:	4313      	orrs	r3, r2
 8005770:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005772:	68fb      	ldr	r3, [r7, #12]
 8005774:	697a      	ldr	r2, [r7, #20]
 8005776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	693a      	ldr	r2, [r7, #16]
 800577c:	621a      	str	r2, [r3, #32]
}
 800577e:	bf00      	nop
 8005780:	371c      	adds	r7, #28
 8005782:	46bd      	mov	sp, r7
 8005784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005788:	4770      	bx	lr

0800578a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800578a:	b480      	push	{r7}
 800578c:	b085      	sub	sp, #20
 800578e:	af00      	add	r7, sp, #0
 8005790:	6078      	str	r0, [r7, #4]
 8005792:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	689b      	ldr	r3, [r3, #8]
 8005798:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057a0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80057a2:	683a      	ldr	r2, [r7, #0]
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	4313      	orrs	r3, r2
 80057a8:	f043 0307 	orr.w	r3, r3, #7
 80057ac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	68fa      	ldr	r2, [r7, #12]
 80057b2:	609a      	str	r2, [r3, #8]
}
 80057b4:	bf00      	nop
 80057b6:	3714      	adds	r7, #20
 80057b8:	46bd      	mov	sp, r7
 80057ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057be:	4770      	bx	lr

080057c0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80057c0:	b480      	push	{r7}
 80057c2:	b087      	sub	sp, #28
 80057c4:	af00      	add	r7, sp, #0
 80057c6:	60f8      	str	r0, [r7, #12]
 80057c8:	60b9      	str	r1, [r7, #8]
 80057ca:	607a      	str	r2, [r7, #4]
 80057cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80057d4:	697b      	ldr	r3, [r7, #20]
 80057d6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80057da:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	021a      	lsls	r2, r3, #8
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	431a      	orrs	r2, r3
 80057e4:	68bb      	ldr	r3, [r7, #8]
 80057e6:	4313      	orrs	r3, r2
 80057e8:	697a      	ldr	r2, [r7, #20]
 80057ea:	4313      	orrs	r3, r2
 80057ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	697a      	ldr	r2, [r7, #20]
 80057f2:	609a      	str	r2, [r3, #8]
}
 80057f4:	bf00      	nop
 80057f6:	371c      	adds	r7, #28
 80057f8:	46bd      	mov	sp, r7
 80057fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057fe:	4770      	bx	lr

08005800 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005800:	b480      	push	{r7}
 8005802:	b087      	sub	sp, #28
 8005804:	af00      	add	r7, sp, #0
 8005806:	60f8      	str	r0, [r7, #12]
 8005808:	60b9      	str	r1, [r7, #8]
 800580a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800580c:	68bb      	ldr	r3, [r7, #8]
 800580e:	f003 031f 	and.w	r3, r3, #31
 8005812:	2201      	movs	r2, #1
 8005814:	fa02 f303 	lsl.w	r3, r2, r3
 8005818:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	6a1a      	ldr	r2, [r3, #32]
 800581e:	697b      	ldr	r3, [r7, #20]
 8005820:	43db      	mvns	r3, r3
 8005822:	401a      	ands	r2, r3
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005828:	68fb      	ldr	r3, [r7, #12]
 800582a:	6a1a      	ldr	r2, [r3, #32]
 800582c:	68bb      	ldr	r3, [r7, #8]
 800582e:	f003 031f 	and.w	r3, r3, #31
 8005832:	6879      	ldr	r1, [r7, #4]
 8005834:	fa01 f303 	lsl.w	r3, r1, r3
 8005838:	431a      	orrs	r2, r3
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	621a      	str	r2, [r3, #32]
}
 800583e:	bf00      	nop
 8005840:	371c      	adds	r7, #28
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr
	...

0800584c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
 8005854:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800585c:	2b01      	cmp	r3, #1
 800585e:	d101      	bne.n	8005864 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005860:	2302      	movs	r3, #2
 8005862:	e05a      	b.n	800591a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	2201      	movs	r2, #1
 8005868:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	685b      	ldr	r3, [r3, #4]
 800587a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	689b      	ldr	r3, [r3, #8]
 8005882:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800588a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	68fa      	ldr	r2, [r7, #12]
 8005892:	4313      	orrs	r3, r2
 8005894:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	68fa      	ldr	r2, [r7, #12]
 800589c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	4a21      	ldr	r2, [pc, #132]	; (8005928 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80058a4:	4293      	cmp	r3, r2
 80058a6:	d022      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058b0:	d01d      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	681b      	ldr	r3, [r3, #0]
 80058b6:	4a1d      	ldr	r2, [pc, #116]	; (800592c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d018      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	681b      	ldr	r3, [r3, #0]
 80058c0:	4a1b      	ldr	r2, [pc, #108]	; (8005930 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80058c2:	4293      	cmp	r3, r2
 80058c4:	d013      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	4a1a      	ldr	r2, [pc, #104]	; (8005934 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80058cc:	4293      	cmp	r3, r2
 80058ce:	d00e      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	4a18      	ldr	r2, [pc, #96]	; (8005938 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80058d6:	4293      	cmp	r3, r2
 80058d8:	d009      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a17      	ldr	r2, [pc, #92]	; (800593c <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d004      	beq.n	80058ee <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4a15      	ldr	r2, [pc, #84]	; (8005940 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d10c      	bne.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80058ee:	68bb      	ldr	r3, [r7, #8]
 80058f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	685b      	ldr	r3, [r3, #4]
 80058fa:	68ba      	ldr	r2, [r7, #8]
 80058fc:	4313      	orrs	r3, r2
 80058fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	68ba      	ldr	r2, [r7, #8]
 8005906:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005908:	687b      	ldr	r3, [r7, #4]
 800590a:	2201      	movs	r2, #1
 800590c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	2200      	movs	r2, #0
 8005914:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005918:	2300      	movs	r3, #0
}
 800591a:	4618      	mov	r0, r3
 800591c:	3714      	adds	r7, #20
 800591e:	46bd      	mov	sp, r7
 8005920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005924:	4770      	bx	lr
 8005926:	bf00      	nop
 8005928:	40010000 	.word	0x40010000
 800592c:	40000400 	.word	0x40000400
 8005930:	40000800 	.word	0x40000800
 8005934:	40000c00 	.word	0x40000c00
 8005938:	40010400 	.word	0x40010400
 800593c:	40014000 	.word	0x40014000
 8005940:	40001800 	.word	0x40001800

08005944 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005944:	b480      	push	{r7}
 8005946:	b083      	sub	sp, #12
 8005948:	af00      	add	r7, sp, #0
 800594a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800594c:	bf00      	nop
 800594e:	370c      	adds	r7, #12
 8005950:	46bd      	mov	sp, r7
 8005952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005956:	4770      	bx	lr

08005958 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005958:	b480      	push	{r7}
 800595a:	b083      	sub	sp, #12
 800595c:	af00      	add	r7, sp, #0
 800595e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005960:	bf00      	nop
 8005962:	370c      	adds	r7, #12
 8005964:	46bd      	mov	sp, r7
 8005966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596a:	4770      	bx	lr

0800596c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800596c:	b580      	push	{r7, lr}
 800596e:	b082      	sub	sp, #8
 8005970:	af00      	add	r7, sp, #0
 8005972:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005974:	687b      	ldr	r3, [r7, #4]
 8005976:	2b00      	cmp	r3, #0
 8005978:	d101      	bne.n	800597e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800597a:	2301      	movs	r3, #1
 800597c:	e03f      	b.n	80059fe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005984:	b2db      	uxtb	r3, r3
 8005986:	2b00      	cmp	r3, #0
 8005988:	d106      	bne.n	8005998 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2200      	movs	r2, #0
 800598e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005992:	6878      	ldr	r0, [r7, #4]
 8005994:	f7fd fbd8 	bl	8003148 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2224      	movs	r2, #36	; 0x24
 800599c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	68da      	ldr	r2, [r3, #12]
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80059ae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80059b0:	6878      	ldr	r0, [r7, #4]
 80059b2:	f000 f829 	bl	8005a08 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	691a      	ldr	r2, [r3, #16]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80059c4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	681b      	ldr	r3, [r3, #0]
 80059ca:	695a      	ldr	r2, [r3, #20]
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	681b      	ldr	r3, [r3, #0]
 80059d0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80059d4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	68da      	ldr	r2, [r3, #12]
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80059e4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	2200      	movs	r2, #0
 80059ea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2220      	movs	r2, #32
 80059f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2220      	movs	r2, #32
 80059f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80059fc:	2300      	movs	r3, #0
}
 80059fe:	4618      	mov	r0, r3
 8005a00:	3708      	adds	r7, #8
 8005a02:	46bd      	mov	sp, r7
 8005a04:	bd80      	pop	{r7, pc}
	...

08005a08 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a0c:	b09f      	sub	sp, #124	; 0x7c
 8005a0e:	af00      	add	r7, sp, #0
 8005a10:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a12:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	691b      	ldr	r3, [r3, #16]
 8005a18:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a1c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a1e:	68d9      	ldr	r1, [r3, #12]
 8005a20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a22:	681a      	ldr	r2, [r3, #0]
 8005a24:	ea40 0301 	orr.w	r3, r0, r1
 8005a28:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a2a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a2c:	689a      	ldr	r2, [r3, #8]
 8005a2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	431a      	orrs	r2, r3
 8005a34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a36:	695b      	ldr	r3, [r3, #20]
 8005a38:	431a      	orrs	r2, r3
 8005a3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a3c:	69db      	ldr	r3, [r3, #28]
 8005a3e:	4313      	orrs	r3, r2
 8005a40:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8005a42:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	68db      	ldr	r3, [r3, #12]
 8005a48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a4c:	f021 010c 	bic.w	r1, r1, #12
 8005a50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a52:	681a      	ldr	r2, [r3, #0]
 8005a54:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005a56:	430b      	orrs	r3, r1
 8005a58:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	695b      	ldr	r3, [r3, #20]
 8005a60:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a64:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a66:	6999      	ldr	r1, [r3, #24]
 8005a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a6a:	681a      	ldr	r2, [r3, #0]
 8005a6c:	ea40 0301 	orr.w	r3, r0, r1
 8005a70:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	4bc5      	ldr	r3, [pc, #788]	; (8005d8c <UART_SetConfig+0x384>)
 8005a78:	429a      	cmp	r2, r3
 8005a7a:	d004      	beq.n	8005a86 <UART_SetConfig+0x7e>
 8005a7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a7e:	681a      	ldr	r2, [r3, #0]
 8005a80:	4bc3      	ldr	r3, [pc, #780]	; (8005d90 <UART_SetConfig+0x388>)
 8005a82:	429a      	cmp	r2, r3
 8005a84:	d103      	bne.n	8005a8e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005a86:	f7fe fcb9 	bl	80043fc <HAL_RCC_GetPCLK2Freq>
 8005a8a:	6778      	str	r0, [r7, #116]	; 0x74
 8005a8c:	e002      	b.n	8005a94 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005a8e:	f7fe fca1 	bl	80043d4 <HAL_RCC_GetPCLK1Freq>
 8005a92:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005a94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005a96:	69db      	ldr	r3, [r3, #28]
 8005a98:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005a9c:	f040 80b6 	bne.w	8005c0c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005aa0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005aa2:	461c      	mov	r4, r3
 8005aa4:	f04f 0500 	mov.w	r5, #0
 8005aa8:	4622      	mov	r2, r4
 8005aaa:	462b      	mov	r3, r5
 8005aac:	1891      	adds	r1, r2, r2
 8005aae:	6439      	str	r1, [r7, #64]	; 0x40
 8005ab0:	415b      	adcs	r3, r3
 8005ab2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ab4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005ab8:	1912      	adds	r2, r2, r4
 8005aba:	eb45 0303 	adc.w	r3, r5, r3
 8005abe:	f04f 0000 	mov.w	r0, #0
 8005ac2:	f04f 0100 	mov.w	r1, #0
 8005ac6:	00d9      	lsls	r1, r3, #3
 8005ac8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005acc:	00d0      	lsls	r0, r2, #3
 8005ace:	4602      	mov	r2, r0
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	1911      	adds	r1, r2, r4
 8005ad4:	6639      	str	r1, [r7, #96]	; 0x60
 8005ad6:	416b      	adcs	r3, r5
 8005ad8:	667b      	str	r3, [r7, #100]	; 0x64
 8005ada:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005adc:	685b      	ldr	r3, [r3, #4]
 8005ade:	461a      	mov	r2, r3
 8005ae0:	f04f 0300 	mov.w	r3, #0
 8005ae4:	1891      	adds	r1, r2, r2
 8005ae6:	63b9      	str	r1, [r7, #56]	; 0x38
 8005ae8:	415b      	adcs	r3, r3
 8005aea:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005aec:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005af0:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8005af4:	f7fa fbe4 	bl	80002c0 <__aeabi_uldivmod>
 8005af8:	4602      	mov	r2, r0
 8005afa:	460b      	mov	r3, r1
 8005afc:	4ba5      	ldr	r3, [pc, #660]	; (8005d94 <UART_SetConfig+0x38c>)
 8005afe:	fba3 2302 	umull	r2, r3, r3, r2
 8005b02:	095b      	lsrs	r3, r3, #5
 8005b04:	011e      	lsls	r6, r3, #4
 8005b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b08:	461c      	mov	r4, r3
 8005b0a:	f04f 0500 	mov.w	r5, #0
 8005b0e:	4622      	mov	r2, r4
 8005b10:	462b      	mov	r3, r5
 8005b12:	1891      	adds	r1, r2, r2
 8005b14:	6339      	str	r1, [r7, #48]	; 0x30
 8005b16:	415b      	adcs	r3, r3
 8005b18:	637b      	str	r3, [r7, #52]	; 0x34
 8005b1a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8005b1e:	1912      	adds	r2, r2, r4
 8005b20:	eb45 0303 	adc.w	r3, r5, r3
 8005b24:	f04f 0000 	mov.w	r0, #0
 8005b28:	f04f 0100 	mov.w	r1, #0
 8005b2c:	00d9      	lsls	r1, r3, #3
 8005b2e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005b32:	00d0      	lsls	r0, r2, #3
 8005b34:	4602      	mov	r2, r0
 8005b36:	460b      	mov	r3, r1
 8005b38:	1911      	adds	r1, r2, r4
 8005b3a:	65b9      	str	r1, [r7, #88]	; 0x58
 8005b3c:	416b      	adcs	r3, r5
 8005b3e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005b40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005b42:	685b      	ldr	r3, [r3, #4]
 8005b44:	461a      	mov	r2, r3
 8005b46:	f04f 0300 	mov.w	r3, #0
 8005b4a:	1891      	adds	r1, r2, r2
 8005b4c:	62b9      	str	r1, [r7, #40]	; 0x28
 8005b4e:	415b      	adcs	r3, r3
 8005b50:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b52:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b56:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8005b5a:	f7fa fbb1 	bl	80002c0 <__aeabi_uldivmod>
 8005b5e:	4602      	mov	r2, r0
 8005b60:	460b      	mov	r3, r1
 8005b62:	4b8c      	ldr	r3, [pc, #560]	; (8005d94 <UART_SetConfig+0x38c>)
 8005b64:	fba3 1302 	umull	r1, r3, r3, r2
 8005b68:	095b      	lsrs	r3, r3, #5
 8005b6a:	2164      	movs	r1, #100	; 0x64
 8005b6c:	fb01 f303 	mul.w	r3, r1, r3
 8005b70:	1ad3      	subs	r3, r2, r3
 8005b72:	00db      	lsls	r3, r3, #3
 8005b74:	3332      	adds	r3, #50	; 0x32
 8005b76:	4a87      	ldr	r2, [pc, #540]	; (8005d94 <UART_SetConfig+0x38c>)
 8005b78:	fba2 2303 	umull	r2, r3, r2, r3
 8005b7c:	095b      	lsrs	r3, r3, #5
 8005b7e:	005b      	lsls	r3, r3, #1
 8005b80:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005b84:	441e      	add	r6, r3
 8005b86:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005b88:	4618      	mov	r0, r3
 8005b8a:	f04f 0100 	mov.w	r1, #0
 8005b8e:	4602      	mov	r2, r0
 8005b90:	460b      	mov	r3, r1
 8005b92:	1894      	adds	r4, r2, r2
 8005b94:	623c      	str	r4, [r7, #32]
 8005b96:	415b      	adcs	r3, r3
 8005b98:	627b      	str	r3, [r7, #36]	; 0x24
 8005b9a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005b9e:	1812      	adds	r2, r2, r0
 8005ba0:	eb41 0303 	adc.w	r3, r1, r3
 8005ba4:	f04f 0400 	mov.w	r4, #0
 8005ba8:	f04f 0500 	mov.w	r5, #0
 8005bac:	00dd      	lsls	r5, r3, #3
 8005bae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005bb2:	00d4      	lsls	r4, r2, #3
 8005bb4:	4622      	mov	r2, r4
 8005bb6:	462b      	mov	r3, r5
 8005bb8:	1814      	adds	r4, r2, r0
 8005bba:	653c      	str	r4, [r7, #80]	; 0x50
 8005bbc:	414b      	adcs	r3, r1
 8005bbe:	657b      	str	r3, [r7, #84]	; 0x54
 8005bc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005bc2:	685b      	ldr	r3, [r3, #4]
 8005bc4:	461a      	mov	r2, r3
 8005bc6:	f04f 0300 	mov.w	r3, #0
 8005bca:	1891      	adds	r1, r2, r2
 8005bcc:	61b9      	str	r1, [r7, #24]
 8005bce:	415b      	adcs	r3, r3
 8005bd0:	61fb      	str	r3, [r7, #28]
 8005bd2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005bd6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8005bda:	f7fa fb71 	bl	80002c0 <__aeabi_uldivmod>
 8005bde:	4602      	mov	r2, r0
 8005be0:	460b      	mov	r3, r1
 8005be2:	4b6c      	ldr	r3, [pc, #432]	; (8005d94 <UART_SetConfig+0x38c>)
 8005be4:	fba3 1302 	umull	r1, r3, r3, r2
 8005be8:	095b      	lsrs	r3, r3, #5
 8005bea:	2164      	movs	r1, #100	; 0x64
 8005bec:	fb01 f303 	mul.w	r3, r1, r3
 8005bf0:	1ad3      	subs	r3, r2, r3
 8005bf2:	00db      	lsls	r3, r3, #3
 8005bf4:	3332      	adds	r3, #50	; 0x32
 8005bf6:	4a67      	ldr	r2, [pc, #412]	; (8005d94 <UART_SetConfig+0x38c>)
 8005bf8:	fba2 2303 	umull	r2, r3, r2, r3
 8005bfc:	095b      	lsrs	r3, r3, #5
 8005bfe:	f003 0207 	and.w	r2, r3, #7
 8005c02:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c04:	681b      	ldr	r3, [r3, #0]
 8005c06:	4432      	add	r2, r6
 8005c08:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005c0a:	e0b9      	b.n	8005d80 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005c0c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c0e:	461c      	mov	r4, r3
 8005c10:	f04f 0500 	mov.w	r5, #0
 8005c14:	4622      	mov	r2, r4
 8005c16:	462b      	mov	r3, r5
 8005c18:	1891      	adds	r1, r2, r2
 8005c1a:	6139      	str	r1, [r7, #16]
 8005c1c:	415b      	adcs	r3, r3
 8005c1e:	617b      	str	r3, [r7, #20]
 8005c20:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8005c24:	1912      	adds	r2, r2, r4
 8005c26:	eb45 0303 	adc.w	r3, r5, r3
 8005c2a:	f04f 0000 	mov.w	r0, #0
 8005c2e:	f04f 0100 	mov.w	r1, #0
 8005c32:	00d9      	lsls	r1, r3, #3
 8005c34:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8005c38:	00d0      	lsls	r0, r2, #3
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	eb12 0804 	adds.w	r8, r2, r4
 8005c42:	eb43 0905 	adc.w	r9, r3, r5
 8005c46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005c48:	685b      	ldr	r3, [r3, #4]
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	f04f 0100 	mov.w	r1, #0
 8005c50:	f04f 0200 	mov.w	r2, #0
 8005c54:	f04f 0300 	mov.w	r3, #0
 8005c58:	008b      	lsls	r3, r1, #2
 8005c5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005c5e:	0082      	lsls	r2, r0, #2
 8005c60:	4640      	mov	r0, r8
 8005c62:	4649      	mov	r1, r9
 8005c64:	f7fa fb2c 	bl	80002c0 <__aeabi_uldivmod>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	460b      	mov	r3, r1
 8005c6c:	4b49      	ldr	r3, [pc, #292]	; (8005d94 <UART_SetConfig+0x38c>)
 8005c6e:	fba3 2302 	umull	r2, r3, r3, r2
 8005c72:	095b      	lsrs	r3, r3, #5
 8005c74:	011e      	lsls	r6, r3, #4
 8005c76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005c78:	4618      	mov	r0, r3
 8005c7a:	f04f 0100 	mov.w	r1, #0
 8005c7e:	4602      	mov	r2, r0
 8005c80:	460b      	mov	r3, r1
 8005c82:	1894      	adds	r4, r2, r2
 8005c84:	60bc      	str	r4, [r7, #8]
 8005c86:	415b      	adcs	r3, r3
 8005c88:	60fb      	str	r3, [r7, #12]
 8005c8a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005c8e:	1812      	adds	r2, r2, r0
 8005c90:	eb41 0303 	adc.w	r3, r1, r3
 8005c94:	f04f 0400 	mov.w	r4, #0
 8005c98:	f04f 0500 	mov.w	r5, #0
 8005c9c:	00dd      	lsls	r5, r3, #3
 8005c9e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005ca2:	00d4      	lsls	r4, r2, #3
 8005ca4:	4622      	mov	r2, r4
 8005ca6:	462b      	mov	r3, r5
 8005ca8:	1814      	adds	r4, r2, r0
 8005caa:	64bc      	str	r4, [r7, #72]	; 0x48
 8005cac:	414b      	adcs	r3, r1
 8005cae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005cb2:	685b      	ldr	r3, [r3, #4]
 8005cb4:	4618      	mov	r0, r3
 8005cb6:	f04f 0100 	mov.w	r1, #0
 8005cba:	f04f 0200 	mov.w	r2, #0
 8005cbe:	f04f 0300 	mov.w	r3, #0
 8005cc2:	008b      	lsls	r3, r1, #2
 8005cc4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005cc8:	0082      	lsls	r2, r0, #2
 8005cca:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8005cce:	f7fa faf7 	bl	80002c0 <__aeabi_uldivmod>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	460b      	mov	r3, r1
 8005cd6:	4b2f      	ldr	r3, [pc, #188]	; (8005d94 <UART_SetConfig+0x38c>)
 8005cd8:	fba3 1302 	umull	r1, r3, r3, r2
 8005cdc:	095b      	lsrs	r3, r3, #5
 8005cde:	2164      	movs	r1, #100	; 0x64
 8005ce0:	fb01 f303 	mul.w	r3, r1, r3
 8005ce4:	1ad3      	subs	r3, r2, r3
 8005ce6:	011b      	lsls	r3, r3, #4
 8005ce8:	3332      	adds	r3, #50	; 0x32
 8005cea:	4a2a      	ldr	r2, [pc, #168]	; (8005d94 <UART_SetConfig+0x38c>)
 8005cec:	fba2 2303 	umull	r2, r3, r2, r3
 8005cf0:	095b      	lsrs	r3, r3, #5
 8005cf2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005cf6:	441e      	add	r6, r3
 8005cf8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005cfa:	4618      	mov	r0, r3
 8005cfc:	f04f 0100 	mov.w	r1, #0
 8005d00:	4602      	mov	r2, r0
 8005d02:	460b      	mov	r3, r1
 8005d04:	1894      	adds	r4, r2, r2
 8005d06:	603c      	str	r4, [r7, #0]
 8005d08:	415b      	adcs	r3, r3
 8005d0a:	607b      	str	r3, [r7, #4]
 8005d0c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005d10:	1812      	adds	r2, r2, r0
 8005d12:	eb41 0303 	adc.w	r3, r1, r3
 8005d16:	f04f 0400 	mov.w	r4, #0
 8005d1a:	f04f 0500 	mov.w	r5, #0
 8005d1e:	00dd      	lsls	r5, r3, #3
 8005d20:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8005d24:	00d4      	lsls	r4, r2, #3
 8005d26:	4622      	mov	r2, r4
 8005d28:	462b      	mov	r3, r5
 8005d2a:	eb12 0a00 	adds.w	sl, r2, r0
 8005d2e:	eb43 0b01 	adc.w	fp, r3, r1
 8005d32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d34:	685b      	ldr	r3, [r3, #4]
 8005d36:	4618      	mov	r0, r3
 8005d38:	f04f 0100 	mov.w	r1, #0
 8005d3c:	f04f 0200 	mov.w	r2, #0
 8005d40:	f04f 0300 	mov.w	r3, #0
 8005d44:	008b      	lsls	r3, r1, #2
 8005d46:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8005d4a:	0082      	lsls	r2, r0, #2
 8005d4c:	4650      	mov	r0, sl
 8005d4e:	4659      	mov	r1, fp
 8005d50:	f7fa fab6 	bl	80002c0 <__aeabi_uldivmod>
 8005d54:	4602      	mov	r2, r0
 8005d56:	460b      	mov	r3, r1
 8005d58:	4b0e      	ldr	r3, [pc, #56]	; (8005d94 <UART_SetConfig+0x38c>)
 8005d5a:	fba3 1302 	umull	r1, r3, r3, r2
 8005d5e:	095b      	lsrs	r3, r3, #5
 8005d60:	2164      	movs	r1, #100	; 0x64
 8005d62:	fb01 f303 	mul.w	r3, r1, r3
 8005d66:	1ad3      	subs	r3, r2, r3
 8005d68:	011b      	lsls	r3, r3, #4
 8005d6a:	3332      	adds	r3, #50	; 0x32
 8005d6c:	4a09      	ldr	r2, [pc, #36]	; (8005d94 <UART_SetConfig+0x38c>)
 8005d6e:	fba2 2303 	umull	r2, r3, r2, r3
 8005d72:	095b      	lsrs	r3, r3, #5
 8005d74:	f003 020f 	and.w	r2, r3, #15
 8005d78:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	4432      	add	r2, r6
 8005d7e:	609a      	str	r2, [r3, #8]
}
 8005d80:	bf00      	nop
 8005d82:	377c      	adds	r7, #124	; 0x7c
 8005d84:	46bd      	mov	sp, r7
 8005d86:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d8a:	bf00      	nop
 8005d8c:	40011000 	.word	0x40011000
 8005d90:	40011400 	.word	0x40011400
 8005d94:	51eb851f 	.word	0x51eb851f

08005d98 <__errno>:
 8005d98:	4b01      	ldr	r3, [pc, #4]	; (8005da0 <__errno+0x8>)
 8005d9a:	6818      	ldr	r0, [r3, #0]
 8005d9c:	4770      	bx	lr
 8005d9e:	bf00      	nop
 8005da0:	20000044 	.word	0x20000044

08005da4 <__libc_init_array>:
 8005da4:	b570      	push	{r4, r5, r6, lr}
 8005da6:	4d0d      	ldr	r5, [pc, #52]	; (8005ddc <__libc_init_array+0x38>)
 8005da8:	4c0d      	ldr	r4, [pc, #52]	; (8005de0 <__libc_init_array+0x3c>)
 8005daa:	1b64      	subs	r4, r4, r5
 8005dac:	10a4      	asrs	r4, r4, #2
 8005dae:	2600      	movs	r6, #0
 8005db0:	42a6      	cmp	r6, r4
 8005db2:	d109      	bne.n	8005dc8 <__libc_init_array+0x24>
 8005db4:	4d0b      	ldr	r5, [pc, #44]	; (8005de4 <__libc_init_array+0x40>)
 8005db6:	4c0c      	ldr	r4, [pc, #48]	; (8005de8 <__libc_init_array+0x44>)
 8005db8:	f000 fc4e 	bl	8006658 <_init>
 8005dbc:	1b64      	subs	r4, r4, r5
 8005dbe:	10a4      	asrs	r4, r4, #2
 8005dc0:	2600      	movs	r6, #0
 8005dc2:	42a6      	cmp	r6, r4
 8005dc4:	d105      	bne.n	8005dd2 <__libc_init_array+0x2e>
 8005dc6:	bd70      	pop	{r4, r5, r6, pc}
 8005dc8:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dcc:	4798      	blx	r3
 8005dce:	3601      	adds	r6, #1
 8005dd0:	e7ee      	b.n	8005db0 <__libc_init_array+0xc>
 8005dd2:	f855 3b04 	ldr.w	r3, [r5], #4
 8005dd6:	4798      	blx	r3
 8005dd8:	3601      	adds	r6, #1
 8005dda:	e7f2      	b.n	8005dc2 <__libc_init_array+0x1e>
 8005ddc:	08006fcc 	.word	0x08006fcc
 8005de0:	08006fcc 	.word	0x08006fcc
 8005de4:	08006fcc 	.word	0x08006fcc
 8005de8:	08006fd0 	.word	0x08006fd0

08005dec <memset>:
 8005dec:	4402      	add	r2, r0
 8005dee:	4603      	mov	r3, r0
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d100      	bne.n	8005df6 <memset+0xa>
 8005df4:	4770      	bx	lr
 8005df6:	f803 1b01 	strb.w	r1, [r3], #1
 8005dfa:	e7f9      	b.n	8005df0 <memset+0x4>

08005dfc <siprintf>:
 8005dfc:	b40e      	push	{r1, r2, r3}
 8005dfe:	b500      	push	{lr}
 8005e00:	b09c      	sub	sp, #112	; 0x70
 8005e02:	ab1d      	add	r3, sp, #116	; 0x74
 8005e04:	9002      	str	r0, [sp, #8]
 8005e06:	9006      	str	r0, [sp, #24]
 8005e08:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8005e0c:	4809      	ldr	r0, [pc, #36]	; (8005e34 <siprintf+0x38>)
 8005e0e:	9107      	str	r1, [sp, #28]
 8005e10:	9104      	str	r1, [sp, #16]
 8005e12:	4909      	ldr	r1, [pc, #36]	; (8005e38 <siprintf+0x3c>)
 8005e14:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e18:	9105      	str	r1, [sp, #20]
 8005e1a:	6800      	ldr	r0, [r0, #0]
 8005e1c:	9301      	str	r3, [sp, #4]
 8005e1e:	a902      	add	r1, sp, #8
 8005e20:	f000 f868 	bl	8005ef4 <_svfiprintf_r>
 8005e24:	9b02      	ldr	r3, [sp, #8]
 8005e26:	2200      	movs	r2, #0
 8005e28:	701a      	strb	r2, [r3, #0]
 8005e2a:	b01c      	add	sp, #112	; 0x70
 8005e2c:	f85d eb04 	ldr.w	lr, [sp], #4
 8005e30:	b003      	add	sp, #12
 8005e32:	4770      	bx	lr
 8005e34:	20000044 	.word	0x20000044
 8005e38:	ffff0208 	.word	0xffff0208

08005e3c <__ssputs_r>:
 8005e3c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005e40:	688e      	ldr	r6, [r1, #8]
 8005e42:	429e      	cmp	r6, r3
 8005e44:	4682      	mov	sl, r0
 8005e46:	460c      	mov	r4, r1
 8005e48:	4690      	mov	r8, r2
 8005e4a:	461f      	mov	r7, r3
 8005e4c:	d838      	bhi.n	8005ec0 <__ssputs_r+0x84>
 8005e4e:	898a      	ldrh	r2, [r1, #12]
 8005e50:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8005e54:	d032      	beq.n	8005ebc <__ssputs_r+0x80>
 8005e56:	6825      	ldr	r5, [r4, #0]
 8005e58:	6909      	ldr	r1, [r1, #16]
 8005e5a:	eba5 0901 	sub.w	r9, r5, r1
 8005e5e:	6965      	ldr	r5, [r4, #20]
 8005e60:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8005e64:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8005e68:	3301      	adds	r3, #1
 8005e6a:	444b      	add	r3, r9
 8005e6c:	106d      	asrs	r5, r5, #1
 8005e6e:	429d      	cmp	r5, r3
 8005e70:	bf38      	it	cc
 8005e72:	461d      	movcc	r5, r3
 8005e74:	0553      	lsls	r3, r2, #21
 8005e76:	d531      	bpl.n	8005edc <__ssputs_r+0xa0>
 8005e78:	4629      	mov	r1, r5
 8005e7a:	f000 fb47 	bl	800650c <_malloc_r>
 8005e7e:	4606      	mov	r6, r0
 8005e80:	b950      	cbnz	r0, 8005e98 <__ssputs_r+0x5c>
 8005e82:	230c      	movs	r3, #12
 8005e84:	f8ca 3000 	str.w	r3, [sl]
 8005e88:	89a3      	ldrh	r3, [r4, #12]
 8005e8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005e8e:	81a3      	strh	r3, [r4, #12]
 8005e90:	f04f 30ff 	mov.w	r0, #4294967295
 8005e94:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e98:	6921      	ldr	r1, [r4, #16]
 8005e9a:	464a      	mov	r2, r9
 8005e9c:	f000 fabe 	bl	800641c <memcpy>
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8005ea6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005eaa:	81a3      	strh	r3, [r4, #12]
 8005eac:	6126      	str	r6, [r4, #16]
 8005eae:	6165      	str	r5, [r4, #20]
 8005eb0:	444e      	add	r6, r9
 8005eb2:	eba5 0509 	sub.w	r5, r5, r9
 8005eb6:	6026      	str	r6, [r4, #0]
 8005eb8:	60a5      	str	r5, [r4, #8]
 8005eba:	463e      	mov	r6, r7
 8005ebc:	42be      	cmp	r6, r7
 8005ebe:	d900      	bls.n	8005ec2 <__ssputs_r+0x86>
 8005ec0:	463e      	mov	r6, r7
 8005ec2:	4632      	mov	r2, r6
 8005ec4:	6820      	ldr	r0, [r4, #0]
 8005ec6:	4641      	mov	r1, r8
 8005ec8:	f000 fab6 	bl	8006438 <memmove>
 8005ecc:	68a3      	ldr	r3, [r4, #8]
 8005ece:	6822      	ldr	r2, [r4, #0]
 8005ed0:	1b9b      	subs	r3, r3, r6
 8005ed2:	4432      	add	r2, r6
 8005ed4:	60a3      	str	r3, [r4, #8]
 8005ed6:	6022      	str	r2, [r4, #0]
 8005ed8:	2000      	movs	r0, #0
 8005eda:	e7db      	b.n	8005e94 <__ssputs_r+0x58>
 8005edc:	462a      	mov	r2, r5
 8005ede:	f000 fb6f 	bl	80065c0 <_realloc_r>
 8005ee2:	4606      	mov	r6, r0
 8005ee4:	2800      	cmp	r0, #0
 8005ee6:	d1e1      	bne.n	8005eac <__ssputs_r+0x70>
 8005ee8:	6921      	ldr	r1, [r4, #16]
 8005eea:	4650      	mov	r0, sl
 8005eec:	f000 fabe 	bl	800646c <_free_r>
 8005ef0:	e7c7      	b.n	8005e82 <__ssputs_r+0x46>
	...

08005ef4 <_svfiprintf_r>:
 8005ef4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef8:	4698      	mov	r8, r3
 8005efa:	898b      	ldrh	r3, [r1, #12]
 8005efc:	061b      	lsls	r3, r3, #24
 8005efe:	b09d      	sub	sp, #116	; 0x74
 8005f00:	4607      	mov	r7, r0
 8005f02:	460d      	mov	r5, r1
 8005f04:	4614      	mov	r4, r2
 8005f06:	d50e      	bpl.n	8005f26 <_svfiprintf_r+0x32>
 8005f08:	690b      	ldr	r3, [r1, #16]
 8005f0a:	b963      	cbnz	r3, 8005f26 <_svfiprintf_r+0x32>
 8005f0c:	2140      	movs	r1, #64	; 0x40
 8005f0e:	f000 fafd 	bl	800650c <_malloc_r>
 8005f12:	6028      	str	r0, [r5, #0]
 8005f14:	6128      	str	r0, [r5, #16]
 8005f16:	b920      	cbnz	r0, 8005f22 <_svfiprintf_r+0x2e>
 8005f18:	230c      	movs	r3, #12
 8005f1a:	603b      	str	r3, [r7, #0]
 8005f1c:	f04f 30ff 	mov.w	r0, #4294967295
 8005f20:	e0d1      	b.n	80060c6 <_svfiprintf_r+0x1d2>
 8005f22:	2340      	movs	r3, #64	; 0x40
 8005f24:	616b      	str	r3, [r5, #20]
 8005f26:	2300      	movs	r3, #0
 8005f28:	9309      	str	r3, [sp, #36]	; 0x24
 8005f2a:	2320      	movs	r3, #32
 8005f2c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f30:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f34:	2330      	movs	r3, #48	; 0x30
 8005f36:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 80060e0 <_svfiprintf_r+0x1ec>
 8005f3a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f3e:	f04f 0901 	mov.w	r9, #1
 8005f42:	4623      	mov	r3, r4
 8005f44:	469a      	mov	sl, r3
 8005f46:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f4a:	b10a      	cbz	r2, 8005f50 <_svfiprintf_r+0x5c>
 8005f4c:	2a25      	cmp	r2, #37	; 0x25
 8005f4e:	d1f9      	bne.n	8005f44 <_svfiprintf_r+0x50>
 8005f50:	ebba 0b04 	subs.w	fp, sl, r4
 8005f54:	d00b      	beq.n	8005f6e <_svfiprintf_r+0x7a>
 8005f56:	465b      	mov	r3, fp
 8005f58:	4622      	mov	r2, r4
 8005f5a:	4629      	mov	r1, r5
 8005f5c:	4638      	mov	r0, r7
 8005f5e:	f7ff ff6d 	bl	8005e3c <__ssputs_r>
 8005f62:	3001      	adds	r0, #1
 8005f64:	f000 80aa 	beq.w	80060bc <_svfiprintf_r+0x1c8>
 8005f68:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f6a:	445a      	add	r2, fp
 8005f6c:	9209      	str	r2, [sp, #36]	; 0x24
 8005f6e:	f89a 3000 	ldrb.w	r3, [sl]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 80a2 	beq.w	80060bc <_svfiprintf_r+0x1c8>
 8005f78:	2300      	movs	r3, #0
 8005f7a:	f04f 32ff 	mov.w	r2, #4294967295
 8005f7e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f82:	f10a 0a01 	add.w	sl, sl, #1
 8005f86:	9304      	str	r3, [sp, #16]
 8005f88:	9307      	str	r3, [sp, #28]
 8005f8a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f8e:	931a      	str	r3, [sp, #104]	; 0x68
 8005f90:	4654      	mov	r4, sl
 8005f92:	2205      	movs	r2, #5
 8005f94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f98:	4851      	ldr	r0, [pc, #324]	; (80060e0 <_svfiprintf_r+0x1ec>)
 8005f9a:	f7fa f941 	bl	8000220 <memchr>
 8005f9e:	9a04      	ldr	r2, [sp, #16]
 8005fa0:	b9d8      	cbnz	r0, 8005fda <_svfiprintf_r+0xe6>
 8005fa2:	06d0      	lsls	r0, r2, #27
 8005fa4:	bf44      	itt	mi
 8005fa6:	2320      	movmi	r3, #32
 8005fa8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fac:	0711      	lsls	r1, r2, #28
 8005fae:	bf44      	itt	mi
 8005fb0:	232b      	movmi	r3, #43	; 0x2b
 8005fb2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005fb6:	f89a 3000 	ldrb.w	r3, [sl]
 8005fba:	2b2a      	cmp	r3, #42	; 0x2a
 8005fbc:	d015      	beq.n	8005fea <_svfiprintf_r+0xf6>
 8005fbe:	9a07      	ldr	r2, [sp, #28]
 8005fc0:	4654      	mov	r4, sl
 8005fc2:	2000      	movs	r0, #0
 8005fc4:	f04f 0c0a 	mov.w	ip, #10
 8005fc8:	4621      	mov	r1, r4
 8005fca:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fce:	3b30      	subs	r3, #48	; 0x30
 8005fd0:	2b09      	cmp	r3, #9
 8005fd2:	d94e      	bls.n	8006072 <_svfiprintf_r+0x17e>
 8005fd4:	b1b0      	cbz	r0, 8006004 <_svfiprintf_r+0x110>
 8005fd6:	9207      	str	r2, [sp, #28]
 8005fd8:	e014      	b.n	8006004 <_svfiprintf_r+0x110>
 8005fda:	eba0 0308 	sub.w	r3, r0, r8
 8005fde:	fa09 f303 	lsl.w	r3, r9, r3
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	9304      	str	r3, [sp, #16]
 8005fe6:	46a2      	mov	sl, r4
 8005fe8:	e7d2      	b.n	8005f90 <_svfiprintf_r+0x9c>
 8005fea:	9b03      	ldr	r3, [sp, #12]
 8005fec:	1d19      	adds	r1, r3, #4
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	9103      	str	r1, [sp, #12]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	bfbb      	ittet	lt
 8005ff6:	425b      	neglt	r3, r3
 8005ff8:	f042 0202 	orrlt.w	r2, r2, #2
 8005ffc:	9307      	strge	r3, [sp, #28]
 8005ffe:	9307      	strlt	r3, [sp, #28]
 8006000:	bfb8      	it	lt
 8006002:	9204      	strlt	r2, [sp, #16]
 8006004:	7823      	ldrb	r3, [r4, #0]
 8006006:	2b2e      	cmp	r3, #46	; 0x2e
 8006008:	d10c      	bne.n	8006024 <_svfiprintf_r+0x130>
 800600a:	7863      	ldrb	r3, [r4, #1]
 800600c:	2b2a      	cmp	r3, #42	; 0x2a
 800600e:	d135      	bne.n	800607c <_svfiprintf_r+0x188>
 8006010:	9b03      	ldr	r3, [sp, #12]
 8006012:	1d1a      	adds	r2, r3, #4
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	9203      	str	r2, [sp, #12]
 8006018:	2b00      	cmp	r3, #0
 800601a:	bfb8      	it	lt
 800601c:	f04f 33ff 	movlt.w	r3, #4294967295
 8006020:	3402      	adds	r4, #2
 8006022:	9305      	str	r3, [sp, #20]
 8006024:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80060f0 <_svfiprintf_r+0x1fc>
 8006028:	7821      	ldrb	r1, [r4, #0]
 800602a:	2203      	movs	r2, #3
 800602c:	4650      	mov	r0, sl
 800602e:	f7fa f8f7 	bl	8000220 <memchr>
 8006032:	b140      	cbz	r0, 8006046 <_svfiprintf_r+0x152>
 8006034:	2340      	movs	r3, #64	; 0x40
 8006036:	eba0 000a 	sub.w	r0, r0, sl
 800603a:	fa03 f000 	lsl.w	r0, r3, r0
 800603e:	9b04      	ldr	r3, [sp, #16]
 8006040:	4303      	orrs	r3, r0
 8006042:	3401      	adds	r4, #1
 8006044:	9304      	str	r3, [sp, #16]
 8006046:	f814 1b01 	ldrb.w	r1, [r4], #1
 800604a:	4826      	ldr	r0, [pc, #152]	; (80060e4 <_svfiprintf_r+0x1f0>)
 800604c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006050:	2206      	movs	r2, #6
 8006052:	f7fa f8e5 	bl	8000220 <memchr>
 8006056:	2800      	cmp	r0, #0
 8006058:	d038      	beq.n	80060cc <_svfiprintf_r+0x1d8>
 800605a:	4b23      	ldr	r3, [pc, #140]	; (80060e8 <_svfiprintf_r+0x1f4>)
 800605c:	bb1b      	cbnz	r3, 80060a6 <_svfiprintf_r+0x1b2>
 800605e:	9b03      	ldr	r3, [sp, #12]
 8006060:	3307      	adds	r3, #7
 8006062:	f023 0307 	bic.w	r3, r3, #7
 8006066:	3308      	adds	r3, #8
 8006068:	9303      	str	r3, [sp, #12]
 800606a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800606c:	4433      	add	r3, r6
 800606e:	9309      	str	r3, [sp, #36]	; 0x24
 8006070:	e767      	b.n	8005f42 <_svfiprintf_r+0x4e>
 8006072:	fb0c 3202 	mla	r2, ip, r2, r3
 8006076:	460c      	mov	r4, r1
 8006078:	2001      	movs	r0, #1
 800607a:	e7a5      	b.n	8005fc8 <_svfiprintf_r+0xd4>
 800607c:	2300      	movs	r3, #0
 800607e:	3401      	adds	r4, #1
 8006080:	9305      	str	r3, [sp, #20]
 8006082:	4619      	mov	r1, r3
 8006084:	f04f 0c0a 	mov.w	ip, #10
 8006088:	4620      	mov	r0, r4
 800608a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800608e:	3a30      	subs	r2, #48	; 0x30
 8006090:	2a09      	cmp	r2, #9
 8006092:	d903      	bls.n	800609c <_svfiprintf_r+0x1a8>
 8006094:	2b00      	cmp	r3, #0
 8006096:	d0c5      	beq.n	8006024 <_svfiprintf_r+0x130>
 8006098:	9105      	str	r1, [sp, #20]
 800609a:	e7c3      	b.n	8006024 <_svfiprintf_r+0x130>
 800609c:	fb0c 2101 	mla	r1, ip, r1, r2
 80060a0:	4604      	mov	r4, r0
 80060a2:	2301      	movs	r3, #1
 80060a4:	e7f0      	b.n	8006088 <_svfiprintf_r+0x194>
 80060a6:	ab03      	add	r3, sp, #12
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	462a      	mov	r2, r5
 80060ac:	4b0f      	ldr	r3, [pc, #60]	; (80060ec <_svfiprintf_r+0x1f8>)
 80060ae:	a904      	add	r1, sp, #16
 80060b0:	4638      	mov	r0, r7
 80060b2:	f3af 8000 	nop.w
 80060b6:	1c42      	adds	r2, r0, #1
 80060b8:	4606      	mov	r6, r0
 80060ba:	d1d6      	bne.n	800606a <_svfiprintf_r+0x176>
 80060bc:	89ab      	ldrh	r3, [r5, #12]
 80060be:	065b      	lsls	r3, r3, #25
 80060c0:	f53f af2c 	bmi.w	8005f1c <_svfiprintf_r+0x28>
 80060c4:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060c6:	b01d      	add	sp, #116	; 0x74
 80060c8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80060cc:	ab03      	add	r3, sp, #12
 80060ce:	9300      	str	r3, [sp, #0]
 80060d0:	462a      	mov	r2, r5
 80060d2:	4b06      	ldr	r3, [pc, #24]	; (80060ec <_svfiprintf_r+0x1f8>)
 80060d4:	a904      	add	r1, sp, #16
 80060d6:	4638      	mov	r0, r7
 80060d8:	f000 f87a 	bl	80061d0 <_printf_i>
 80060dc:	e7eb      	b.n	80060b6 <_svfiprintf_r+0x1c2>
 80060de:	bf00      	nop
 80060e0:	08006f90 	.word	0x08006f90
 80060e4:	08006f9a 	.word	0x08006f9a
 80060e8:	00000000 	.word	0x00000000
 80060ec:	08005e3d 	.word	0x08005e3d
 80060f0:	08006f96 	.word	0x08006f96

080060f4 <_printf_common>:
 80060f4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060f8:	4616      	mov	r6, r2
 80060fa:	4699      	mov	r9, r3
 80060fc:	688a      	ldr	r2, [r1, #8]
 80060fe:	690b      	ldr	r3, [r1, #16]
 8006100:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006104:	4293      	cmp	r3, r2
 8006106:	bfb8      	it	lt
 8006108:	4613      	movlt	r3, r2
 800610a:	6033      	str	r3, [r6, #0]
 800610c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006110:	4607      	mov	r7, r0
 8006112:	460c      	mov	r4, r1
 8006114:	b10a      	cbz	r2, 800611a <_printf_common+0x26>
 8006116:	3301      	adds	r3, #1
 8006118:	6033      	str	r3, [r6, #0]
 800611a:	6823      	ldr	r3, [r4, #0]
 800611c:	0699      	lsls	r1, r3, #26
 800611e:	bf42      	ittt	mi
 8006120:	6833      	ldrmi	r3, [r6, #0]
 8006122:	3302      	addmi	r3, #2
 8006124:	6033      	strmi	r3, [r6, #0]
 8006126:	6825      	ldr	r5, [r4, #0]
 8006128:	f015 0506 	ands.w	r5, r5, #6
 800612c:	d106      	bne.n	800613c <_printf_common+0x48>
 800612e:	f104 0a19 	add.w	sl, r4, #25
 8006132:	68e3      	ldr	r3, [r4, #12]
 8006134:	6832      	ldr	r2, [r6, #0]
 8006136:	1a9b      	subs	r3, r3, r2
 8006138:	42ab      	cmp	r3, r5
 800613a:	dc26      	bgt.n	800618a <_printf_common+0x96>
 800613c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006140:	1e13      	subs	r3, r2, #0
 8006142:	6822      	ldr	r2, [r4, #0]
 8006144:	bf18      	it	ne
 8006146:	2301      	movne	r3, #1
 8006148:	0692      	lsls	r2, r2, #26
 800614a:	d42b      	bmi.n	80061a4 <_printf_common+0xb0>
 800614c:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006150:	4649      	mov	r1, r9
 8006152:	4638      	mov	r0, r7
 8006154:	47c0      	blx	r8
 8006156:	3001      	adds	r0, #1
 8006158:	d01e      	beq.n	8006198 <_printf_common+0xa4>
 800615a:	6823      	ldr	r3, [r4, #0]
 800615c:	68e5      	ldr	r5, [r4, #12]
 800615e:	6832      	ldr	r2, [r6, #0]
 8006160:	f003 0306 	and.w	r3, r3, #6
 8006164:	2b04      	cmp	r3, #4
 8006166:	bf08      	it	eq
 8006168:	1aad      	subeq	r5, r5, r2
 800616a:	68a3      	ldr	r3, [r4, #8]
 800616c:	6922      	ldr	r2, [r4, #16]
 800616e:	bf0c      	ite	eq
 8006170:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006174:	2500      	movne	r5, #0
 8006176:	4293      	cmp	r3, r2
 8006178:	bfc4      	itt	gt
 800617a:	1a9b      	subgt	r3, r3, r2
 800617c:	18ed      	addgt	r5, r5, r3
 800617e:	2600      	movs	r6, #0
 8006180:	341a      	adds	r4, #26
 8006182:	42b5      	cmp	r5, r6
 8006184:	d11a      	bne.n	80061bc <_printf_common+0xc8>
 8006186:	2000      	movs	r0, #0
 8006188:	e008      	b.n	800619c <_printf_common+0xa8>
 800618a:	2301      	movs	r3, #1
 800618c:	4652      	mov	r2, sl
 800618e:	4649      	mov	r1, r9
 8006190:	4638      	mov	r0, r7
 8006192:	47c0      	blx	r8
 8006194:	3001      	adds	r0, #1
 8006196:	d103      	bne.n	80061a0 <_printf_common+0xac>
 8006198:	f04f 30ff 	mov.w	r0, #4294967295
 800619c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061a0:	3501      	adds	r5, #1
 80061a2:	e7c6      	b.n	8006132 <_printf_common+0x3e>
 80061a4:	18e1      	adds	r1, r4, r3
 80061a6:	1c5a      	adds	r2, r3, #1
 80061a8:	2030      	movs	r0, #48	; 0x30
 80061aa:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80061ae:	4422      	add	r2, r4
 80061b0:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80061b4:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061b8:	3302      	adds	r3, #2
 80061ba:	e7c7      	b.n	800614c <_printf_common+0x58>
 80061bc:	2301      	movs	r3, #1
 80061be:	4622      	mov	r2, r4
 80061c0:	4649      	mov	r1, r9
 80061c2:	4638      	mov	r0, r7
 80061c4:	47c0      	blx	r8
 80061c6:	3001      	adds	r0, #1
 80061c8:	d0e6      	beq.n	8006198 <_printf_common+0xa4>
 80061ca:	3601      	adds	r6, #1
 80061cc:	e7d9      	b.n	8006182 <_printf_common+0x8e>
	...

080061d0 <_printf_i>:
 80061d0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061d4:	460c      	mov	r4, r1
 80061d6:	4691      	mov	r9, r2
 80061d8:	7e27      	ldrb	r7, [r4, #24]
 80061da:	990c      	ldr	r1, [sp, #48]	; 0x30
 80061dc:	2f78      	cmp	r7, #120	; 0x78
 80061de:	4680      	mov	r8, r0
 80061e0:	469a      	mov	sl, r3
 80061e2:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80061e6:	d807      	bhi.n	80061f8 <_printf_i+0x28>
 80061e8:	2f62      	cmp	r7, #98	; 0x62
 80061ea:	d80a      	bhi.n	8006202 <_printf_i+0x32>
 80061ec:	2f00      	cmp	r7, #0
 80061ee:	f000 80d8 	beq.w	80063a2 <_printf_i+0x1d2>
 80061f2:	2f58      	cmp	r7, #88	; 0x58
 80061f4:	f000 80a3 	beq.w	800633e <_printf_i+0x16e>
 80061f8:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80061fc:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006200:	e03a      	b.n	8006278 <_printf_i+0xa8>
 8006202:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006206:	2b15      	cmp	r3, #21
 8006208:	d8f6      	bhi.n	80061f8 <_printf_i+0x28>
 800620a:	a001      	add	r0, pc, #4	; (adr r0, 8006210 <_printf_i+0x40>)
 800620c:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 8006210:	08006269 	.word	0x08006269
 8006214:	0800627d 	.word	0x0800627d
 8006218:	080061f9 	.word	0x080061f9
 800621c:	080061f9 	.word	0x080061f9
 8006220:	080061f9 	.word	0x080061f9
 8006224:	080061f9 	.word	0x080061f9
 8006228:	0800627d 	.word	0x0800627d
 800622c:	080061f9 	.word	0x080061f9
 8006230:	080061f9 	.word	0x080061f9
 8006234:	080061f9 	.word	0x080061f9
 8006238:	080061f9 	.word	0x080061f9
 800623c:	08006389 	.word	0x08006389
 8006240:	080062ad 	.word	0x080062ad
 8006244:	0800636b 	.word	0x0800636b
 8006248:	080061f9 	.word	0x080061f9
 800624c:	080061f9 	.word	0x080061f9
 8006250:	080063ab 	.word	0x080063ab
 8006254:	080061f9 	.word	0x080061f9
 8006258:	080062ad 	.word	0x080062ad
 800625c:	080061f9 	.word	0x080061f9
 8006260:	080061f9 	.word	0x080061f9
 8006264:	08006373 	.word	0x08006373
 8006268:	680b      	ldr	r3, [r1, #0]
 800626a:	1d1a      	adds	r2, r3, #4
 800626c:	681b      	ldr	r3, [r3, #0]
 800626e:	600a      	str	r2, [r1, #0]
 8006270:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8006274:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006278:	2301      	movs	r3, #1
 800627a:	e0a3      	b.n	80063c4 <_printf_i+0x1f4>
 800627c:	6825      	ldr	r5, [r4, #0]
 800627e:	6808      	ldr	r0, [r1, #0]
 8006280:	062e      	lsls	r6, r5, #24
 8006282:	f100 0304 	add.w	r3, r0, #4
 8006286:	d50a      	bpl.n	800629e <_printf_i+0xce>
 8006288:	6805      	ldr	r5, [r0, #0]
 800628a:	600b      	str	r3, [r1, #0]
 800628c:	2d00      	cmp	r5, #0
 800628e:	da03      	bge.n	8006298 <_printf_i+0xc8>
 8006290:	232d      	movs	r3, #45	; 0x2d
 8006292:	426d      	negs	r5, r5
 8006294:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006298:	485e      	ldr	r0, [pc, #376]	; (8006414 <_printf_i+0x244>)
 800629a:	230a      	movs	r3, #10
 800629c:	e019      	b.n	80062d2 <_printf_i+0x102>
 800629e:	f015 0f40 	tst.w	r5, #64	; 0x40
 80062a2:	6805      	ldr	r5, [r0, #0]
 80062a4:	600b      	str	r3, [r1, #0]
 80062a6:	bf18      	it	ne
 80062a8:	b22d      	sxthne	r5, r5
 80062aa:	e7ef      	b.n	800628c <_printf_i+0xbc>
 80062ac:	680b      	ldr	r3, [r1, #0]
 80062ae:	6825      	ldr	r5, [r4, #0]
 80062b0:	1d18      	adds	r0, r3, #4
 80062b2:	6008      	str	r0, [r1, #0]
 80062b4:	0628      	lsls	r0, r5, #24
 80062b6:	d501      	bpl.n	80062bc <_printf_i+0xec>
 80062b8:	681d      	ldr	r5, [r3, #0]
 80062ba:	e002      	b.n	80062c2 <_printf_i+0xf2>
 80062bc:	0669      	lsls	r1, r5, #25
 80062be:	d5fb      	bpl.n	80062b8 <_printf_i+0xe8>
 80062c0:	881d      	ldrh	r5, [r3, #0]
 80062c2:	4854      	ldr	r0, [pc, #336]	; (8006414 <_printf_i+0x244>)
 80062c4:	2f6f      	cmp	r7, #111	; 0x6f
 80062c6:	bf0c      	ite	eq
 80062c8:	2308      	moveq	r3, #8
 80062ca:	230a      	movne	r3, #10
 80062cc:	2100      	movs	r1, #0
 80062ce:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062d2:	6866      	ldr	r6, [r4, #4]
 80062d4:	60a6      	str	r6, [r4, #8]
 80062d6:	2e00      	cmp	r6, #0
 80062d8:	bfa2      	ittt	ge
 80062da:	6821      	ldrge	r1, [r4, #0]
 80062dc:	f021 0104 	bicge.w	r1, r1, #4
 80062e0:	6021      	strge	r1, [r4, #0]
 80062e2:	b90d      	cbnz	r5, 80062e8 <_printf_i+0x118>
 80062e4:	2e00      	cmp	r6, #0
 80062e6:	d04d      	beq.n	8006384 <_printf_i+0x1b4>
 80062e8:	4616      	mov	r6, r2
 80062ea:	fbb5 f1f3 	udiv	r1, r5, r3
 80062ee:	fb03 5711 	mls	r7, r3, r1, r5
 80062f2:	5dc7      	ldrb	r7, [r0, r7]
 80062f4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80062f8:	462f      	mov	r7, r5
 80062fa:	42bb      	cmp	r3, r7
 80062fc:	460d      	mov	r5, r1
 80062fe:	d9f4      	bls.n	80062ea <_printf_i+0x11a>
 8006300:	2b08      	cmp	r3, #8
 8006302:	d10b      	bne.n	800631c <_printf_i+0x14c>
 8006304:	6823      	ldr	r3, [r4, #0]
 8006306:	07df      	lsls	r7, r3, #31
 8006308:	d508      	bpl.n	800631c <_printf_i+0x14c>
 800630a:	6923      	ldr	r3, [r4, #16]
 800630c:	6861      	ldr	r1, [r4, #4]
 800630e:	4299      	cmp	r1, r3
 8006310:	bfde      	ittt	le
 8006312:	2330      	movle	r3, #48	; 0x30
 8006314:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006318:	f106 36ff 	addle.w	r6, r6, #4294967295
 800631c:	1b92      	subs	r2, r2, r6
 800631e:	6122      	str	r2, [r4, #16]
 8006320:	f8cd a000 	str.w	sl, [sp]
 8006324:	464b      	mov	r3, r9
 8006326:	aa03      	add	r2, sp, #12
 8006328:	4621      	mov	r1, r4
 800632a:	4640      	mov	r0, r8
 800632c:	f7ff fee2 	bl	80060f4 <_printf_common>
 8006330:	3001      	adds	r0, #1
 8006332:	d14c      	bne.n	80063ce <_printf_i+0x1fe>
 8006334:	f04f 30ff 	mov.w	r0, #4294967295
 8006338:	b004      	add	sp, #16
 800633a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800633e:	4835      	ldr	r0, [pc, #212]	; (8006414 <_printf_i+0x244>)
 8006340:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006344:	6823      	ldr	r3, [r4, #0]
 8006346:	680e      	ldr	r6, [r1, #0]
 8006348:	061f      	lsls	r7, r3, #24
 800634a:	f856 5b04 	ldr.w	r5, [r6], #4
 800634e:	600e      	str	r6, [r1, #0]
 8006350:	d514      	bpl.n	800637c <_printf_i+0x1ac>
 8006352:	07d9      	lsls	r1, r3, #31
 8006354:	bf44      	itt	mi
 8006356:	f043 0320 	orrmi.w	r3, r3, #32
 800635a:	6023      	strmi	r3, [r4, #0]
 800635c:	b91d      	cbnz	r5, 8006366 <_printf_i+0x196>
 800635e:	6823      	ldr	r3, [r4, #0]
 8006360:	f023 0320 	bic.w	r3, r3, #32
 8006364:	6023      	str	r3, [r4, #0]
 8006366:	2310      	movs	r3, #16
 8006368:	e7b0      	b.n	80062cc <_printf_i+0xfc>
 800636a:	6823      	ldr	r3, [r4, #0]
 800636c:	f043 0320 	orr.w	r3, r3, #32
 8006370:	6023      	str	r3, [r4, #0]
 8006372:	2378      	movs	r3, #120	; 0x78
 8006374:	4828      	ldr	r0, [pc, #160]	; (8006418 <_printf_i+0x248>)
 8006376:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800637a:	e7e3      	b.n	8006344 <_printf_i+0x174>
 800637c:	065e      	lsls	r6, r3, #25
 800637e:	bf48      	it	mi
 8006380:	b2ad      	uxthmi	r5, r5
 8006382:	e7e6      	b.n	8006352 <_printf_i+0x182>
 8006384:	4616      	mov	r6, r2
 8006386:	e7bb      	b.n	8006300 <_printf_i+0x130>
 8006388:	680b      	ldr	r3, [r1, #0]
 800638a:	6826      	ldr	r6, [r4, #0]
 800638c:	6960      	ldr	r0, [r4, #20]
 800638e:	1d1d      	adds	r5, r3, #4
 8006390:	600d      	str	r5, [r1, #0]
 8006392:	0635      	lsls	r5, r6, #24
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	d501      	bpl.n	800639c <_printf_i+0x1cc>
 8006398:	6018      	str	r0, [r3, #0]
 800639a:	e002      	b.n	80063a2 <_printf_i+0x1d2>
 800639c:	0671      	lsls	r1, r6, #25
 800639e:	d5fb      	bpl.n	8006398 <_printf_i+0x1c8>
 80063a0:	8018      	strh	r0, [r3, #0]
 80063a2:	2300      	movs	r3, #0
 80063a4:	6123      	str	r3, [r4, #16]
 80063a6:	4616      	mov	r6, r2
 80063a8:	e7ba      	b.n	8006320 <_printf_i+0x150>
 80063aa:	680b      	ldr	r3, [r1, #0]
 80063ac:	1d1a      	adds	r2, r3, #4
 80063ae:	600a      	str	r2, [r1, #0]
 80063b0:	681e      	ldr	r6, [r3, #0]
 80063b2:	6862      	ldr	r2, [r4, #4]
 80063b4:	2100      	movs	r1, #0
 80063b6:	4630      	mov	r0, r6
 80063b8:	f7f9 ff32 	bl	8000220 <memchr>
 80063bc:	b108      	cbz	r0, 80063c2 <_printf_i+0x1f2>
 80063be:	1b80      	subs	r0, r0, r6
 80063c0:	6060      	str	r0, [r4, #4]
 80063c2:	6863      	ldr	r3, [r4, #4]
 80063c4:	6123      	str	r3, [r4, #16]
 80063c6:	2300      	movs	r3, #0
 80063c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063cc:	e7a8      	b.n	8006320 <_printf_i+0x150>
 80063ce:	6923      	ldr	r3, [r4, #16]
 80063d0:	4632      	mov	r2, r6
 80063d2:	4649      	mov	r1, r9
 80063d4:	4640      	mov	r0, r8
 80063d6:	47d0      	blx	sl
 80063d8:	3001      	adds	r0, #1
 80063da:	d0ab      	beq.n	8006334 <_printf_i+0x164>
 80063dc:	6823      	ldr	r3, [r4, #0]
 80063de:	079b      	lsls	r3, r3, #30
 80063e0:	d413      	bmi.n	800640a <_printf_i+0x23a>
 80063e2:	68e0      	ldr	r0, [r4, #12]
 80063e4:	9b03      	ldr	r3, [sp, #12]
 80063e6:	4298      	cmp	r0, r3
 80063e8:	bfb8      	it	lt
 80063ea:	4618      	movlt	r0, r3
 80063ec:	e7a4      	b.n	8006338 <_printf_i+0x168>
 80063ee:	2301      	movs	r3, #1
 80063f0:	4632      	mov	r2, r6
 80063f2:	4649      	mov	r1, r9
 80063f4:	4640      	mov	r0, r8
 80063f6:	47d0      	blx	sl
 80063f8:	3001      	adds	r0, #1
 80063fa:	d09b      	beq.n	8006334 <_printf_i+0x164>
 80063fc:	3501      	adds	r5, #1
 80063fe:	68e3      	ldr	r3, [r4, #12]
 8006400:	9903      	ldr	r1, [sp, #12]
 8006402:	1a5b      	subs	r3, r3, r1
 8006404:	42ab      	cmp	r3, r5
 8006406:	dcf2      	bgt.n	80063ee <_printf_i+0x21e>
 8006408:	e7eb      	b.n	80063e2 <_printf_i+0x212>
 800640a:	2500      	movs	r5, #0
 800640c:	f104 0619 	add.w	r6, r4, #25
 8006410:	e7f5      	b.n	80063fe <_printf_i+0x22e>
 8006412:	bf00      	nop
 8006414:	08006fa1 	.word	0x08006fa1
 8006418:	08006fb2 	.word	0x08006fb2

0800641c <memcpy>:
 800641c:	440a      	add	r2, r1
 800641e:	4291      	cmp	r1, r2
 8006420:	f100 33ff 	add.w	r3, r0, #4294967295
 8006424:	d100      	bne.n	8006428 <memcpy+0xc>
 8006426:	4770      	bx	lr
 8006428:	b510      	push	{r4, lr}
 800642a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800642e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006432:	4291      	cmp	r1, r2
 8006434:	d1f9      	bne.n	800642a <memcpy+0xe>
 8006436:	bd10      	pop	{r4, pc}

08006438 <memmove>:
 8006438:	4288      	cmp	r0, r1
 800643a:	b510      	push	{r4, lr}
 800643c:	eb01 0402 	add.w	r4, r1, r2
 8006440:	d902      	bls.n	8006448 <memmove+0x10>
 8006442:	4284      	cmp	r4, r0
 8006444:	4623      	mov	r3, r4
 8006446:	d807      	bhi.n	8006458 <memmove+0x20>
 8006448:	1e43      	subs	r3, r0, #1
 800644a:	42a1      	cmp	r1, r4
 800644c:	d008      	beq.n	8006460 <memmove+0x28>
 800644e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006452:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006456:	e7f8      	b.n	800644a <memmove+0x12>
 8006458:	4402      	add	r2, r0
 800645a:	4601      	mov	r1, r0
 800645c:	428a      	cmp	r2, r1
 800645e:	d100      	bne.n	8006462 <memmove+0x2a>
 8006460:	bd10      	pop	{r4, pc}
 8006462:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006466:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800646a:	e7f7      	b.n	800645c <memmove+0x24>

0800646c <_free_r>:
 800646c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800646e:	2900      	cmp	r1, #0
 8006470:	d048      	beq.n	8006504 <_free_r+0x98>
 8006472:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006476:	9001      	str	r0, [sp, #4]
 8006478:	2b00      	cmp	r3, #0
 800647a:	f1a1 0404 	sub.w	r4, r1, #4
 800647e:	bfb8      	it	lt
 8006480:	18e4      	addlt	r4, r4, r3
 8006482:	f000 f8d3 	bl	800662c <__malloc_lock>
 8006486:	4a20      	ldr	r2, [pc, #128]	; (8006508 <_free_r+0x9c>)
 8006488:	9801      	ldr	r0, [sp, #4]
 800648a:	6813      	ldr	r3, [r2, #0]
 800648c:	4615      	mov	r5, r2
 800648e:	b933      	cbnz	r3, 800649e <_free_r+0x32>
 8006490:	6063      	str	r3, [r4, #4]
 8006492:	6014      	str	r4, [r2, #0]
 8006494:	b003      	add	sp, #12
 8006496:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800649a:	f000 b8cd 	b.w	8006638 <__malloc_unlock>
 800649e:	42a3      	cmp	r3, r4
 80064a0:	d90b      	bls.n	80064ba <_free_r+0x4e>
 80064a2:	6821      	ldr	r1, [r4, #0]
 80064a4:	1862      	adds	r2, r4, r1
 80064a6:	4293      	cmp	r3, r2
 80064a8:	bf04      	itt	eq
 80064aa:	681a      	ldreq	r2, [r3, #0]
 80064ac:	685b      	ldreq	r3, [r3, #4]
 80064ae:	6063      	str	r3, [r4, #4]
 80064b0:	bf04      	itt	eq
 80064b2:	1852      	addeq	r2, r2, r1
 80064b4:	6022      	streq	r2, [r4, #0]
 80064b6:	602c      	str	r4, [r5, #0]
 80064b8:	e7ec      	b.n	8006494 <_free_r+0x28>
 80064ba:	461a      	mov	r2, r3
 80064bc:	685b      	ldr	r3, [r3, #4]
 80064be:	b10b      	cbz	r3, 80064c4 <_free_r+0x58>
 80064c0:	42a3      	cmp	r3, r4
 80064c2:	d9fa      	bls.n	80064ba <_free_r+0x4e>
 80064c4:	6811      	ldr	r1, [r2, #0]
 80064c6:	1855      	adds	r5, r2, r1
 80064c8:	42a5      	cmp	r5, r4
 80064ca:	d10b      	bne.n	80064e4 <_free_r+0x78>
 80064cc:	6824      	ldr	r4, [r4, #0]
 80064ce:	4421      	add	r1, r4
 80064d0:	1854      	adds	r4, r2, r1
 80064d2:	42a3      	cmp	r3, r4
 80064d4:	6011      	str	r1, [r2, #0]
 80064d6:	d1dd      	bne.n	8006494 <_free_r+0x28>
 80064d8:	681c      	ldr	r4, [r3, #0]
 80064da:	685b      	ldr	r3, [r3, #4]
 80064dc:	6053      	str	r3, [r2, #4]
 80064de:	4421      	add	r1, r4
 80064e0:	6011      	str	r1, [r2, #0]
 80064e2:	e7d7      	b.n	8006494 <_free_r+0x28>
 80064e4:	d902      	bls.n	80064ec <_free_r+0x80>
 80064e6:	230c      	movs	r3, #12
 80064e8:	6003      	str	r3, [r0, #0]
 80064ea:	e7d3      	b.n	8006494 <_free_r+0x28>
 80064ec:	6825      	ldr	r5, [r4, #0]
 80064ee:	1961      	adds	r1, r4, r5
 80064f0:	428b      	cmp	r3, r1
 80064f2:	bf04      	itt	eq
 80064f4:	6819      	ldreq	r1, [r3, #0]
 80064f6:	685b      	ldreq	r3, [r3, #4]
 80064f8:	6063      	str	r3, [r4, #4]
 80064fa:	bf04      	itt	eq
 80064fc:	1949      	addeq	r1, r1, r5
 80064fe:	6021      	streq	r1, [r4, #0]
 8006500:	6054      	str	r4, [r2, #4]
 8006502:	e7c7      	b.n	8006494 <_free_r+0x28>
 8006504:	b003      	add	sp, #12
 8006506:	bd30      	pop	{r4, r5, pc}
 8006508:	2000090c 	.word	0x2000090c

0800650c <_malloc_r>:
 800650c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800650e:	1ccd      	adds	r5, r1, #3
 8006510:	f025 0503 	bic.w	r5, r5, #3
 8006514:	3508      	adds	r5, #8
 8006516:	2d0c      	cmp	r5, #12
 8006518:	bf38      	it	cc
 800651a:	250c      	movcc	r5, #12
 800651c:	2d00      	cmp	r5, #0
 800651e:	4606      	mov	r6, r0
 8006520:	db01      	blt.n	8006526 <_malloc_r+0x1a>
 8006522:	42a9      	cmp	r1, r5
 8006524:	d903      	bls.n	800652e <_malloc_r+0x22>
 8006526:	230c      	movs	r3, #12
 8006528:	6033      	str	r3, [r6, #0]
 800652a:	2000      	movs	r0, #0
 800652c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800652e:	f000 f87d 	bl	800662c <__malloc_lock>
 8006532:	4921      	ldr	r1, [pc, #132]	; (80065b8 <_malloc_r+0xac>)
 8006534:	680a      	ldr	r2, [r1, #0]
 8006536:	4614      	mov	r4, r2
 8006538:	b99c      	cbnz	r4, 8006562 <_malloc_r+0x56>
 800653a:	4f20      	ldr	r7, [pc, #128]	; (80065bc <_malloc_r+0xb0>)
 800653c:	683b      	ldr	r3, [r7, #0]
 800653e:	b923      	cbnz	r3, 800654a <_malloc_r+0x3e>
 8006540:	4621      	mov	r1, r4
 8006542:	4630      	mov	r0, r6
 8006544:	f000 f862 	bl	800660c <_sbrk_r>
 8006548:	6038      	str	r0, [r7, #0]
 800654a:	4629      	mov	r1, r5
 800654c:	4630      	mov	r0, r6
 800654e:	f000 f85d 	bl	800660c <_sbrk_r>
 8006552:	1c43      	adds	r3, r0, #1
 8006554:	d123      	bne.n	800659e <_malloc_r+0x92>
 8006556:	230c      	movs	r3, #12
 8006558:	6033      	str	r3, [r6, #0]
 800655a:	4630      	mov	r0, r6
 800655c:	f000 f86c 	bl	8006638 <__malloc_unlock>
 8006560:	e7e3      	b.n	800652a <_malloc_r+0x1e>
 8006562:	6823      	ldr	r3, [r4, #0]
 8006564:	1b5b      	subs	r3, r3, r5
 8006566:	d417      	bmi.n	8006598 <_malloc_r+0x8c>
 8006568:	2b0b      	cmp	r3, #11
 800656a:	d903      	bls.n	8006574 <_malloc_r+0x68>
 800656c:	6023      	str	r3, [r4, #0]
 800656e:	441c      	add	r4, r3
 8006570:	6025      	str	r5, [r4, #0]
 8006572:	e004      	b.n	800657e <_malloc_r+0x72>
 8006574:	6863      	ldr	r3, [r4, #4]
 8006576:	42a2      	cmp	r2, r4
 8006578:	bf0c      	ite	eq
 800657a:	600b      	streq	r3, [r1, #0]
 800657c:	6053      	strne	r3, [r2, #4]
 800657e:	4630      	mov	r0, r6
 8006580:	f000 f85a 	bl	8006638 <__malloc_unlock>
 8006584:	f104 000b 	add.w	r0, r4, #11
 8006588:	1d23      	adds	r3, r4, #4
 800658a:	f020 0007 	bic.w	r0, r0, #7
 800658e:	1ac2      	subs	r2, r0, r3
 8006590:	d0cc      	beq.n	800652c <_malloc_r+0x20>
 8006592:	1a1b      	subs	r3, r3, r0
 8006594:	50a3      	str	r3, [r4, r2]
 8006596:	e7c9      	b.n	800652c <_malloc_r+0x20>
 8006598:	4622      	mov	r2, r4
 800659a:	6864      	ldr	r4, [r4, #4]
 800659c:	e7cc      	b.n	8006538 <_malloc_r+0x2c>
 800659e:	1cc4      	adds	r4, r0, #3
 80065a0:	f024 0403 	bic.w	r4, r4, #3
 80065a4:	42a0      	cmp	r0, r4
 80065a6:	d0e3      	beq.n	8006570 <_malloc_r+0x64>
 80065a8:	1a21      	subs	r1, r4, r0
 80065aa:	4630      	mov	r0, r6
 80065ac:	f000 f82e 	bl	800660c <_sbrk_r>
 80065b0:	3001      	adds	r0, #1
 80065b2:	d1dd      	bne.n	8006570 <_malloc_r+0x64>
 80065b4:	e7cf      	b.n	8006556 <_malloc_r+0x4a>
 80065b6:	bf00      	nop
 80065b8:	2000090c 	.word	0x2000090c
 80065bc:	20000910 	.word	0x20000910

080065c0 <_realloc_r>:
 80065c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065c2:	4607      	mov	r7, r0
 80065c4:	4614      	mov	r4, r2
 80065c6:	460e      	mov	r6, r1
 80065c8:	b921      	cbnz	r1, 80065d4 <_realloc_r+0x14>
 80065ca:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065ce:	4611      	mov	r1, r2
 80065d0:	f7ff bf9c 	b.w	800650c <_malloc_r>
 80065d4:	b922      	cbnz	r2, 80065e0 <_realloc_r+0x20>
 80065d6:	f7ff ff49 	bl	800646c <_free_r>
 80065da:	4625      	mov	r5, r4
 80065dc:	4628      	mov	r0, r5
 80065de:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065e0:	f000 f830 	bl	8006644 <_malloc_usable_size_r>
 80065e4:	42a0      	cmp	r0, r4
 80065e6:	d20f      	bcs.n	8006608 <_realloc_r+0x48>
 80065e8:	4621      	mov	r1, r4
 80065ea:	4638      	mov	r0, r7
 80065ec:	f7ff ff8e 	bl	800650c <_malloc_r>
 80065f0:	4605      	mov	r5, r0
 80065f2:	2800      	cmp	r0, #0
 80065f4:	d0f2      	beq.n	80065dc <_realloc_r+0x1c>
 80065f6:	4631      	mov	r1, r6
 80065f8:	4622      	mov	r2, r4
 80065fa:	f7ff ff0f 	bl	800641c <memcpy>
 80065fe:	4631      	mov	r1, r6
 8006600:	4638      	mov	r0, r7
 8006602:	f7ff ff33 	bl	800646c <_free_r>
 8006606:	e7e9      	b.n	80065dc <_realloc_r+0x1c>
 8006608:	4635      	mov	r5, r6
 800660a:	e7e7      	b.n	80065dc <_realloc_r+0x1c>

0800660c <_sbrk_r>:
 800660c:	b538      	push	{r3, r4, r5, lr}
 800660e:	4d06      	ldr	r5, [pc, #24]	; (8006628 <_sbrk_r+0x1c>)
 8006610:	2300      	movs	r3, #0
 8006612:	4604      	mov	r4, r0
 8006614:	4608      	mov	r0, r1
 8006616:	602b      	str	r3, [r5, #0]
 8006618:	f7fc fe7e 	bl	8003318 <_sbrk>
 800661c:	1c43      	adds	r3, r0, #1
 800661e:	d102      	bne.n	8006626 <_sbrk_r+0x1a>
 8006620:	682b      	ldr	r3, [r5, #0]
 8006622:	b103      	cbz	r3, 8006626 <_sbrk_r+0x1a>
 8006624:	6023      	str	r3, [r4, #0]
 8006626:	bd38      	pop	{r3, r4, r5, pc}
 8006628:	20000a9c 	.word	0x20000a9c

0800662c <__malloc_lock>:
 800662c:	4801      	ldr	r0, [pc, #4]	; (8006634 <__malloc_lock+0x8>)
 800662e:	f000 b811 	b.w	8006654 <__retarget_lock_acquire_recursive>
 8006632:	bf00      	nop
 8006634:	20000aa4 	.word	0x20000aa4

08006638 <__malloc_unlock>:
 8006638:	4801      	ldr	r0, [pc, #4]	; (8006640 <__malloc_unlock+0x8>)
 800663a:	f000 b80c 	b.w	8006656 <__retarget_lock_release_recursive>
 800663e:	bf00      	nop
 8006640:	20000aa4 	.word	0x20000aa4

08006644 <_malloc_usable_size_r>:
 8006644:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006648:	1f18      	subs	r0, r3, #4
 800664a:	2b00      	cmp	r3, #0
 800664c:	bfbc      	itt	lt
 800664e:	580b      	ldrlt	r3, [r1, r0]
 8006650:	18c0      	addlt	r0, r0, r3
 8006652:	4770      	bx	lr

08006654 <__retarget_lock_acquire_recursive>:
 8006654:	4770      	bx	lr

08006656 <__retarget_lock_release_recursive>:
 8006656:	4770      	bx	lr

08006658 <_init>:
 8006658:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800665a:	bf00      	nop
 800665c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800665e:	bc08      	pop	{r3}
 8006660:	469e      	mov	lr, r3
 8006662:	4770      	bx	lr

08006664 <_fini>:
 8006664:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006666:	bf00      	nop
 8006668:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800666a:	bc08      	pop	{r3}
 800666c:	469e      	mov	lr, r3
 800666e:	4770      	bx	lr
